(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1056938,      20628]
NotebookOptionsPosition[   1034942,      20282]
NotebookOutlinePosition[   1035341,      20298]
CellTagsIndexPosition[   1035298,      20295]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Support Vector Machines", "Title",
 CellChangeTimes->{{3.822981123991681*^9, 
  3.822981127870563*^9}},ExpressionUUID->"289eaf38-3e93-40a8-bc2b-\
d9c992b97006"],

Cell["\<\
In this notebook we will develop support vector machine models for several \
datasets by using them to formulate a constrained optimisation problem. \
First, we review how constrained optimisation is done in Mathematica.\
\>", "Text",
 CellChangeTimes->{{3.8229929850392323`*^9, 3.822993064350775*^9}, {
  3.822993467940414*^9, 
  3.8229934796060667`*^9}},ExpressionUUID->"ef24bbba-1885-49f3-bd5c-\
aeaabe0bc185"],

Cell[CellGroupData[{

Cell["Constrained Optimisation", "Section",
 CellChangeTimes->{{3.8229934593339653`*^9, 
  3.822993463574456*^9}},ExpressionUUID->"bde7937b-f30f-4050-93b6-\
58fce63e9674"],

Cell[TextData[{
 "Consider the problem of minimising ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["y", "2"]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "97fd13ae-a8c4-45f0-bfa8-25c24353824b"],
 " subject to the constraints ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"3", "x"}], "+", 
     RowBox[{"2", "y"}]}], "\[GreaterEqual]", "7"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "36983e70-4823-425b-b43d-e06434e46d92"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"x", "+", 
     RowBox[{"2", "y"}]}], "\[GreaterEqual]", "6"}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "91b1bb6b-a7e4-4ce5-af40-72ebd5063be6"],
 ". We can solve this using NMinimize:"
}], "Text",
 CellChangeTimes->{{3.8229935434061613`*^9, 3.82299355669022*^9}, {
  3.8229944857040873`*^9, 
  3.822994533796236*^9}},ExpressionUUID->"cadd491c-50ed-4874-93d3-\
6fd1c6d20aee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NMinimize", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}], ",", 
     RowBox[{"And", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"3", "x"}], "+", 
         RowBox[{"2", "y"}]}], "\[GreaterEqual]", "7"}], ",", 
       RowBox[{
        RowBox[{"x", "+", 
         RowBox[{"2", "y"}]}], "\[GreaterEqual]", "6"}]}], "]"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8229951145159388`*^9, 3.8229951432131443`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"a037800d-9225-49ab-af5d-3c072ac2e1ca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.2000000013477745`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Rule]", "1.2000000008838432`"}], ",", 
     RowBox[{"y", "\[Rule]", "2.399999999838865`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.822994535630658*^9, {3.822995125506536*^9, 3.822995143562982*^9}},
 CellLabel->"Out[69]=",ExpressionUUID->"72c284b0-0095-48cc-97a6-72b456f2631a"]
}, Open  ]],

Cell["\<\
Let\[CloseCurlyQuote]s visualise the solution along with the constraints and \
the function we are trying to minimise.\
\>", "Text",
 CellChangeTimes->{{3.822994555250189*^9, 
  3.822994574520455*^9}},ExpressionUUID->"395ea9a3-acfc-487f-b9f9-\
78cf4694122f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot3D", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "5"}], "}"}], ",", 
     RowBox[{"RegionFunction", "\[Rule]", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "y"}], "}"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"3", "x"}], "+", 
           RowBox[{"2", "y"}]}], "\[GreaterEqual]", "7"}], "&&", 
         RowBox[{
          RowBox[{"x", "+", 
           RowBox[{"2", "y"}]}], "\[GreaterEqual]", "6"}]}]}], "]"}]}]}], 
    "]"}], ",", 
   RowBox[{"ListPointPlot3D", "[", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"1.2", ",", "2.4", ",", "7.2"}], "}"}], "}"}], "]"}], ",", 
   RowBox[{"Graphics3D", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Opacity", "[", "0.5", "]"}], ",", "Gray", ",", 
      RowBox[{"InfinitePlane", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{
            FractionBox["1", "2"], " ", 
            RowBox[{"(", 
             RowBox[{"7", "-", 
              RowBox[{"3", " ", "x"}]}], ")"}]}], ",", 
           RowBox[{"RandomReal", "[", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "3"}], "}"}]}], "]"}], "]"}]}], "}"}], "]"}], ",", 
   RowBox[{"Graphics3D", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Opacity", "[", "0.5", "]"}], ",", "Gray", ",", 
      RowBox[{"InfinitePlane", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{
            FractionBox["1", "2"], " ", 
            RowBox[{"(", 
             RowBox[{"6", "-", " ", "x"}], ")"}]}], ",", 
           RowBox[{"RandomReal", "[", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "3"}], "}"}]}], "]"}], "]"}]}], "}"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8229937075259047`*^9, 3.822993739876099*^9}, {
  3.8229937757712803`*^9, 3.82299383915158*^9}, {3.822993923965261*^9, 
  3.822994019913948*^9}, {3.822994061179549*^9, 3.822994144933711*^9}, {
  3.822994399778596*^9, 3.822994466142171*^9}, {3.8229951578965178`*^9, 
  3.8229951778769207`*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"9ca59a21-1e5a-421a-a381-c57d6a5d6aa4"],

Cell[BoxData[
 Graphics3DBox[{{GraphicsComplex3DBox[CompressedData["
1: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
/7FnqyOWO/BjhfFLTsQ5Y/kC7wrM23T7mCvdL8XwhsC7LGN5Dywv4C61VfMW
hdB7KtCe0tMibU+p/sAdZn0pVY+i91QAj8jl3/hqOBx1Nuu8slq8cDCZKakm
nv3SDnUG3nF2XrX4NTvUGfiCBwfSMv74IaAzcMXOb6vr39qjzsAnpyiVxd11
QJ2BO64ZuCjwC4fui2X4lQ9VS1LGOaHOwKuE9vQ4o87AU14/3lr1wRV1Bi5Y
Kn+qUc4DdQY+x2XbNhN3gjoDt4jq6xbf5Yk6A78b8HR7igy9pwK40fchky8e
90GdgQeR2/7Jwb6os57BOzvR2j/+1Lg9ak1zOKgncKUtbc2BFfTeD+DX84a/
OrjIkd43x/DffvP1rSY5oZ7A33mFlsnHO6OewKdnGlV4vKf3fgCPiyw0u5Hq
hnoCtzps+jklxgP1BO6lfok1fixBPYG7Hrjmun49vfcDuGil8YnQ1/TeD+Dp
eSz3jxN9UE/gv8Z7isl9pfd+AB88u++p7vERpCL22IGcIHky4pmWYxLrO3eV
LllUlGhNdBfWnNiqPhh52QDfUNOFduT1wccJPqmKyM0eld70O8Ahex4+CfjZ
pYT8UvLiiDEyLqRaqfX4wzoZjMtk1qce2dJsRnyXtU10LRyE/Od4ZeN3e//4
8wt61zx5qIA8aPKFgXOX2xHVgz+nbnalcd/UO5p+7vs45HHFLxuvMzTum7py
ziYdMRdSGOMlW8YehPHavRxXeb0X1mT/33FdAbnyKXOF5VftSMABfU5NM40H
DWytuZHlHKJQwR6UGkTjvhq2RPkFbRfC3z9SUfUojb9Gh3Eezld3JKPLRzVW
ytE4a9DSDN7DmS7kzSg/08KgLi7480/GWCdMVdMhpfKjNx1Q/IXcK+Km6Lbp
emTqF+NlBXUs9P/jpi/PWq9jQLyzLZ7uOUDjpuiDhQG/7czJVTnr9eJxND7K
6rcZModrTSwW2TpET6Bx0LVhAcHqJ23JsSr7+ncWNN4J38djaY9xILL7Djw4
KU7jmuw18iJLHJ1ISdnBY9OjafzCrz4ZMjjMlRmHaLwjM891QGyZC0nuPRSv
XEvjF+VUeVXWIw/ySK50Gev1N4xfXmW8uWQlrkuqeJ/3C9idyO9wVpeZndQj
12Wbe/MEvcg/7L+7t/gBmzxuWG7B47EwXpDf83vGtvVG5FRkcnN/ngzytzd/
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
Bzj7+tSi8lAO+X+bXeSn
     "], {{
       {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
         GrayLevel[1], 3], 
        StyleBox[GraphicsGroup3DBox[
          TagBox[{Polygon3DBox[CompressedData["
1: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
a+9WrNsJnNOY9gzHzcF2pW1rYPD+lR7YxPi9dS1wXLTuWpP3yx38/zPYN1ir
S191zftrDPyVrNHXg3/RWvHfLPCSbIeyx5Pl70rncOeC/4HDaX8y7hCOn9d6
Ks4rdyms/bTHXwFb0hdL79uzpB1L+74/onV7S34q0XdG6dyhgvysdCi8LVix
tB9ZFa2bN0ovlB6nMa2lCUtfbxtp2dL5Q01+9iqtmWqDu5f2iVcG+xPpu2uD
57w++DoH5GtNztfSNddGP8evrOFj9DVgzASwSunn0bNoPRqWXhOtQaO8Dv8q
Z4GvVlwCtyvtb//h+Gz4BsUBsG5p7aucR/f+arCeGq+9LCeSry1/rrXcN6/n
mvyuH856RvYqTZNK35/uTRNWymur/Pp25lvLfL/n9dd7mJptQLYwi/8PL30P
eifH5nN3Kv2O9VzVStuBnndd9DPpWS4tnd/1D85tVUd4AzyT/uPzf9uXtmPZ
sOLgW4XtrTn3NJTzLk7OfaT/pQ/rKzbQHtX98//R8KnBNYRJea9spm1b2pb+
yXagdfwpX1P3dUayf70QrFXatvSuWyTnZO3B1rSLStvYmfCbFO+l40rbnOxt
l9I2J3ublhxXaiXv3c15P8v//JV9wpLgHGEbxiwLzpW2hS8K1upbwb8Pzvu2
hofoXFJ67yh4p8I6qmGOZdJjdaNjkPTYeck56/XgntExSBq1Udb/0mb14ecW
1qvS9V209qXzX8WE66QPg+sPCf6ndF9hLbopOBeWRv0rOJ+Vdr0tuSayPbgS
rEt/ZXiZz+2ndxCteaSN5wXn3VvAvw3OjyvCvw72RRWk/ZLzqs7gucm51OXg
7tHxWnp1RHIuqtzk4Gg9Jk2reo20UB3p6+iYvgd8x2gNI838ZXTueXl0rqN7
7gG2Yb6b4XPgy/jvR703xeocF2WXO0frImnyO4PzSNmH4s5z4D/0t0zOWZpF
51/SfsqtBmZ9rpxIuVFbxQj5xegagnKEitE1NNlSrWjtIU1+UPR46eo60RpG
+vxv5jm4cE6xVXTNbTf4lvBjC+cgNWXH8PrwCtG1C+ULW0fX5XbXsyTX8nbR
OgePHy9fFTzPcHh3CQCOK4Hrg3VmVXjz6HztJHiLaN1+st5ddI52iuJXtK4+
En5itJZWbnJ8tB0qLxibXGtQXvlo8vtQnvhlcL7cSc8dnQucmJyD9oTPVTyh
/2r40cop6N9N+52+L6Lzcb3HhfTXg18B/xReDX4JfHZwDaoD/JPgGlFH+HnB
sX0B858WnXeslA1GX/cE5TvBWiXCP4JvC2/H/98F1zSu1Dzyt/CmjFkaXFu4
ir7Po3W+9P7i4NpFl2gfIp0hHaJc+W6Nke+KzrmOk9+m/zD4zfStCa499pC2
Ca5P3gCfGK05pT03Btdpb5HNB9dye8KPoXUunH/9mtenCnxtcD32Jv5fF1yb
2k57LjpXUo52ZHTuozxudXAN9kb6VmWb7C4/HFz/vFX7KbjWejV8BbwB/Fr4
8uDaS1ftregc/9jk/aN9dAz8TPhN8CbwLaLzoNvB/6RL4L3k+7N/uwN8N1oj
KteppHcA7w3+G1ybvQ1eLbre0gd8k3kbBPuK6tF1nn5a7+S6kp5r/+j622A9
d3I9UTZ2QHTdbAh4YHStbCjYN7kWrOuqhqu6reLufnnN742uoyqmKb53Sq6H
ys47JNe8ZJOXJNesZatXyf+Wtp8r5aNL21gX+ejS9nMFfGNpO1eNXvnMEPCZ
5Fqk3m/jvF/uAx9LrjnKhick1/Lknx9MrhsOZ8zTyfVQ+faJeX756jHJdcmR
jHkkuf44Gv5Qcj1xFLxedB3ybrCBngd+Dzg+uXamWFM7ug45AByXXNN8UH46
ulZ5l2w5ue75QLZt1Z5XJsf3yrTpHHdMrrtp/0rj1YC/CT6bXJ+VDT8TnWep
/nNjcv1RtnpTcu1P++g/2sys925IrhVqT/2UnFtqLytflk5XXUhzSuOrtqbc
Sq5SeWEvxjbh3GnB+ZTyX+XBym2l2fRtQvlR7cJ5c48cUxRbFI//H5fp7wb/
t3Re/2/Ws6oFdlUMKL13+iR/b5D9t0uuk8oXqU4+obC+vSX5u4X2/q3J30vk
E3olf0fRPr09+XuG9oj0/w7MM0OxMblOKp+wd3Ttd5DsiP7Npfd17+RvRdqb
PZO/r8hH3ZH8jUf79OXoHEI1w6fyudJCT2bblv6R7lJeq28I+u4zpXAO83Jw
bW5KsJZTnqpvKcrjlI89r+cJrqeqRittvxvnvxf87UN1aX0DUm3kPfh70TVb
1WCfDo4Xyof+TP528BX988Am0dpA9nxc9kUjs59RLWddsj9XzrohOS9Wrv6s
9l1wDiv+XbTGVy1Umk15uvL1vYPzV+XPqmspV1XO+lAer/OUpy+DTwqOTZvy
OijXmwmfGZ2nL4E/Eaxhfipc41We2Ibnfzc4BzwP/naw1qpT+LvKFRxXp/8d
2WBwbUHXkgbbo7Bukk6WPpwLP4J2HXwEeFdyTVI+c0D2paq19ofvE+xj70mu
N2ovD06uJQ6E351c51Ttd1Ty94lh8HuT65DyG/2S1+hO7bPs66SZH88+UBpy
dPI3Cd3PA8nfP+6H7xX97UPXGpRc55SfOTT6G4qudXj0dxP5upHJ30XkG1Vn
VNyXtjss+juL5lSeotq+vptJH87Ja6465IfZ30oHyh4XgqdG19bkG4cm143l
A+9L/u6oWDAkubasPXVKtGaQr5uU97hyh+HJ3yEUX+5P/q6guDMs+fuBYlPT
6DqD/OePyXUxabCZ+V1IGy9NruVJw6xJzqlUZ/ghuaYm/fZdcj1dsXj76G+j
Wv/nkr97SfstT67ZSft9n1xzlz7ZmPzNVXtncnI+IN24LLneJ/22Pvlbsvbg
6uR9q++Yi5Nr+or13ybX+qXrfk/+pis7fy1Zp0qvfp38zUDacnpyDU6a9o3k
Op308KLk+r60xPPJulY5y/8A0tTFbw==
             "]], 
            Polygon3DBox[CompressedData["
1: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
MnkOiE8/lZ4b9tcJwrvqOitZixI7/yytSVnTjeGy4LW+SdfDCQesbfhb93ue
8AHC84UrCLcglgi/KPydrocJl7rOSN4TJwvvmfcK7xyth+ZjLbBf2UtR15ns
Z7XVUn8L2fzoZ7yr9D38ljmbPQEnwU2d87t4nz2SORluhrPhltujuRnOhXuP
iNafJ6rvPdaq8GrhJ2XPRK8nPruf+vvn94O2rhustdBgaLE6avtEbdOCtc+7
xAj5Z2n8APkXBetN9BVaAE3wZnR+UU+fP1h2FrEmeL+ukY2XP1ptb5Recw01
dk10rDhIfdvU11x4oPDFwfF0CPtaeIqsQrDGgusPDNZeXaP5FQ2LloVTiWWs
AdbCR3m/zwjWXzzzxNJ7irkgRn0qv17w/HG/G9ifmWMOic5fj5H/bvKeItYT
89lrj8HT8EXhHJacj1jdODgXhIMHZf7cnDmeWEYM2ZLHkys2Cs4nj4zOV08K
zifRuGjdQ4XfSOYkYi8xEa76Ljo/fEttn6jvVdkkYp1scXJOTr7cUGOXJetQ
9Cj8Oi6v+Z75fbMXyEnbyD8lOFetn9fXscG5Ppx0X55fuArOG1Z6T8KFj0W/
r9dlj0bvUfIj8qWtmcOG5/XL/JOnkq9Ol/XIHMh8EVPhxpAcX0bK35z5G62K
Zn0czg3Wk3cU1pdoNrQN9Qm0HP1oz02FNedVauteOiadm6wZmMu9g7UEnEF+
Vz+vHzQhWviEYK2IxmZPoqk/DdbQXbJe/zJ4TbeV3ySv9dqlc2hy5/sL7/kX
CutluIAY2E7+qcGx8Ub2PDkD+yZzBvuRmA+XXCk/yCqW1n9oULTuycHaFI1L
7nF8sPZFs3fN+QNceKL8yqU10JzCGh2tjkb6PHjPsnfnB+s5NFKl0veLdiKH
IJcg5n4WXLvYQzaicA2jvvwqpWMmNRxiDLHmDPhM/m7Ja41n4tmI4dcG61di
+1b2vPCxRbG96HB5dP3ii8K1oveCtd9XsnU8a3Q+va5w/kGONzmYk+CmxdHa
8jU4LPPN2sJ7nr3/U7Lu3D6GtRNd12JNziWWRnPnR7JVaOvkOsCszKezo7U4
MXBOxuReL8mWBWsytBlz0UL+FdFrfRkmv4vsKe6V35C/PPrZ1jO/aJ3otfu9
bKP8Jfqut+S/jQm/EZ1nLMn8u0m/8XKwBkWLfsd6Da5P/BQ8p8ztO3k+Wkdz
O3NIbaJiciyGE+AG5o+xS/mM/Kui9863+X3BP+QW7EFyu8+juQWO+VL+14wp
POcVs/5g7mn7Jvc3LaxJwPA5sYLfQDuiudBe85nTzC8T5Ncoi+0vanL0s00u
nIuQ091ZOocg1xujtv6FNRt6ZXS0dkMTo3fQIANKx3S0yUvBe5a92p73Fq2d
ienE9m3oMfiPvCo65jwSfM/c+6horUWMIFbcFM19/bIeJqe5v3SORa6DPu0l
/1L5E9XXWPga4bOExwk/mPvRcGg5amroGDgCrvgZvaW+pqXrQR2j82by50nR
bfRRM9ia+2sWriG9IH9KdF5KfjodrovW96yxt6JzGHKZOrIt0ZwFF8AJf0XX
GOFwudvng/0Dr8AvD0e/M94dHD5L/o/oneA9syxrqgdLayi01mWyZ+SPko2L
jt/sPTTMB8I/aHzf4HyD2smrskWF9xD1uA/Vt1D+Kxj7Q/j5wpz7Yp6zfxSu
WTKX5DD98xjG/sIayRzzXtYg72T9jDYhh+Bd8E54d9QIl2Y9QO0QTUQtjpoY
WomYTGwmB26VXGOkfkCOgD68iHdUOAf6PrrmTK0aTUAtmpoatW7qEdTayEHJ
banpkZtS86X2i0ahVkzNkdojGoLaMzVd6tHUK6j1UsOgvkGOgH4hJ6c2j0Yg
VycnpPZHTZJckRrNrGCNwf4mBhOLVzA/0RoDrUGOUy2/nz7B7/D5aE1HzYj9
vybz7b3CxwmX0TnRyNI5AbnSz6wH9e8mvDw4B3+vdE5Pbv571jCsCdYGNflX
SmteavW/otGCa2Crif3JbfjkF9QkqU2+nqyn0MhPl67ho51fS34mnqV6jifU
DuGoi+RPiOZy4tvYzIfELtbcwmg+oi5FDkwujGacUVrjoiXReNQv0YhoPzQe
ZwdoPLTfW8LTypyDCL+J5iidg9QSflt4eumcqq7wy8LjS+egewovTa6XUo88
CO5Ork9eIHxwji/kEqsKx0/mm7yCthWZT6gt7662P+W3ku1amvO2Zcxe50zg
j5g1ZWmNiFYk3k8M5ni4npyPen2TwrnGQviydI5bJbrmALfCsdQiyPHfz/kT
uT81EGrX1KSpjRDPdtb3jxeemvkL/xHZjOgaDtwOx5M/XZL5iv09L1pPwO3z
ZAvk/yK7QuMryDbLf4V3nPODvaPXCGtlv2gt3oY5LKxJOFtZor6ppXPeGnm/
PxUcE4mNi5LzjbOF94n+rimlawB8ZxviQfB3tsn7DZ1KzN/AvQn3DNYMaIfW
wvcFx2xiN1xF7o3+oHYIhxEauwVz24RgbUFOQ/7VtnSusrJwvYb6DT77mX09
IFi7sH+oB7P2t2sLWdWsH9BSQ4O12tz8e2fqzyL51ZPz91Gl8/9qyXv7gdL1
DrRTFbio9NnKPsm5BDkBucHeydxATkFuAUegHdFocEfV5FyDHIRchPgCV2wo
rRVqJueicA7cc3vwu2bNkl+wp9nrDYL3+jnJ98N9oe3Qe7UL5wjkCjwDz9K4
cG3jZaxwDCOWdQ1ee2gq8lNqBg+VrulQS+CdcR7ZrvS7XBp9zsdUot8eyFz6
pWxEsB4k9yAH4ayJ/B2tSQ5L/EMbk1uRYw3Jc8rcMuc75fi9I2tJbZcla1T0
6635+boEayU0U1+NGVpa27GH2FcdZQsKx2x0157J2ogaBbWKysm1CmqE1E92
SK49UZOi/pKSa0XUpKhNsb7xaWspPya/L2pK1JaW5fU2MM/n7sn3hl4idyQG
kGvBUXAVZzSc1VD/4qyXGjq1dM6A0a/sj/al5/y8ZM4/QP7PpWMBc8LcoHfP
TtbEx+Vnh1s4E+JsiBoiZ8ucAfFslfJ+r53MtXAYXMY75d3CB82Tz7A7BHMM
+Qr1AXKX5fn9HpDMfXAMXFMreX3D4XD5P5K5BM6H+2skryU4FC49JDkWECOI
Ffslr000FFqqSnK9iZot9ai9kmsP5NTk1pWS9Sjri1z3n8mxhphCbKmfHFuI
IcSSBsmxhBhCLLlez/BqYc01SH6dZK6E4xbl2IoWgOPguv2TtR17gr1xqOzC
wjGR2Fg3mRupWVC7ODiZG+FUuPWw5NhJjCHWoDlYSxtLaxE0GrFsTNZud0fn
w5yZcHayQ7TW3l/9twsPiq5vcEbEWRE1vB6l1wi1vTuj82fOSDgruS9aj3NG
RP7/evT+G5L5b1gwHzbN/Ng/OtYyX9SnbouuV3GGzXnBHdH1Cc5UOFs5HM0r
/C999gHhe2SzS7ftq74+stMKn3H0y/xB7odGnyn/nuh6A/8TwP8G8IyTcrzh
2ckhlmW9Sm7ROzoWs544r7g3uv7A/xzwvwcjo+u71OioX/SLfv+sB+qDfaO/
m/dNLY38nTpZTWJAng9ixQTZYPnDos/WOIOjHjFYuH3h/7ngfy/g2N7BHAX3
DonWumhe6k33R9cK+Z8J6lEDousxnLFy1npXnj/OLDm7ZA4Xln5nh+d4XSnz
UZu8/7sHzx9cSc61tvQZAXp+RLQ2R6NTTyHGwi1wCtyyMjrejs7rjf1O3Y+Y
2ozfV3+Xwmcc1HOGRmttNDf1qOHRWhxNTn2Q+iq1gFT4fPmhvJ6p+XJ+OzBa
K6IZOfvmvJUzacafkaxx+smfHVw7/j9Sv7YM
             "]], 
            Polygon3DBox[CompressedData["
1:eJwt13v81+MZx/HvqXNUIhQddU5HFekklc5nKdlSals6LVNMJUXng6FElmJU
q1GYimydhqSGzDKsOWRziBVGasnzety/P96P+3q/ruv+fD+H+/StMXLigAm5
TCazhYrRn/KZzPPaWeCt1LuQySzDOoufy2YyN8hdxj9KvxVH57HUQ919WCfx
FnUj5Frzu2gIX6BzsJ38uWorq3sY64ZlsReoH38qPG3jr1B3rbrXgNfpA74S
nY09wF+h7qT4PKyKdhXWHcvFM9BW8Ux8MvVS8772X1RafELtOO0ZlMVm83fR
ZP5MymFz+Kau8bn4U+wO7bP8lfhJ12+GtcWe4p+Oe+Tf49+lkuLj2I3aQ/w/
qZT4e2ys9kP+AyojPomN1x7mP6Ky4v9jE7Tb/c7cuD9a7rdX8Q/nUzwO20zH
+Cpqq4sf06+3XHFsJd0v/jk+iroXUhyskbqK8T35h9QtxUaLR1I3dUewp8QH
1cyU+4Ivh+exuVgz7Ih4dy59sBIxduiuXBoTMTaa4OfHO+B36L8DmyeeRn3j
PWOHsMf439Fg7EVtcX2q4btpQdyvuu7aP+NjsA78r+JZxQ2wqvRLvrr+dbUb
+Kvl9qgrhn3N30RVsDflh+ElxSOwGfxWvqDuK34SVZY7gFfDLtKuw/pjpdVd
iNXE1mB9sZJYD7pLfDW+ia5RU5Vqideq6ydXSs1ZVIFqyNWP8RVjma9INcUN
4t1q61DjXBpTMbYW8OfFvKGLxI3k5sdc4M+hWuKG2DztENoac5Va6Puk/He0
KpPe0Us0NL4jHYv3Ft9I7g28HtZE+wx2HXaBflXjmam+XFO5hdrV/Jnyn2TT
nOiHLY/3IN4e31uuY9H8aIftxHbQMr4FdYhxE/NPXQt19aguNZZrKfcb7Zy4
lvxgdTkaTQ+o6R/PEPct15XfTK1j3mfTGvZcPj1zPHs7eibWNr6pa7bWd1tc
C2uIVcaqxdjDHqVZ/AVUA3uc76OuhLo6VJsulrtE7m5tcfpWzS00hX4RYyW+
BTWK51S3RPtJjFXXeUXNxlhH+Bz+WfShcnIbsT7Y1FyaHzFPDmqbY+21u2LN
wJqrq07VqIFcM7lF2gf5AeKXY/yqu4pvgrfCnsdGxXyPMRZjjxrKNZdbrF3B
DxTviTmirhs/J5/G2C758+M90ZdUKuY9Pa5uQ4w9+YqxLmEdsRPi8rFO0Muh
ojk4nP6t5noqju2NtS+YeDz2EP+3ot+J36vtuhfn0rhvR4PF72TTHIu51h67
JtZZbDbWE+uIDY11FpuL9S7aP4bFmo8dokdi7MUcwd7j56jrpW5MzJF4rkJa
u2MN7yS+Tvs+Pl9dXzWvhcT3xBil/mp+pl2G1VI3KJvWv9fVHcCWie+jAerO
onK5tMfEXrMpvnfMI+xOvon678QjsM/5kVQa2xdrMnYk1moqg+3H3sRWxD5I
f8CezqcxeTCT3uXx2GvoaKwZ2TSPthftH9Pi28X7xVpip3JpH8zk0liOMb2B
v03dGdgsvrH0t+K2eL/4Xth0rLOallhXbC92M9YGG0XfxLiNfQZ7S/4G7IsY
j1QW+yvWVd/rtYexxdhANaPpf7E+0NnY3+MbYodjL8OW8weK5m/VeMfYUtpa
SOeNneoepNrYCf5D2qBufS6NuY/4SfRDfNsY57HX8F30Hx57ML4IG4C1wfrE
72FTsU7YldhPYgzH2oz1wy7FeuXSOSXOKytjvaFu2L5YI9S1U9cKuwp7Nc4a
WFtsfOzB4jrYtdm0572EL4n5Tavl1vBv0dvilbG/0sC4Fo0Qf6zfErlBai7D
emNvYLdhV2CXY31j3GDT4gyDfYa9gF0Y94utx7LYp9n0nuN9H4o5Geti3AfW
A8tj7/D/oBKFNHfGaKfjlWKP4Fup+yHGez7tazsKaa+KPWtmrKnxzOq6qDuD
vyPmPbYC64yV5S/Rp0surZ2xhl6O3ZlPe+f2Qto3Y/+8mU7H+6Sa6j6Tnxx7
uvY2rA72pbinPpO0N9Ej2Fo1S+N7xhkg5hx2acy1QjpXrYgzMX4auyXmFzaN
r4cfzaU5XT6Xxl6Mwen8prjvWA/pdrlj2BbtpfxltFbfKbm0x8cat1v7lzj3
xPNQhVhP1LVXd1w8O5/29p2FtP/HOaC8uEzsQ3FNdV+LK2BlY13C2mDfxFki
n/bsPYW0Z8Te8Ta9K78aX0WD4twT40O/ttl0djga55JYs8T3Yx3Ufx/rTLzr
XLr/eI4n+ClUjJ+qri7237iHuJ52EzYMa8YvyKc98dVC2ktjT/01lcRuV9dA
3Vfi+fm0N+0tpL009tT9tE9+ibqFci/GnMmnc/PvC+nMHGfnmIM9c+msEWeO
g/zt6s6NecS3do3T4nX59P1nYBNjr+dn0IXie+PcEN+dX5RP55H9cV6LcUwL
8+kMsK+Qzixxdrk71glsY8xffZvyE/LpDL9e3cex7tC4fPrfsa6Qzv7xH+DG
fPqfsKaQ/iPEf4WJ2KlYS6mq6/0HuxUroZ2O1ceOiRfHuqN9AhuCNY41I+Y/
9iQ2NM7g/Nh8+t+xtpD+/8T/oHn5dH54pZDOBHE2uDf2TGxz7NX6tuI7y/80
7jXePdYfuyf2W+xZbDjWkt/GV8qm/xZ/zKSx/yPMurFs
             "]], 
            Polygon3DBox[{{898, 552, 673, 1109, 785, 786}}]},
           Annotation[#, "Charting`Private`Tag$12001#1"]& ]],
         Lighting->{{"Ambient", 
            RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
           "Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{0, 2, 2}]}, {"Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{2, 2, 2}]}, {"Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
       {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0+dLVWEcwPHHnaZZqZVtm3qzsmFmtsscTU1tF1SvC+ovaNqwQX9C/0Kv
mjYlDHwZ7WkkQpAFmSOvnwPB/fB9OM/zu/ecA7fg8PH6YwkhhBc8TwzBJ9zg
kIt1jGUFiylnOY8dqtWR/HN2hxYwlBTCGL1jf57G7e3UXFaxhNv2VmoFm8lk
0NyQs/XWM3jgTI4Wk0Aj47jr+lpdyl8za3Q1W8iKHoInzjToTPKYTxK7eGpv
gg6Y3aClrGcdW7lvf5Qm0sQsxrOAVntxcynWe5jIJpZRySP7G3Ub2SSzm34z
s/Wh/XxdSBr7mEwNZVRTxfbonZoZrak8M7dX5zCJEkawnyncs1+khfSZO6hz
WUQ6B6L7TQ6hzbmp1jFuelXBtWnW08mInsWl7Oh3abQu1qNaoSe1W3/oAKf5
Qw/9vDJ/Rn/x2vqsvtFz+lbP6ztt1vd6QT/oRy5af9JL+lkv6xdt0a96RTv1
qn7Ta3rLs/zUQa7Ty2+a3OMprdYTWq5HNKZFNFhnaaXGfUdZdM8a0y79Hr0j
65eaqx2aqe2aGtVs+///yTDk4VqE
         "]]}, 
       {GrayLevel[0.2], 
        Line3DBox[{712, 971, 972, 941, 940, 1261, 711, 955, 956, 1007, 1022}],
         Line3DBox[{714, 863, 1119, 713, 862, 1118, 1105, 975, 861, 1117, 
         1101, 957, 860, 989, 1116, 1097, 925, 859, 952, 1265, 944, 1016}], 
        Line3DBox[{718, 867, 1123, 717, 866, 1122, 716, 865, 1121, 715, 864, 
         1120, 1106, 976, 1262, 1026, 943, 958, 1256, 1025, 990, 924, 928, 
         1104, 1257, 1019}], 
        Line3DBox[{726, 869, 1125, 725, 868, 1124, 724, 1188, 1029, 723, 1187,
          1028, 722, 1186, 1027, 721, 1270, 978, 991, 977, 992, 720, 1271, 
         979, 946, 947, 945, 719, 1266, 959, 927, 1008, 926, 1009, 1260, 
         1023}], Line3DBox[{743, 879, 1135, 741, 1194, 1036, 739, 1193, 1035, 
         737, 1192, 1034, 735, 1191, 1033, 733, 1190, 1032, 731, 1189, 1031, 
         729, 1272, 980, 993, 995, 994, 1275, 728, 982, 983, 948, 1263, 1102, 
         727, 961, 962, 1018}], 
        Line3DBox[{754, 889, 1146, 753, 888, 1145, 752, 887, 1144, 751, 886, 
         1143, 750, 885, 1142, 749, 1197, 1039, 748, 1196, 1038, 747, 1195, 
         1037, 1141, 746, 884, 1140, 745, 883, 1139, 1108, 984, 882, 1138, 
         949, 963, 881, 1137, 929, 931, 938, 1258, 1099, 935, 1017}], 
        Line3DBox[{767, 894, 1152, 766, 893, 1151, 765, 892, 1150, 764, 1204, 
         1046, 763, 1203, 1045, 762, 1202, 1044, 761, 1201, 1043, 760, 1200, 
         1042, 1149, 759, 891, 1148, 758, 890, 1147, 757, 1199, 1041, 756, 
         1198, 1040, 755, 1259, 933, 936, 932, 939, 1006, 1015, 1113}], 
        Line3DBox[{781, 897, 1156, 780, 896, 1155, 779, 1213, 1055, 778, 1212,
          1054, 777, 1211, 1053, 776, 1210, 1052, 775, 1209, 1051, 774, 1208, 
         1050, 1154, 773, 895, 1153, 772, 1207, 1049, 771, 1206, 1048, 770, 
         1205, 1047, 769, 1267, 965, 973, 964, 974, 768, 1268, 966, 934, 937, 
         1024}], Line3DBox[{784, 968, 1056, 1269, 986, 985, 1157, 898, 786, 
         1158, 899, 788, 1159, 900, 790, 1160, 901, 792, 1161, 902, 794, 1162,
          1062, 1221, 796, 1064, 1223, 798, 1163, 903, 800, 1164, 904, 802, 
         1165, 905, 804, 1166, 906, 806, 1167, 907, 808, 1168, 908, 810}], 
        Line3DBox[{809, 1229, 1070, 807, 1228, 1069, 805, 1227, 1068, 803, 
         1226, 1067, 801, 1225, 1066, 799, 1224, 1065, 797, 1222, 1063, 795, 
         1220, 1219, 1061, 793, 1218, 1060, 791, 1217, 1059, 789, 1216, 1058, 
         787, 1215, 1057, 785, 1109, 1214, 997, 999, 998, 782, 1110, 1274, 
         987, 969, 967, 783}], 
        Line3DBox[{812, 1071, 1230, 811, 1072, 1231, 813, 1169, 909, 814, 
         1170, 910, 815, 1171, 911, 816, 1172, 912, 817, 1173, 1073, 1232, 
         818, 1074, 1233, 819, 1075, 1234, 820, 1174, 913, 821, 1175, 914, 
         822, 1176, 915, 823, 1177, 916, 824, 1178, 917, 825}], 
        Line3DBox[{827, 1076, 1235, 826, 1077, 1236, 828, 1078, 1237, 829, 
         1079, 1238, 830, 1179, 918, 831, 1180, 919, 832, 1181, 1080, 1239, 
         833, 1081, 1240, 834, 1082, 1241, 835, 1083, 1242, 836, 1084, 1243, 
         837, 1182, 920, 838, 1183, 921, 839, 1184, 922, 840}], 
        Line3DBox[{854, 1005, 1004, 1276, 853, 1255, 1095, 852, 1254, 1094, 
         851, 1253, 1093, 850, 1252, 1092, 849, 1251, 1091, 848, 1250, 1090, 
         847, 1249, 1089, 1185, 846, 1248, 1088, 845, 1247, 1087, 844, 1246, 
         1086, 843, 1245, 1085, 842, 1111, 1244, 1003, 841, 1277, 1001, 1000, 
         1002}], Line3DBox[{970, 858, 1115, 1100, 954, 857, 988, 1114, 1096, 
         923, 856, 951, 942, 1112, 1264, 1010, 1013, 855, 1020}], 
        Line3DBox[{1021, 1014, 1011, 1012, 950, 953, 870, 930, 1098, 1126, 
         996, 871, 960, 1103, 1127, 872, 981, 1107, 1128, 1030, 1273, 730, 
         1129, 873, 732, 1130, 874, 734, 1131, 875, 736, 1132, 876, 738, 1133,
          877, 740, 1134, 878, 742, 1136, 880, 744}]}, 
       {GrayLevel[0.2], 
        Line3DBox[{472, 596, 693, 692, 1277, 687, 457, 581, 1235, 442, 566, 
         1230, 427, 551, 1269, 674, 676, 675, 1274, 412, 536, 655, 652, 654, 
         1268, 653, 397, 521, 627, 624, 710}], 
        Line3DBox[{473, 597, 688, 1244, 458, 582, 1236, 443, 567, 1231, 428, 
         1157, 552, 673, 1214, 413, 537, 1267, 651, 398, 522, 1259, 623, 383, 
         626, 625, 1258, 700}], 
        Line3DBox[{474, 598, 1245, 459, 583, 1237, 444, 1169, 568, 429, 1158, 
         553, 1215, 414, 538, 1205, 399, 523, 1198, 384, 1137, 510, 649, 621, 
         650, 709}], 
        Line3DBox[{475, 599, 1246, 460, 584, 1238, 445, 1170, 569, 430, 1159, 
         554, 1216, 415, 539, 1206, 400, 524, 1199, 385, 1138, 176, 177, 950, 
         311}], Line3DBox[{476, 600, 1247, 461, 1179, 585, 446, 1171, 570, 
         431, 1160, 555, 1217, 416, 540, 1207, 401, 1147, 525, 386, 1139, 671,
          672, 670, 686, 685, 1126, 619, 622, 618, 704}], 
        Line3DBox[{477, 601, 1248, 462, 1180, 586, 447, 1172, 571, 432, 1161, 
         556, 1218, 417, 1153, 541, 402, 1148, 526, 387, 1140, 511, 373, 1127,
          636, 648, 635, 1263, 637, 705}], 
        Line3DBox[{479, 603, 1249, 464, 588, 1239, 449, 573, 1232, 434, 558, 
         1221, 1220, 419, 543, 1208, 404, 528, 1200, 389, 513, 1195, 375, 502,
          1273, 1272, 667, 365, 494, 645, 647, 1266, 646, 357, 487, 701}], 
        Line3DBox[{480, 604, 1250, 465, 589, 1240, 450, 574, 1233, 435, 559, 
         1223, 1222, 420, 544, 1209, 405, 529, 1201, 390, 514, 1196, 376, 
         1129, 503, 1189, 366, 495, 664, 666, 1271, 665, 358, 488, 640, 1257, 
         617, 708}], 
        Line3DBox[{481, 605, 1251, 466, 590, 1241, 451, 575, 1234, 436, 1163, 
         560, 1224, 421, 545, 1210, 406, 530, 1202, 391, 515, 1197, 377, 1130,
          504, 1190, 367, 496, 1270, 663, 359, 489, 1256, 643, 614, 644, 
         707}], Line3DBox[{482, 606, 1252, 467, 591, 1242, 452, 1174, 576, 
         437, 1164, 561, 1225, 422, 546, 1211, 407, 531, 1203, 392, 1142, 516,
          378, 1131, 505, 1191, 368, 497, 1186, 360, 490, 1262, 660, 634, 662,
          353, 639, 1265, 638, 699}], 
        Line3DBox[{483, 607, 1253, 468, 592, 1243, 453, 1175, 577, 438, 1165, 
         562, 1226, 423, 547, 1212, 408, 532, 1204, 393, 1143, 517, 379, 1132,
          506, 1192, 369, 498, 1187, 361, 1120, 659, 661, 658, 681, 680, 1116,
          612, 615, 611, 702}], 
        Line3DBox[{484, 608, 1254, 469, 1182, 593, 454, 1176, 578, 439, 1166, 
         563, 1227, 424, 548, 1213, 409, 1150, 533, 394, 1144, 518, 380, 1133,
          507, 1193, 370, 499, 1188, 362, 1121, 491, 354, 1117, 632, 642, 631,
          633, 1264, 696, 697}], 
        Line3DBox[{485, 609, 1255, 470, 1183, 594, 455, 1177, 579, 440, 1167, 
         564, 1228, 425, 1155, 549, 410, 1151, 534, 395, 1145, 519, 381, 1134,
          508, 1194, 371, 1124, 500, 363, 1122, 492, 355, 1118, 656, 657, 679,
          678, 677, 1114, 610, 613, 698}], 
        Line3DBox[{691, 690, 1276, 689, 471, 1184, 595, 456, 1178, 580, 441, 
         1168, 565, 1229, 426, 1156, 550, 411, 1152, 535, 396, 1146, 520, 382,
          1136, 1135, 509, 372, 1125, 501, 364, 1123, 493, 356, 1119, 486, 
         352, 1115, 629, 641, 1261, 628, 630, 695, 706}], 
        Line3DBox[{478, 1185, 602, 463, 1181, 587, 448, 1173, 572, 433, 1162, 
         557, 1219, 418, 1154, 542, 403, 1149, 527, 388, 1141, 512, 374, 1128,
          668, 669, 684, 1275, 683, 682, 616, 620, 694, 1260, 703}]}, {}, {}}},
     VertexNormals->CompressedData["
1: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
      "]], {}}, {{
     {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
       NCache[
        Rational[7, 360], 0.019444444444444445`]], 
      Point3DBox[{{1.2, 2.4, 7.2}}]}, {}, {}}, {}}, 
   {GrayLevel[0.5], Opacity[0.5], 
    TagBox[
     ConicHullRegion3DBox[
      NCache[{{1, 2, 0.1818733951621616}, {
        2, Rational[1, 2], 0.7533856915529165}, {
        3, -1, 0.06186811783597124}}, {{1, 2, 0.1818733951621616}, {
        2, 0.5, 0.7533856915529165}, {3, -1, 0.06186811783597124}}]],
     "InfinitePlane"]}, 
   {GrayLevel[0.5], Opacity[0.5], 
    TagBox[
     ConicHullRegion3DBox[
      NCache[{{1, Rational[5, 2], 0.8052593835206321}, {
        2, 2, 0.4979896593890525}, {
        3, Rational[3, 2], 0.08374418332657774}}, {{
        1, 2.5, 0.8052593835206321}, {2, 2, 0.4979896593890525}, {
        3, 1.5, 0.08374418332657774}}]],
     "InfinitePlane"]}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{312.7438118282574, 286.88209175227905`},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{0, 5}, {0, 5}, {7.203487975691672, 49.999992857143106`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{2.1995401599034867`, 0.579536881401961, 2.5052265542394823`},
  ViewVertical->{-0.715928523402675, -0.18863351136889567`, 
   0.6722081134344529}]], "Output",
 CellChangeTimes->{{3.822994421216352*^9, 3.822994466611071*^9}, 
   3.822994576676423*^9, {3.822995152548791*^9, 3.822995188203924*^9}},
 CellLabel->"Out[75]=",ExpressionUUID->"ee002e94-dcdd-44ba-a64d-c3321f85b8b7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Linear Support Vector Machine", "Section",
 CellChangeTimes->{{3.822981114493249*^9, 
  3.8229811230414*^9}},ExpressionUUID->"3b64852d-85ac-42fc-81d6-a533fd895d6a"],

Cell[TextData[{
 "Let\[CloseCurlyQuote]s now produce a support vector machine for the example \
from the video lectures. First, we need to define the samples, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "f288ea17-79ce-4336-9348-f91588a93c17"],
 ". These are points in a 2D vector space which are labelled as either \
\[OpenCurlyDoubleQuote]Plus\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]Minus\[CloseCurlyDoubleQuote]."
}], "Text",
 CellChangeTimes->{{3.822992977829295*^9, 3.822992978514311*^9}, {
  3.8229945867032957`*^9, 
  3.822994651725788*^9}},ExpressionUUID->"05d2161c-cfdb-419e-8627-\
028b75f6b563"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Plus\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1.284422952732416`", ",", "2.481901856407326`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.4879960382523703`", ",", "2.402086883623099`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"4.193340935618989`", ",", "2.0674820899685353`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.07511361074236`", ",", "2.8655605261563037`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"4.5621522276001985`", ",", "2.3036590135818598`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0.0734941576442104`", ",", "2.7567100412409644`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"2.0267587486366514`", ",", "1.8146817202743937`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.7160467347301873`", ",", "2.2314527869285374`"}], "}"}]}],
        "}"}]}], ",", 
     RowBox[{"\"\<Minus\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0.3650725217541822`", ",", "1.4540111456859945`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.8799169703454597`", ",", "1.3235540770631689`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0.2775167301897557`", ",", "0.026781782266628973`"}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"1.7185797382262036`", ",", "0.8439744313421516`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.0440125841941863`", ",", "0.8714161830961258`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"4.009012707820185`", ",", "0.4883132746354524`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0.0444111436444237`", ",", "1.0249991478151106`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.4175016236764821`", ",", "0.3949618274790252`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0.40287782851680287`", ",", "0.35796696425588426`"}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"1.3129335119181957`", ",", "0.193320544474747`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.6678854129083547`", ",", "0.5245058562945744`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"3.62477502445507`", ",", "0.2321920742831569`"}], "}"}]}], 
       "}"}]}]}], "|>"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.82297614437396*^9, 3.822976192253549*^9}, {
  3.82297643933304*^9, 3.8229764440907087`*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"1baf39a4-fe3b-48a8-8f4b-14e1da2c8efc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"data", ",", 
   RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822976418959372*^9, 3.822976467491787*^9}, {
  3.8229777597299623`*^9, 3.822977836251227*^9}, {3.8229796327265263`*^9, 
  3.822979638236968*^9}, {3.822994660347761*^9, 3.822994673036398*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"277a89e2-d112-4ae2-ab84-e40a68fffb47"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        GeometricTransformationBox[
         InsetBox[
          BoxData[
           FormBox[
            StyleBox[
             GraphicsBox[{{
                GrayLevel[1], 
                DiskBox[{0, 0}, 
                 Offset[{3, 3}]]}, 
               AbsoluteThickness[1.5], 
               Dashing[{}], 
               CircleBox[{0, 0}, 
                Offset[{3, 3}]]}], 
             GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                 PointSize[0.012833333333333334`], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6]]}, StripOnInput -> False], 
            TraditionalForm]], {0., 0.}, Automatic, 
          Scaled[9.75]], {{{1.284422952732416, 2.481901856407326}}, {{
         1.4879960382523703`, 2.402086883623099}}, {{4.193340935618989, 
         2.0674820899685353`}}, {{1.07511361074236, 2.8655605261563037`}}, {{
         4.5621522276001985`, 2.3036590135818598`}}, {{0.0734941576442104, 
         2.7567100412409644`}}, {{2.0267587486366514`, 
         1.8146817202743937`}}, {{1.7160467347301873`, 
         2.2314527869285374`}}}]}, {
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        GeometricTransformationBox[
         InsetBox[
          BoxData[
           FormBox[
            StyleBox[
             GraphicsBox[{{
                GrayLevel[1], 
                PolygonBox[
                 NCache[{
                   Offset[{0, 4}], 
                   Offset[{(-2) 3^Rational[1, 2], -2}], 
                   Offset[{2 3^Rational[1, 2], -2}]}, {
                   Offset[{0, 4}], 
                   Offset[{-3.4641016151377544`, -2}], 
                   Offset[{3.4641016151377544`, -2}]}]]}, 
               AbsoluteThickness[1.5], 
               Dashing[{}], 
               JoinedCurveBox[
                NCache[
                 Line[{
                   Offset[{0, 4}], 
                   Offset[{(-2) 3^Rational[1, 2], -2}], 
                   Offset[{2 3^Rational[1, 2], -2}], 
                   Offset[{0, 4}]}], 
                 Line[{
                   Offset[{0, 4}], 
                   Offset[{-3.4641016151377544`, -2}], 
                   Offset[{3.4641016151377544`, -2}], 
                   Offset[{0, 4}]}]], CurveClosed -> True]}], 
             GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                 PointSize[0.012833333333333334`], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[1.6]]}, StripOnInput -> False], 
            TraditionalForm]], {0., 0.}, Automatic, 
          Scaled[9.75]], {{{0.3650725217541822, 1.4540111456859945`}}, {{
         1.8799169703454597`, 1.3235540770631689`}}, {{0.2775167301897557, 
         0.026781782266628973`}}, {{1.7185797382262036`, 
         0.8439744313421516}}, {{1.0440125841941863`, 0.8714161830961258}}, {{
         4.009012707820185, 0.4883132746354524}}, {{0.0444111436444237, 
         1.0249991478151106`}}, {{1.4175016236764821`, 
         0.3949618274790252}}, {{0.40287782851680287`, 
         0.35796696425588426`}}, {{1.3129335119181957`, 
         0.193320544474747}}, {{1.6678854129083547`, 0.5245058562945744}}, {{
         3.62477502445507, 0.2321920742831569}}}]}}}, {{}, {{}, {}}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
       GrayLevel[0.4, 0.5], 
       AbsoluteThickness[1], 
       AbsoluteDashing[{1, 2}]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 4.5621522276001985`}, {0, 2.8655605261563037`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.08090169943749476]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{{
                    GrayLevel[1], 
                    DiskBox[{0, 0}, 
                    Offset[{3, 3}]]}, 
                    AbsoluteThickness[1.5], 
                    Dashing[{}], 
                    CircleBox[{0, 0}, 
                    Offset[{3, 3}]]}, {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 9.75}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.09205128205128206] -> 
                    Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{{
                    GrayLevel[1], 
                    PolygonBox[
                    NCache[{
                    Offset[{0, 4}], 
                    Offset[{(-2) 3^Rational[1, 2], -2}], 
                    Offset[{2 3^Rational[1, 2], -2}]}, {
                    Offset[{0, 4}], 
                    Offset[{-3.4641016151377544`, -2}], 
                    Offset[{3.4641016151377544`, -2}]}]]}, 
                    AbsoluteThickness[1.5], 
                    Dashing[{}], 
                    JoinedCurveBox[
                    NCache[
                    Line[{
                    Offset[{0, 4}], 
                    Offset[{(-2) 3^Rational[1, 2], -2}], 
                    Offset[{2 3^Rational[1, 2], -2}], 
                    Offset[{0, 4}]}], 
                    Line[{
                    Offset[{0, 4}], 
                    Offset[{-3.4641016151377544`, -2}], 
                    Offset[{3.4641016151377544`, -2}], 
                    Offset[{0, 4}]}]], CurveClosed -> True]}, {
                    DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 9.75}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.09205128205128206] -> 
                    Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{
                    GraphicsBox[{{
                    GrayLevel[1], 
                    DiskBox[{0, 0}, 
                    Offset[{3, 3}]]}, 
                    AbsoluteThickness[1.5], 
                    Dashing[{}], 
                    CircleBox[{0, 0}, 
                    Offset[{3, 3}]]}], ",", "9.75`"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{
                    GraphicsBox[{{
                    GrayLevel[1], 
                    PolygonBox[
                    NCache[{
                    Offset[{0, 4}], 
                    Offset[{(-2) 3^Rational[1, 2], -2}], 
                    Offset[{2 3^Rational[1, 2], -2}]}, {
                    Offset[{0, 4}], 
                    Offset[{-3.4641016151377544`, -2}], 
                    Offset[{3.4641016151377544`, -2}]}]]}, 
                    AbsoluteThickness[1.5], 
                    Dashing[{}], 
                    JoinedCurveBox[
                    NCache[
                    Line[{
                    Offset[{0, 4}], 
                    Offset[{(-2) 3^Rational[1, 2], -2}], 
                    Offset[{2 3^Rational[1, 2], -2}], 
                    Offset[{0, 4}]}], 
                    Line[{
                    Offset[{0, 4}], 
                    Offset[{-3.4641016151377544`, -2}], 
                    Offset[{3.4641016151377544`, -2}], 
                    Offset[{0, 4}]}]], CurveClosed -> True]}], ",", "9.75`"}],
                    "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8229946733388977`*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"d5a7845c-1a02-4756-aead-fc973e394bac"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving the primal problem", "Subsection",
 CellChangeTimes->{{3.822994686625305*^9, 
  3.822994691530304*^9}},ExpressionUUID->"a0d87674-85da-448f-9f75-\
c4c4fc2b0335"],

Cell["\<\
We can directly solve the primal problem. To do so we need to set up the \
constraints imposed by the samples.\
\>", "Text",
 CellChangeTimes->{{3.8227591223385363`*^9, 3.822759128684408*^9}, {
  3.822994742076789*^9, 
  3.822994758658195*^9}},ExpressionUUID->"572c21a5-143a-4be7-99b8-\
0e67f833dbbf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plusConstraints", "=", 
  RowBox[{"Apply", "[", 
   RowBox[{"And", ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w1", ",", "w2"}], "}"}], ".", "x"}], "+", "b"}], 
       "\[GreaterEqual]", "1"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"data", "[", "\"\<Plus\>\"", "]"}]}], "}"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.822994761540525*^9, 3.822994792431278*^9}, {
  3.822995255804714*^9, 3.822995259446677*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"39fd0026-dc2c-4255-974a-da8c80cda168"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.284422952732416`", " ", "w1"}], "+", 
    RowBox[{"2.481901856407326`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.4879960382523703`", " ", "w1"}], "+", 
    RowBox[{"2.402086883623099`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"4.193340935618989`", " ", "w1"}], "+", 
    RowBox[{"2.0674820899685353`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.07511361074236`", " ", "w1"}], "+", 
    RowBox[{"2.8655605261563037`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"4.5621522276001985`", " ", "w1"}], "+", 
    RowBox[{"2.3036590135818598`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.0734941576442104`", " ", "w1"}], "+", 
    RowBox[{"2.7567100412409644`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"2.0267587486366514`", " ", "w1"}], "+", 
    RowBox[{"1.8146817202743937`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.7160467347301873`", " ", "w1"}], "+", 
    RowBox[{"2.2314527869285374`", " ", "w2"}]}], "\[GreaterEqual]", 
   "1"}]}]], "Output",
 CellChangeTimes->{{3.822994784404315*^9, 3.8229947946912613`*^9}, 
   3.822994864326748*^9, 3.82299526003489*^9, 3.822995349321301*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"799aeeae-cbe2-4a36-bd9b-0e56c1c652cd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"minusConstraints", "=", 
  RowBox[{"Apply", "[", 
   RowBox[{"And", ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w1", ",", "w2"}], "}"}], ".", "x"}], "+", "b"}], 
       "\[LessEqual]", 
       RowBox[{"-", "1"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"data", "[", "\"\<Minus\>\"", "]"}]}], "}"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.822994761540525*^9, 3.822994792431278*^9}, {
  3.822995255804714*^9, 3.822995259446677*^9}, {3.822995365770524*^9, 
  3.8229953770762463`*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"432928fe-3fa0-4198-ac8b-6ca392c4d578"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.3650725217541822`", " ", "w1"}], "+", 
    RowBox[{"1.4540111456859945`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.8799169703454597`", " ", "w1"}], "+", 
    RowBox[{"1.3235540770631689`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.2775167301897557`", " ", "w1"}], "+", 
    RowBox[{"0.026781782266628973`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.7185797382262036`", " ", "w1"}], "+", 
    RowBox[{"0.8439744313421516`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.0440125841941863`", " ", "w1"}], "+", 
    RowBox[{"0.8714161830961258`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"4.009012707820185`", " ", "w1"}], "+", 
    RowBox[{"0.4883132746354524`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.0444111436444237`", " ", "w1"}], "+", 
    RowBox[{"1.0249991478151106`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.4175016236764821`", " ", "w1"}], "+", 
    RowBox[{"0.3949618274790252`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.40287782851680287`", " ", "w1"}], "+", 
    RowBox[{"0.35796696425588426`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.3129335119181957`", " ", "w1"}], "+", 
    RowBox[{"0.193320544474747`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.6678854129083547`", " ", "w1"}], "+", 
    RowBox[{"0.5245058562945744`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"3.62477502445507`", " ", "w1"}], "+", 
    RowBox[{"0.2321920742831569`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}]}]], "Output",
 CellChangeTimes->{3.822995377543085*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"040d51ea-eff7-46d8-98e8-ba372e25b932"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"allConstraints", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"plusConstraints", ",", "minusConstraints"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.822995390452153*^9, 3.822995397945125*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"852d9e73-3faf-477b-a09e-a7d3c85fe505"],

Cell["\<\
Now we can use NMinimise to find the  solution to the constrained \
optimisation problem.\
\>", "Text",
 CellChangeTimes->{{3.822995475106427*^9, 
  3.8229955228847837`*^9}},ExpressionUUID->"b2879cb0-22d2-4c9a-b278-\
59ac4e9c8e3c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"norm2", ",", "sol"}], "}"}], "=", 
  RowBox[{"NMinimize", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["w1", "2"], "+", 
         SuperscriptBox["w2", "2"]}], ")"}]}], ",", "allConstraints"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{"w1", ",", "w2", ",", "b"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822735010443797*^9, 3.8227350561320887`*^9}, {
   3.8227351043052263`*^9, 3.8227351522298307`*^9}, {3.822735235406324*^9, 
   3.822735236880089*^9}, 3.8227355493468103`*^9, {3.8227357509265223`*^9, 
   3.822735762413685*^9}, {3.822976593321376*^9, 3.8229765964364357`*^9}, {
   3.8229771370740623`*^9, 3.82297714012108*^9}, {3.8229780038540792`*^9, 
   3.822978006237088*^9}, {3.822995534406416*^9, 3.822995534685252*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"3ffe4408-3fcf-46b1-a0e4-f6ba35e55493"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.611251674354541`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"w1", "\[Rule]", "1.1176497303899737`"}], ",", 
     RowBox[{"w2", "\[Rule]", "3.738096096794236`"}], ",", 
     RowBox[{"b", "\[Rule]", 
      RowBox[{"-", "8.048661024444451`"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.822977135560917*^9, 3.8229771455618153`*^9}, 
   3.822978006864455*^9, 3.822995468442781*^9, 3.822995536962989*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"49910a0e-6607-491c-8961-e6df05d0ec24"]
}, Open  ]],

Cell["This means that our decision function is", "Text",
 CellChangeTimes->{{3.8229793983076553`*^9, 3.822979403507124*^9}, {
  3.82299555567955*^9, 
  3.8229955584655323`*^9}},ExpressionUUID->"bd7948a8-251a-46fc-afb2-\
461b6156a944"],

Cell[BoxData[
 RowBox[{
  RowBox[{"decision", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1.1176497303899737`", ",", "3.738096096794236`"}], "}"}], ".", 
    "x"}], "+", 
   RowBox[{"(", 
    RowBox[{"-", "8.048661024444451`"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.8229794041613398`*^9, 3.822979438686438*^9}, 
   3.822979499133369*^9},
 CellLabel->"In[91]:=",ExpressionUUID->"1b6558b4-baa7-4c9c-af88-3005bc0e9790"],

Cell["Then, our decision line is", "Text",
 CellChangeTimes->{{3.822979465258322*^9, 3.8229794691165257`*^9}, {
  3.822979519821231*^9, 
  3.8229795380222807`*^9}},ExpressionUUID->"8f936eb6-5958-47e8-975c-\
20e978b0b6cb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"decision", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "]"}], "\[Equal]", "0"}], ",", "y"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.822979471300815*^9, 3.8229794758674307`*^9}, {
  3.8229795142876997`*^9, 3.8229795147128067`*^9}, {3.822979557451696*^9, 
  3.822979559668478*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"0fe7274e-1835-4318-9915-b216629a75eb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"0.2675158621142974`", " ", 
     RowBox[{"(", 
      RowBox[{"8.048661024444451`", "\[VeryThinSpace]", "-", 
       RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.822979481302553*^9, 3.82297952265847*^9}, 
   3.822979559960929*^9, 3.822995582939144*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"497ba005-2166-491f-8f05-d5a7bfd14219"]
}, Open  ]],

Cell["and our margins are", "Text",
 CellChangeTimes->{{3.822979540778611*^9, 
  3.822979543062613*^9}},ExpressionUUID->"4c0682ec-235b-4b88-9fdc-\
5ef34b86fb08"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"decision", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "]"}], "\[Equal]", "1"}], ",", "y"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.822979471300815*^9, 3.8229794758674307`*^9}, {
  3.8229795142876997`*^9, 3.8229795147128067`*^9}, {3.8229795513354807`*^9, 
  3.822979569387856*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"3b9a41f0-56aa-460f-8b39-e5cf723e3e1e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"0.2675158621142974`", " ", 
     RowBox[{"(", 
      RowBox[{"9.048661024444451`", "\[VeryThinSpace]", "-", 
       RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8229795529660053`*^9, 3.8229795696833887`*^9}, 
   3.822995585181288*^9},
 CellLabel->"Out[93]=",ExpressionUUID->"218eae2d-97c0-41f3-9cc7-7d6a92cf1a19"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"decision", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "]"}], "\[Equal]", 
    RowBox[{"-", "1"}]}], ",", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.822979471300815*^9, 3.8229794758674307`*^9}, {
  3.8229795142876997`*^9, 3.8229795147128067`*^9}, {3.8229795513354807`*^9, 
  3.822979572537774*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"ff7fb8ed-4ba4-499e-99e9-689a79e4a5ab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"0.2675158621142974`", " ", 
     RowBox[{"(", 
      RowBox[{"7.048661024444451`", "\[VeryThinSpace]", "-", 
       RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8229795551015987`*^9, 3.822979572819886*^9}, 
   3.8229955862314997`*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"d497db61-fe5b-442d-8fae-9ac9f4410b16"]
}, Open  ]],

Cell["Let\[CloseCurlyQuote]s now plot our decision line, margins and data \
points", "Text",
 CellChangeTimes->{{3.822995736250307*^9, 
  3.822995749390864*^9}},ExpressionUUID->"71aa4012-4450-45c2-aab6-\
28babcd20107"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", "data", "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"0.2675158621142974`", " ", 
        RowBox[{"(", 
         RowBox[{"9.048661024444451`", "\[VeryThinSpace]", "-", 
          RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}], ",", 
       RowBox[{"0.2675158621142974`", " ", 
        RowBox[{"(", 
         RowBox[{"7.048661024444451`", "\[VeryThinSpace]", "-", 
          RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}], ",", 
       RowBox[{"0.2675158621142974`", " ", 
        RowBox[{"(", 
         RowBox[{"8.048661024444451`", "\[VeryThinSpace]", "-", 
          RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}]}], "}"}], ",", 
     
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822979645572371*^9, 3.8229796814266853`*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"370bfd30-4d39-437c-ba60-8fe86945b48a"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{1.284422952732416, 2.481901856407326}, {
          1.4879960382523703`, 2.402086883623099}, {4.193340935618989, 
          2.0674820899685353`}, {1.07511361074236, 2.8655605261563037`}, {
          4.5621522276001985`, 2.3036590135818598`}, {0.0734941576442104, 
          2.7567100412409644`}, {2.0267587486366514`, 1.8146817202743937`}, {
          1.7160467347301873`, 2.2314527869285374`}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{0.3650725217541822, 1.4540111456859945`}, {
          1.8799169703454597`, 1.3235540770631689`}, {0.2775167301897557, 
          0.026781782266628973`}, {1.7185797382262036`, 0.8439744313421516}, {
          1.0440125841941863`, 0.8714161830961258}, {4.009012707820185, 
          0.4883132746354524}, {0.0444111436444237, 1.0249991478151106`}, {
          1.4175016236764821`, 0.3949618274790252}, {0.40287782851680287`, 
          0.35796696425588426`}, {1.3129335119181957`, 0.193320544474747}, {
          1.6678854129083547`, 0.5245058562945744}, {3.62477502445507, 
          0.2321920742831569}}]}}}, {{}, {{}, {}}}}, {{{{}, {}, 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVzH080wkcwPHNyMXC/MpxwiaRh7p0V6cn32/05PGU5KKus+ShpOa2XkWu
kpK8MNoVebmdPJTyeE3Rg4tEeUxKD7h2HnItv4UZm7Fd/fF5vf/7sNiHt+/X
olAoPp/7Yu5v7DnOoXGuIXSq/Zk9NGzoYnoHMnfBy7Y7jZm7aahprD3DZEaC
R3p06NVgGuY+TLXSYR6HFca9wrpdNIxazzs0ZZUM2qZ3TCg7adilihCMWmVD
0aJD2vG+NNTt6bcjrYqBXPPm3VGgYV6zkPPRqgaORVZeOsCiYVl5ck/UsmbQ
bXCVuYu1MBw6s0diuqDgw42L0flaGD1kPyAqewO/oryiOVwL9ViJdu9cxHBX
sPCBqZ0Wphm1OOT9MgAMkfW8agkV2T07/qa1voe+ZzreHsVU5DxOZB+2k0Cf
ZZMuPZKKlUfo/qYeJIz8EK7LXErFvLiDkuWBo8DxHZQvHqFggnBm28TIGOgs
xyXx5RSkdInxfqwM2txiX+lwKWjLDTu2w0EOev4ZvFPfUXBQfnmn/oNJqNht
UJ4l1YDn0IH4TI4CVhuI/OZHacB3kO9oaTkNi61NRsY/qkHyiH3qSakKnFtX
GnK5aljG6LZw3zsLjhxDozfjs6AH8pBemRrcS4qyxMdnYQsZNGUdQEHP/il1
y+QMvK4PpQY5UbEqVmfvN0dnoOp8w89MORVdi59t1lerIEyHJ25v18LbzwPo
4jgV7IuJq6JfoaF3ZtauQC0VfBvu2O4doo1bRJf/dE6Zhg5jJ33eah1c1un3
+NPcabhXlpDjRJuDqxKbOH4ZSoijOvi19s1BxxUKlcBACXq9sVujRbqY6DZ0
cl2aAoaKWALhia9w5r/0lHMmChAsMdOuCZiL7AsTXJFgCvhXwppCmHo4XGfy
PtF8CoIEe9rpw3rYESz3qy6YBMXGQqWwVh+LRlOzOxZNwsCQ27H6JDrmmA9G
Jt+Uw9X1zuZtIfPw5IaJr+3s5VB6lscIX2qAp2frfMLLJyApYJ8XTW6Aw+be
8XouE7CyN684qc0Q167kX8i4LYMs+5zSNi8jLB3MsLq3XgYnH6ZmedUYoWG6
T+aTu+PgYx5Q2GzDwBc5j9Uua8ZhQ3RTMCOZgTWuqnGv+jEQLmTbtMoZmNIr
aXDDMbB5dO2Sb7AxxhllWfY2jgJ/ab3D81pj7Cyixrz+cRTCZNqdTx0ItD3i
uZmT+wnYlePM5HQCJbX06qMlUohK8J/xzCCQ/zLoltt1KfD8Ra/oFwl0Gble
ZlAghfNyXhr/EoFJZpsKi3KkULZaqbqc+/nHjc/sviAFZZ2mu+gmgaH20qhV
kVLgP6enNjQR2HexgzW5WApX8g9FnHtK4JkbFhb1LCnkc9vdt7YQ6FR30DTN
Qgq3TfjTLe0Exkp1DW0XSKE3iIjoekmgmQfOBGhLwW7AzL1/gMBAdUV3VT8J
y0WxlgVDBGrmazpP/0PCmrM9yv3DBBY6+rT5vCXB2y634oOEQMVPHx4NdZIQ
c5BpOTZG4O+3WJUL6kg4se608i8ZgWubD5f8e5+Es/P6X3DlBA6IH1wrrSYh
qzw/RaEg8HuDoD82VZBw9ZR2+N1pAt/aXM9mlJBwc9t+txMzBCasnRT0XSNB
ZN1o4aom0GH7Rn5xPgm1MlulRkPgs4jMFJ6QhP8BMktLBw==
           "]]}, 
         Annotation[#, "Charting`Private`Tag$15621#1"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVzH8803kcwPFp9GM2Z/veJRRTHlvmx/HoUZHT+3PSox9KSSiKs5l1pRU1
CtGR0D3MlJByO6S7rqiuVQ+SE4qU9ciU+5ormSUzF1tjs5nr/ng9nv+9XNhH
dnHnEQiE7V/638pM9nyf+PT1VzUrlPnuZmiX0bdF0vdCoaCY/rubGeaeNufQ
6T9Cit4c3cE0Q2VLobMV/SRsMuM9Vq5mSAwQHJ52LoDRRaKW7KVmkBkPlEw4
XwJvF9PlDIoZFsiHmOPO1+Hhjt5dRz/NQlWXOGnMuQF6bp5pibw7C/W3CuSJ
Xl0wESc+SfKZBR68uqROlgGrLrUx9oEJ+Eo3haQeh2dRZJ0dMgHJ5Qzzne8g
7CFGUyTNRhDaPmdV/aAAYiCvTrPRCGz57r+ILz7AL+me7t+0zUDSkzPsI0wV
XLG7XV0ROAN3jpLDlmwZh8YtE1WtXQaoSj+k8o6cgPYUVaZ0swGyxabQz+pJ
GPerVmS81ANBNoia0rSQEbs4ULhHD4zjCSd2s3QwnRWUmdM3DcO6sgjrR1Nw
fo13oGPsNGxVHjx1PkkPjh9fK0oHpiBkWOTu5DQDC01rswT7pkDVxj7dWWcE
7Fpk9dSwDryob5ZtiJ0FSrBPTTRHByTQxQ1ozcA42+nOUX2GTeNR08vDCciz
yf58CO8z/N0abxHlYYHKdjM1Vz5o4V5+ewxdZ4FccjR4IV8LCVaCQal0Hiq/
mSpmqzXASU6/R64gIq/ERjWerIFvee7SbXGWyE3YsEpinISXNA9rgZ8Vot5I
3pOcNgkP67MvexDnoyUxo5Yyi0lIt2DtfPHPfEQhOxTZZU0AaSBtM1+yAHX7
2jAyZz+B8ppLiThjIXqUywmg2XyCkpX2lg3hi9C5Tg9bPulfEFUkdMTRSejC
2iSNzZJxiCrZLyWPkFD8Ia9OAUsN+qBag7jZGtEuxu69unIMFMrAE615ZGRS
Wc/Y+aqgOsDHsTuOgtrWeESErRqFulwBledpgzrqOx7L4CPkhXOCiTobdGFM
TncIHYHVA1XX87q/Qv5O8f4rQz5Audvluu5gW0Q/xeOm71NCVktheXCDLRp+
9XZracQwbHcMr+1ypSL+mHRFargCvud3RFMLqGiNzzpyJXcIxEvZri90VDSQ
aH/7XNx7cG37rTQkmoaaeo9xHvEHQeTZyupppqHuecKvEy3eQYLW8tUzFobe
bFqKq00DwL6joRcUYShG+WvTtIMcErPDTFuLMfQHLeBuEU0OgjBJH/kChoyA
X2eS5JCvEwhFpRgqr6CWRRr6od7PYCyr/PLbkZ30oK8fDI/n3ly7gaHQRg4j
taQfRD3kwvYODAUVMURTlH6oqDl84OwzDBU3tZ4VWvVDzXHphs3PMfR+NOYU
YxaH+4tFM8+lGMoMKjsYocZhIAo7IHuNoSbDgo33u3BgKuw3DCkw5Bs/ahDk
4eAtSXO6qsRQfnHuBCULh3W5cgN3BEO9zS4jtSk4bGNW3h5VYSjNPqr3NReH
5EN0p8lJDN2VdtWvDsIh47ufDH9qMUQwJdR2++OQSxnqPa7D0E434hXuKhzK
b9X8rNdjaDLHv+DichyqT1vyGmcwFHCnL8vTAYcbodzADBOGhG+PpTyh4iBZ
/nTZejOG3lrbHt6/CIdmLcMwN4chd7+bHB0Bh/8AhmRTtQ==
           "]]}, 
         Annotation[#, "Charting`Private`Tag$15621#2"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVxX040wkcAPAtL8lb5td1ysvGqWUtUnlCp+831Inlrth56c3mtUsvZNcL
nXJW1E1THpbOs0To8SBndQ9JTjUvRWWX4+hJ9Fs1dDTLZl7u7o/P83HkH9kV
u4BCoez4z/8X/cQ3do9J3dyX0d5Z4kXFRwoGJ4wRAcH+Zw7WeVJxXt70M4Nx
AFqMNi56uJGKRc0iuhHjJFRmlfoPeVAx0UdwaIqeDadz0u8x1lFRoU/IG6df
BXqhx60iFhUX9g8xx+i3ILa2OLPAlorFHdKkEXo9jL8+ueniLAWra7L7E107
IN17oSSmkYLx8OLqaLIC7KOOeV5Kp+Bh0mVYVt0Ho3fvc0f8KGjqmMl87TkI
681InpcBBXOsnrCKo4bBmtsTXSuaB35/6AODp0qoyvn1jcJ0HpIeZ/KPMFVQ
yaJHRFyYg9qj5iE228egbc/+8LPWc1CcelC1NmwcFNkRHiLxLGRIZ3ZOjk7A
DIdWuOnLWaAoBrHxlBouJAu1nOszsDIl7kQoSwPGV+o2+NJn4K2m4Huz+5+h
eLtU21emh0Dyh9OXk7TA0vsXcp31EPxWvNrBYRqWLi732FA6DaqH/DNtVXpw
qpeH32FPgyutx95v/yzY7bsesbxSB6ag4Q2o58Dj6sYhx3U6+GYscsqJS8FN
z7ICLGq00NsSQ41kU7EsPr9it6sW7mQ92sfQUNEtnyfm3J2COCPBYFfXAix/
oOQ6bpiC6OTUO+aFBuiT7lIiafgMbvGruzg8Q/QsXqVK9vsMz6zZZgIvI6Q3
vbF0b9HAveqMa2wDY2Qmhd/L3a6BVCrru6evjNGOnr21Rz4JpgOnAg7LFqLA
7cf209smgSxzzJOmmeDYS8bL1i415K1aZljPXYShx4VNGo4axIVxrTyGKfZW
l7vJFZ8gMm9vl/k7U2wOOFeo2/MJtP43ddImMyx45TBsNTABw6TviZbz5viL
iaCuI3oCbvi423byLPCoq5CX8GYcqoQCWvwaS0xW7SqoiB+H89zoIAONJd6m
NYgKBv8Bj4HiW+c7F2O4v2/FzVcfQeJyraozyAp9SrZ2a0fGIL1ZJAmqt0Kq
tvF3QjkKO2y5NzucaXiRViWefDsCWw637qZl0zA0zObkco0KpHZ856caGuou
T9mZTHwA54fl+cG7rbFveudz77n3IF7TwupussZM5orj663eQ5za8EU7i8BF
gYl9aot3wK/9xMi+RGCnxDVIZ6eExIyQmcBcAo/VpG17bKMEQYjsL/MrBNrK
O7bkLlFClkaQI84n8IA6ztPFXAnVXjp9QRGBJsHSFRF6EnR/zPeUVRK4zcCK
Ut9HgrjbXPSolcDmQxOyE/kkFJYcSjjXTmBcJtz2v0xCSUqXX8ATAi2viSqt
cki4u1Q8/aSLwL1tLjcqhCQMRBIJipcE6p34l3pTSGAOL/MbGibQq7f7gGcI
CWtlpxxKSQKHPjJiDb8lwVvYr4t9R2CW0ZGo54EkcJhFtz+oCPx7nVlYgi8J
yQcZDhMTBB4X+flL3ElI+/qs7jc1gfaluRCzhgShxdCfKRoC5Q2vvde6kCCp
Kbmo1RK49H2qexuDhBtnDOMbpglsnGtn59mRULkz1jdthsCYL2xWRdmQIHOS
22+eI9CCHfcVewkJTeqVuvl5Aut8ZQ7axST8C3yvQzE=
           "]]}, 
         Annotation[#, "Charting`Private`Tag$15621#3"]& ]}}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 4.5621522276001985`}, {0, 2.8655605261563037`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.08090169943749476]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.8229796702240047`*^9, 3.822979682863058*^9}, 
   3.822995594596583*^9, 3.8229957504837217`*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"a9f86132-0567-48f1-9eb5-70f6ab4564c9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving the dual problem", "Subsection",
 CellChangeTimes->{{3.822995606787013*^9, 
  3.82299560948449*^9}},ExpressionUUID->"e82e002d-49e0-42cc-8e54-\
e6f0cebf4365"],

Cell[TextData[{
 "We could also solve the dual problem. First, we build up the matrix X and \
vectors ",
 StyleBox["y",
  FontWeight->"Bold"],
 ", ",
 StyleBox["\[Lambda]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["e",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.8227406354649*^9, 3.822740643071721*^9}, {
  3.8229956177110577`*^9, 
  3.822995659533616*^9}},ExpressionUUID->"e94c3f54-6f1d-429b-ac94-\
ebd841892928"],

Cell[BoxData[
 RowBox[{
  RowBox[{"X", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"data", "[", "\"\<Plus\>\"", "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"data", "[", "\"\<Minus\>\"", "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8229948029074793`*^9, 3.82299483227779*^9}, {
   3.822994895491407*^9, 3.822994909677128*^9}, 3.8229956280829763`*^9},
 CellLabel->"In[96]:=",ExpressionUUID->"3f6fc47f-55ca-41c0-9908-49ca27586383"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Y", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"data", "[", "\"\<Plus\>\"", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"Length", "[", 
        RowBox[{"data", "[", "\"\<Minus\>\"", "]"}], "]"}]}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822994836114833*^9, 3.822994836484962*^9}, {
  3.8229948876520557`*^9, 3.822994899517584*^9}, {3.822995205087777*^9, 
  3.8229952055487947`*^9}, {3.822995684929783*^9, 3.822995692354609*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"20a56d69-dbc4-4259-81e1-0e93d5109dc4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "=", 
  RowBox[{"ConstantArray", "[", 
   RowBox[{"1", ",", 
    RowBox[{"Length", "[", "X", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822980054946007*^9, 3.822980060322157*^9}, 
   3.8229956746813107`*^9},
 CellLabel->
  "In[101]:=",ExpressionUUID->"10339893-fad6-4c91-bcd3-005fec9342e9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
   ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
   "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{
  3.822980061153473*^9, {3.8229956713268747`*^9, 3.822995693904388*^9}},
 CellLabel->
  "Out[101]=",ExpressionUUID->"9da602b5-1e74-49a8-a27d-f7a582b8c2a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Lambda]", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "i", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822736499045179*^9, 3.822736503094264*^9}, {
  3.8227368604226017`*^9, 3.8227368624132338`*^9}, {3.822979903555831*^9, 
  3.822979935021117*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"e07683dc-cd84-4d0b-80d2-29339c220f53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[Lambda]i", "[", "1", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "2", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "3", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "4", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "5", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "6", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "7", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "8", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "9", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "10", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "11", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "12", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "13", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "14", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "15", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "16", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "17", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "18", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "19", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "20", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.822736503345653*^9, {3.822736784676467*^9, 3.8227367927081413`*^9}, 
   3.822736862851327*^9, {3.822979919751758*^9, 3.82297993615182*^9}, 
   3.82299569785511*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"8d6961cd-c185-4381-bf00-a95bd2c89064"]
}, Open  ]],

Cell["Now we can solve the dual optimisation problem", "Text",
 CellChangeTimes->{{3.822995706595687*^9, 
  3.822995714144512*^9}},ExpressionUUID->"ed6a3e03-94c6-463e-8ee5-\
edd2ba5ddf24"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"max", ",", "sol\[Lambda]"}], "}"}], "=", 
  RowBox[{"NMaximize", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "2"]}], 
        RowBox[{"\[Lambda]", ".", "X", ".", 
         RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "+", 
       RowBox[{"\[Lambda]", ".", "e"}]}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{
       RowBox[{"\[Lambda]", ".", "Y"}], "\[Equal]", "0"}]}], "}"}], ",", 
    "\[Lambda]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822736506293404*^9, 3.822736542931388*^9}, {
  3.822736582192131*^9, 3.822736601610004*^9}, {3.822736708592511*^9, 
  3.822736715634078*^9}, {3.8227368193715153`*^9, 3.822736908461323*^9}, {
  3.82273778357137*^9, 3.822737786462852*^9}, {3.8229800257185307`*^9, 
  3.822980088764784*^9}, {3.822995719950317*^9, 3.822995720320966*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"ea4cc13a-b92e-450c-a913-362242655375"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.611250504093322`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "1", "]"}], "\[Rule]", 
      "5.880453931615192`*^-7"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "2", "]"}], "\[Rule]", 
      "4.007564661761538`*^-9"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "3", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "4", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "5", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "6", "]"}], "\[Rule]", 
      "4.509424828291153`*^-8"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "7", "]"}], "\[Rule]", 
      "7.611835827435246`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "8", "]"}], "\[Rule]", 
      "6.563991576908004`*^-8"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "9", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "10", "]"}], "\[Rule]", 
      "7.611836530222368`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "11", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "12", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "13", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "14", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "15", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "16", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "17", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "18", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "19", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "20", "]"}], "\[Rule]", "0.`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.822980081900105*^9, 3.822980099142489*^9}, 
   3.822995726089863*^9, 3.8229957650260363`*^9},
 CellLabel->
  "Out[105]=",ExpressionUUID->"dcbcd351-a9e4-4895-80de-2fee5f3046e8"]
}, Open  ]],

Cell[TextData[{
 "Notice that only a small number of the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "12925eaa-8f0b-4839-a8ab-ed03e79204c8"],
 "\[CloseCurlyQuote]s are non-zero; these are the ones corresponding to the \
support vectors."
}], "Text",
 CellChangeTimes->{{3.822995768165753*^9, 
  3.8229957970898952`*^9}},ExpressionUUID->"4a17afa9-4bb3-4bfa-9e7e-\
1967d1f6127a"],

Cell[TextData[{
 "We can next compute the value for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"w", "=", 
    RowBox[{
     SuperscriptBox["X", "T"], "\[Lambda]"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "5474ab15-868f-48a3-8489-06a2766e72b9"],
 " and find b from one of the constraints with a non-zero ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "4980f3de-72db-43d6-b1b1-60a511f23ea9"],
 " actually being an equality (rather than an inequality)."
}], "Text",
 CellChangeTimes->{{3.822980687380495*^9, 3.822980759188776*^9}, {
  3.822995801432269*^9, 3.8229958171482553`*^9}, {3.822996118638393*^9, 
  3.8229961193526917`*^9}},ExpressionUUID->"4e33ebd1-1ff3-4600-8d97-\
0b8096964f14"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wsol\[Lambda]", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"w1", ",", "w2"}], "}"}], "\[Rule]", 
     RowBox[{
      RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "/.", 
    "sol\[Lambda]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8229803676940203`*^9, 3.822980370015842*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"803bf8ca-c056-42b5-8345-c5283b1dd6ea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w1", "\[Rule]", "1.1177350649973279`"}], ",", 
   RowBox[{"w2", "\[Rule]", "3.738383800143886`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.822980370853683*^9, 3.822995825257139*^9},
 CellLabel->
  "Out[106]=",ExpressionUUID->"f4164f1e-e942-4760-a3be-ac781b53b31c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bsol\[Lambda]", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"plusConstraints", "[", 
        RowBox[{"[", "7", "]"}], "]"}], "/.", "wsol\[Lambda]"}], "/.", 
      RowBox[{"GreaterEqual", "\[Rule]", "Equal"}]}], ",", "b"}], "]"}], "[", 
   
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822980299440219*^9, 3.8229803357880507`*^9}, {
  3.822980380565118*^9, 3.822980395310096*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"181e0ab2-0934-47c5-82b3-a4d1eabe144b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", "\[Rule]", 
   RowBox[{"-", "8.049356067132322`"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.822980309338909*^9, 3.822980336134239*^9}, {
   3.822980381167412*^9, 3.822980395758669*^9}, 3.822995826556549*^9},
 CellLabel->
  "Out[107]=",ExpressionUUID->"47f30bcf-4243-4fed-97a7-aa26bd0d35a8"]
}, Open  ]],

Cell["\<\
Check this agrees with what we found when solving the primal version\
\>", "Text",
 CellChangeTimes->{{3.822995837229766*^9, 3.8229958642857313`*^9}, {
  3.822996125451795*^9, 
  3.8229961292871017`*^9}},ExpressionUUID->"35032774-e30d-4dbf-99f5-\
7cc7e51618d1"],

Cell[CellGroupData[{

Cell[BoxData["sol"], "Input",
 CellChangeTimes->{{3.822980458435069*^9, 3.822980458839958*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"5baa77ea-1997-43b3-8291-9e1ce9f621d8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w1", "\[Rule]", "1.1176497303899737`"}], ",", 
   RowBox[{"w2", "\[Rule]", "3.738096096794236`"}], ",", 
   RowBox[{"b", "\[Rule]", 
    RowBox[{"-", "8.048661024444451`"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8229804593790894`*^9, {3.8229958291903887`*^9, 3.822995865259634*^9}},
 CellLabel->
  "Out[110]=",ExpressionUUID->"1ce9c56d-0079-41ff-a5e5-3a2db7fd3fcd"]
}, Open  ]],

Cell["\<\
Knowing the support vectors, we could also go the other way and obtain the \
\[Lambda]\[CloseCurlyQuote]s from the w and b found by solving the primal \
problem\
\>", "Text",
 CellChangeTimes->{{3.822740658820961*^9, 3.8227406684311666`*^9}, {
  3.822980644743555*^9, 3.822980660425441*^9}, {3.822995891711063*^9, 
  3.822995902827364*^9}},ExpressionUUID->"140257a3-8af3-40b2-a63b-\
ffe6b06ec56d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Inverse", "[", 
   RowBox[{"Transpose", "[", 
    RowBox[{"X", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{"7", ",", "10"}], "}"}], "]"}], "]"}], "]"}], "]"}], ".", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"w1", ",", "w2"}], "}"}], "/.", "sol"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.822740582376663*^9, 3.822740584736486*^9}, {
   3.8227406932241993`*^9, 3.822740699900773*^9}, 3.82298062981874*^9, {
   3.82299587596375*^9, 3.822995881296171*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"94fa932b-ad41-415c-bf45-f61824fae632"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.611251675460538`", ",", "7.611251675809735`"}], "}"}]], "Output",\

 CellChangeTimes->{
  3.82274070072899*^9, 3.822980630266551*^9, {3.822995878221505*^9, 
   3.822995881822846*^9}},
 CellLabel->
  "Out[112]=",ExpressionUUID->"c80d9a93-5ba9-41f7-acce-3278a918d5ce"]
}, Open  ]],

Cell["Again, this is consistent with solving the dual problem.", "Text",
 CellChangeTimes->{{3.822995886411324*^9, 
  3.822995911872384*^9}},ExpressionUUID->"1e40ec72-719c-4d47-a1eb-\
5c57eb1e9b24"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kernel Trick", "Section",
 CellChangeTimes->{{3.8229808671994123`*^9, 
  3.8229808688641043`*^9}},ExpressionUUID->"b5bf50b5-4b7d-404b-ba9e-\
547513b6c38b"],

Cell["\<\
We next look at an example where the data is not linearly separable and we \
will have to apply the kernel trick. First we generate two datasets, one \
surrounding another. We do this by defining the data in polar coordinates:\
\>", "Text",
 CellChangeTimes->{{3.822980871595449*^9, 3.822980935565127*^9}, {
  3.8229995372104597`*^9, 
  3.822999537366713*^9}},ExpressionUUID->"4864c7c6-789f-4875-aaa1-\
93856e1c6573"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.822996229626093*^9, 3.82299623234743*^9}, {
   3.822997457470047*^9, 3.822997488642921*^9}, {3.822997771600627*^9, 
   3.822997771959277*^9}, 3.822997838232868*^9},
 CellLabel->
  "In[278]:=",ExpressionUUID->"5ccd1294-7c3a-4f87-ae2b-3e891445abfa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"r1", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"UniformDistribution", "[", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], "]"}], ",", "10"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Theta]1", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}], ",", "10"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.820566235317284*^9, 3.820566239801949*^9}, {
   3.820566292498358*^9, 3.82056631825038*^9}, {3.820566383186515*^9, 
   3.8205663870092916`*^9}, {3.820566422481707*^9, 3.820566489710216*^9}, {
   3.820566540917573*^9, 3.820566552171215*^9}, 3.820567090934923*^9, {
   3.820568129828504*^9, 3.8205681707426243`*^9}, {3.820568229018515*^9, 
   3.8205682693962173`*^9}, {3.822981645086172*^9, 3.822981647153126*^9}, {
   3.822981917118134*^9, 3.822981918568543*^9}, {3.822983087280572*^9, 
   3.8229830893453417`*^9}},
 CellLabel->
  "In[279]:=",ExpressionUUID->"0004fbc4-e895-41c2-bfa4-9ed1984559ac"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"r2", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"NormalDistribution", "[", 
      RowBox[{"2", ",", 
       FractionBox["1", "10"]}], "]"}], ",", "10"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Theta]2", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}], ",", "10"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.820566235317284*^9, 3.820566239801949*^9}, {
  3.820566292498358*^9, 3.82056631825038*^9}, {3.820566383186515*^9, 
  3.8205663870092916`*^9}, {3.820566422481707*^9, 3.820566556912166*^9}, {
  3.822981648797325*^9, 3.822981649966735*^9}, {3.822981920493361*^9, 
  3.8229819221573467`*^9}, {3.822983091292787*^9, 3.822983093148657*^9}},
 CellLabel->
  "In[281]:=",ExpressionUUID->"697758f1-dfc2-46c8-a85b-118dfbf15810"],

Cell["And then transforming to Cartesian coordinates:", "Text",
 CellChangeTimes->{{3.822980938680564*^9, 3.822980946531595*^9}, {
  3.822997773906652*^9, 
  3.822997775129292*^9}},ExpressionUUID->"d9346f6a-07ba-4745-9a38-\
bdcf7b6b95e4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x1", ",", "y1"}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"r1", " ", 
      RowBox[{"Cos", "[", "\[Theta]1", "]"}]}], ",", 
     RowBox[{"r1", " ", 
      RowBox[{"Sin", "[", "\[Theta]1", "]"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x2", ",", "y2"}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"r2", " ", 
      RowBox[{"Cos", "[", "\[Theta]2", "]"}]}], ",", 
     RowBox[{"r2", " ", 
      RowBox[{"Sin", "[", "\[Theta]2", "]"}]}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.822980948244487*^9, 3.822980972970742*^9}, {
  3.822981009727542*^9, 3.822981017014436*^9}, {3.8229816759439507`*^9, 
  3.8229816781142607`*^9}},
 CellLabel->
  "In[283]:=",ExpressionUUID->"f6edf7ba-a3e0-4442-8f9e-0ff52a668d13"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nonsepdata", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Plus\>\"", "\[Rule]", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"x1", ",", "y1"}], "}"}], "]"}]}], ",", 
     RowBox[{"\"\<Minus\>\"", "\[Rule]", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"x2", ",", "y2"}], "}"}], "]"}]}]}], "|>"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.822996285411387*^9, 3.8229963343138657`*^9}, {
  3.8229963672787457`*^9, 3.822996374118305*^9}},
 CellLabel->
  "In[285]:=",ExpressionUUID->"b222bd1c-dfea-423b-ac3c-ce6537daec63"],

Cell["We now have a non-linearly separable dataset:", "Text",
 CellChangeTimes->{{3.822996257502099*^9, 
  3.8229962710465612`*^9}},ExpressionUUID->"aa20f92e-3f62-4012-a4b0-\
70f91dd6e8a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Values", "[", "nonsepdata", "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"Keys", "[", "nonsepdata", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822996341460595*^9, 3.822996360819833*^9}},
 CellLabel->
  "In[286]:=",ExpressionUUID->"7b4fdae2-57a1-455f-9334-d7bec952b862"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        PointBox[{{-0.19418006351395, -0.7939897238477599}, {
         0.0009402659049429163, 0.11141564362630568`}, {
         0.6985681983270928, -0.36790456437588814`}, {-0.00295604144687557, \
-0.18777988106197538`}, {-0.23888242209918228`, 
         0.034500797441814446`}, {-0.02990472311744523, 
         0.05854307847237184}, {-0.4835702248162677, 0.24533902079622932`}, {
         0.20390719257284282`, 0.10887728322031986`}, {
         0.10538241515767546`, -0.38172681750042337`}, {-0.1824956607100494, \
-0.6762831160175996}}]}, {
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        PointBox[{{2.041251388907825, -0.35539451182767}, {-0.729497294004517,
          1.9430725958833286`}, {-1.9582099623680669`, \
-0.14589014711693948`}, {
         0.7549130603093653, -1.6895760872115724`}, {-0.5094375357680065, 
         1.9943197246955076`}, {-1.8706064275341703`, -0.14104829949370085`}, \
{1.4543618707479875`, -1.18363578035018}, {
         1.853565067751745, -0.4895674667312021}, {
         1.9874646392084663`, -0.5256987415568544}, {0.2956806496520435, 
         2.0791324971956673`}}]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     Full, Axes -> {True, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-1.9582099623680669`, 
      2.041251388907825}, {-1.6895760872115724`, 2.0791324971956673`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.8229963430096684`*^9, 3.822996377998423*^9}, {
   3.822997467324767*^9, 3.822997492289175*^9}, 3.822997779357111*^9, 
   3.8229978428343487`*^9},
 CellLabel->
  "Out[286]=",ExpressionUUID->"3c7bcaba-ce04-4bbc-9429-d131afacd787"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explicit polar coordinate map", "Subsection",
 CellChangeTimes->{{3.822996391599948*^9, 
  3.8229964015899343`*^9}},ExpressionUUID->"125c3fb4-950d-4960-89f3-\
f59c80d6202d"],

Cell[TextData[{
 "We first look at the case where we have a good idea for an explicit map ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Phi]", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{"(", 
     RowBox[{"r", ",", "\[Theta]"}], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "04cf3e5e-02d0-4c54-a598-5cf334149aa0"],
 " that will transform the data into a nice form. Define the map and apply it \
to our data:"
}], "Text",
 CellChangeTimes->{{3.822996407687862*^9, 3.822996467099221*^9}, {
  3.822996546639573*^9, 
  3.822996558875002*^9}},ExpressionUUID->"94ddb11d-5747-4a93-a5ab-\
a11e3e07c2c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"\[Phi]polar", "[", 
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     SqrtBox[
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"]}]], ",", 
     RowBox[{"ArcTan", "[", 
      RowBox[{"x", ",", "y"}], "]"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822981714997316*^9, 3.822981752475871*^9}, {
  3.8229818834395657`*^9, 3.822981884942523*^9}},
 CellLabel->
  "In[287]:=",ExpressionUUID->"5103ce02-778a-4063-b394-61557f5d8641"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sepdata", "=", 
  RowBox[{"Map", "[", 
   RowBox[{"\[Phi]polar", ",", "nonsepdata", ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822996523810607*^9, 3.822996533247594*^9}},
 CellLabel->
  "In[288]:=",ExpressionUUID->"4781060c-423e-42d8-bbe4-3d690bb4ba29"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Plus\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.8173894901710712`", ",", 
        RowBox[{"-", "1.8106507743179687`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.11141961113123644`", ",", "1.5623572642627543`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.7895259946338514`", ",", 
        RowBox[{"-", "0.4847436665256791`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.18780314670602638`", ",", 
        RowBox[{"-", "1.586537082861427`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.24136096745765045`", ",", "2.998158602370644`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.06573875950878105`", ",", "2.043059003833555`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.5422466205096241`", ",", "2.6720828955548726`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.23115450673602744`", ",", "0.4904412673460606`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.3960060815485871`", ",", 
        RowBox[{"-", "1.301437826423534`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.7004737819422449`", ",", 
        RowBox[{"-", "1.8343692602173052`"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"Minus\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2.071958612461975`", ",", 
        RowBox[{"-", "0.1723782891727108`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.075499316991622`", ",", "1.9299482374851298`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.9636369806416225`", ",", 
        RowBox[{"-", "3.067228247631557`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.85055696564651`", ",", 
        RowBox[{"-", "1.1506015446429476`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.0583580269620114`", ",", "1.8208924036580747`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"1.8759165838390086`", ",", 
        RowBox[{"-", "3.066332623351288`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.8751432242926847`", ",", 
        RowBox[{"-", "0.6831305889201751`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.9171279990838217`", ",", 
        RowBox[{"-", "0.2582252416616537`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.0558148892783366`", ",", 
        RowBox[{"-", "0.25858522674350404`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.1000521392274396`", ",", "1.4295301271134075`"}], "}"}]}], 
     "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.822996519520288*^9, 3.8229965603602123`*^9}, 
   3.822997495918667*^9, 3.8229977847804937`*^9, 3.822997847479541*^9},
 CellLabel->
  "Out[288]=",ExpressionUUID->"f959ced9-9063-4c59-8821-00e17a516275"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Values", "[", "sepdata", "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"Keys", "[", "sepdata", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822996893604599*^9, 3.822996897158687*^9}},
 CellLabel->
  "In[289]:=",ExpressionUUID->"a31ed843-294f-407a-a131-a0fc6c8994fd"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        PointBox[{{0.8173894901710712, -1.8106507743179687`}, {
         0.11141961113123644`, 1.5623572642627543`}, {
         0.7895259946338514, -0.4847436665256791}, {
         0.18780314670602638`, -1.586537082861427}, {0.24136096745765045`, 
         2.998158602370644}, {0.06573875950878105, 2.043059003833555}, {
         0.5422466205096241, 2.6720828955548726`}, {0.23115450673602744`, 
         0.4904412673460606}, {0.3960060815485871, -1.301437826423534}, {
         0.7004737819422449, -1.8343692602173052`}}]}, {
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        PointBox[{{2.071958612461975, -0.1723782891727108}, {
         2.075499316991622, 1.9299482374851298`}, {
         1.9636369806416225`, -3.067228247631557}, {
         1.85055696564651, -1.1506015446429476`}, {2.0583580269620114`, 
         1.8208924036580747`}, {1.8759165838390086`, -3.066332623351288}, {
         1.8751432242926847`, -0.6831305889201751}, {
         1.9171279990838217`, -0.2582252416616537}, {
         2.0558148892783366`, -0.25858522674350404`}, {2.1000521392274396`, 
         1.4295301271134075`}}]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     Full, Axes -> {True, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 2.1000521392274396`}, {-3.067228247631557, 
       2.998158602370644}}, PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.822996897542521*^9, 3.822997496522778*^9, 
  3.822997785603754*^9, 3.822997847541587*^9},
 CellLabel->
  "Out[289]=",ExpressionUUID->"9a58b918-b2d9-4aa0-9c78-2e3b0187e1df"]
}, Open  ]],

Cell["Now we build up our X matrix with the transformed samples", "Text",
 CellChangeTimes->{{3.822996489429439*^9, 
  3.822996502165043*^9}},ExpressionUUID->"ef691abc-d69d-4fbc-ac0d-\
ff6784b6e37b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"X", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"sepdata", "[", "\"\<Plus\>\"", "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"sepdata", "[", "\"\<Minus\>\"", "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8229948029074793`*^9, 3.82299483227779*^9}, {
   3.822994895491407*^9, 3.822994909677128*^9}, 3.8229956280829763`*^9, {
   3.822996584986902*^9, 3.8229965874163322`*^9}},
 CellLabel->
  "In[290]:=",ExpressionUUID->"c3697bbb-cd56-40a4-93de-cea28ed32f0e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Y", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"sepdata", "[", "\"\<Plus\>\"", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"Length", "[", 
        RowBox[{"sepdata", "[", "\"\<Minus\>\"", "]"}], "]"}]}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822994836114833*^9, 3.822994836484962*^9}, {
  3.8229948876520557`*^9, 3.822994899517584*^9}, {3.822995205087777*^9, 
  3.8229952055487947`*^9}, {3.822995684929783*^9, 3.822995692354609*^9}, {
  3.82299659035343*^9, 3.822996593018736*^9}},
 CellLabel->
  "In[291]:=",ExpressionUUID->"7f62eda1-3c0b-407c-a08b-d18c2c93ccec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Length", "[", "X", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822980054946007*^9, 3.822980060322157*^9}, 
   3.8229956746813107`*^9, 3.822996631988751*^9},
 CellLabel->
  "In[292]:=",ExpressionUUID->"88d360dd-dac2-412c-aa09-791ff1e2a4ff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Lambda]", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"\[Lambda]i", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.822736499045179*^9, 3.822736503094264*^9}, {
   3.8227368604226017`*^9, 3.8227368624132338`*^9}, {3.822979903555831*^9, 
   3.822979935021117*^9}, 3.822996633439192*^9},
 CellLabel->
  "In[293]:=",ExpressionUUID->"74d28f7d-987c-4f65-b3c9-d804c565f631"],

Cell["Now we can solve the dual optimisation problem", "Text",
 CellChangeTimes->{{3.822995706595687*^9, 
  3.822995714144512*^9}},ExpressionUUID->"0dd756a2-321a-4c55-8b9e-\
139c2354cdd9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"max", ",", "sol\[Lambda]"}], "}"}], "=", 
   RowBox[{"NMaximize", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox["1", "2"]}], 
         RowBox[{"\[Lambda]", ".", "X", ".", 
          RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "+", 
        RowBox[{"\[Lambda]", ".", "e"}]}], ",", 
       RowBox[{"\[Lambda]", ">", "0"}], ",", 
       RowBox[{
        RowBox[{"\[Lambda]", ".", "Y"}], "\[Equal]", "0"}]}], "}"}], ",", 
     "\[Lambda]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822736506293404*^9, 3.822736542931388*^9}, {
   3.822736582192131*^9, 3.822736601610004*^9}, {3.822736708592511*^9, 
   3.822736715634078*^9}, {3.8227368193715153`*^9, 3.822736908461323*^9}, {
   3.82273778357137*^9, 3.822737786462852*^9}, {3.8229800257185307`*^9, 
   3.822980088764784*^9}, {3.822995719950317*^9, 3.822995720320966*^9}, 
   3.822996814010791*^9},
 CellLabel->
  "In[294]:=",ExpressionUUID->"bf051e52-95e4-411d-86ba-2c7a63025fd6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol\[Lambda]", "//", "Chop"}]], "Input",
 CellChangeTimes->{{3.822981972357045*^9, 3.82298197421145*^9}, {
  3.822996803910034*^9, 3.822996806800394*^9}},
 CellLabel->
  "In[295]:=",ExpressionUUID->"8ed9a95f-352b-42a6-9405-04ef4d80e29c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "1", "]"}], "\[Rule]", "1.842724152694174`"}], 
   ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "2", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "3", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "4", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "5", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "6", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "7", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "8", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "9", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "10", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "11", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "12", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "13", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "14", "]"}], "\[Rule]", "1.220964637052436`"}],
    ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "15", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "16", "]"}], "\[Rule]", 
    "0.6217595156417379`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "17", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "18", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "19", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "20", "]"}], "\[Rule]", "0"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.822981974510281*^9, 3.822983138607081*^9, {3.822996809008205*^9, 
   3.822996817905559*^9}, 3.8229975123639917`*^9, 3.8229977990741177`*^9, 
   3.822997851027227*^9},
 CellLabel->
  "Out[295]=",ExpressionUUID->"663d9d76-283b-4535-9eab-a707e5fe0fe1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"supportVectors", "=", 
  RowBox[{"Pick", "[", 
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"nonsepdata", "[", "\"\<Plus\>\"", "]"}], ",", 
      RowBox[{"nonsepdata", "[", "\"\<Minus\>\"", "]"}]}], "]"}], ",", 
    RowBox[{"Positive", "[", 
     RowBox[{"Chop", "[", 
      RowBox[{
       RowBox[{"\[Lambda]", "/.", "sol\[Lambda]"}], ",", 
       SuperscriptBox["10", 
        RowBox[{"-", "3"}]]}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822983462611957*^9, 3.822983547509169*^9}, {
  3.82298362037705*^9, 3.822983623751202*^9}, {3.822996700815817*^9, 
  3.822996710129126*^9}, {3.822996763648779*^9, 3.8229967689445143`*^9}},
 CellLabel->
  "In[296]:=",ExpressionUUID->"57759d25-528b-4e58-9de0-473f0e7fa7ba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.19418006351395`"}], ",", 
     RowBox[{"-", "0.7939897238477599`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7549130603093653`", ",", 
     RowBox[{"-", "1.6895760872115724`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.8706064275341703`"}], ",", 
     RowBox[{"-", "0.14104829949370085`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.822983465456994*^9, 3.822983499990076*^9}, {
   3.822983532862257*^9, 3.822983547828642*^9}, 3.8229836252617483`*^9, {
   3.822996702802075*^9, 3.822996710468525*^9}, 3.82299677061014*^9, 
   3.822996822547626*^9, 3.822997512370604*^9, 3.8229978048661423`*^9, 
   3.8229978510328627`*^9},
 CellLabel->
  "Out[296]=",ExpressionUUID->"0073b68f-d42d-4b33-8820-cbf72408655c"]
}, Open  ]],

Cell[TextData[{
 "We can then compute the values for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"w", "=", 
    RowBox[{
     SuperscriptBox["X", "T"], "\[Lambda]"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "9dde94c7-61f6-4e06-94ba-86ec428e1275"],
 ", and find b from one of the constraints with a non-zero ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "85fe3e40-252e-4acc-9861-457943632d96"],
 " actually being an equality (rather than inequality)."
}], "Text",
 CellChangeTimes->{{3.822980687380495*^9, 3.822980759188776*^9}, 
   3.82299708516726*^9},ExpressionUUID->"fa2fed76-7ef8-45bb-88bf-\
f7dad0734bb5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wsol\[Lambda]", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"w1", ",", "w2"}], "}"}], "\[Rule]", 
     RowBox[{
      RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "/.", 
    "sol\[Lambda]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8229803676940203`*^9, 3.822980370015842*^9}},
 CellLabel->
  "In[297]:=",ExpressionUUID->"4bb2228b-5c54-468b-8f0d-318d0a1e1722"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w1", "\[Rule]", 
    RowBox[{"-", "1.9196102447608843`"}]}], ",", 
   RowBox[{"w2", "\[Rule]", 
    RowBox[{"-", "0.025164629891823775`"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.822980370853683*^9, 3.8229819978509083`*^9, 
  3.822983226978138*^9, 3.822983397195828*^9, 3.82298368393115*^9, 
  3.822996789359969*^9, 3.822996829437417*^9, 3.822997512396035*^9, 
  3.8229978510652437`*^9},
 CellLabel->
  "Out[297]=",ExpressionUUID->"5f3c2d21-375f-4cc5-a375-d01689ffe95a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bsol\[Lambda]", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w1", ",", "w2"}], "}"}], ".", 
         RowBox[{"X", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "+", "b"}], "\[Equal]", "1"}], "/.",
       "wsol\[Lambda]"}], ",", "b"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822980299440219*^9, 3.8229803357880507`*^9}, {
  3.822980380565118*^9, 3.822980395310096*^9}, {3.822984104177977*^9, 
  3.822984118529121*^9}, {3.822996837726273*^9, 3.8229968378944807`*^9}},
 CellLabel->
  "In[298]:=",ExpressionUUID->"12acf138-a12c-46d4-90ee-cb6bda9bf8fc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", "\[Rule]", "2.5235048826932087`"}], "}"}]], "Output",
 CellChangeTimes->{{3.822980309338909*^9, 3.822980336134239*^9}, {
   3.822980381167412*^9, 3.822980395758669*^9}, 3.8229820009555893`*^9, 
   3.822983227636537*^9, 3.822983397819415*^9, {3.8229836846273937`*^9, 
   3.822983710861951*^9}, 3.822984119837113*^9, 3.822996839539728*^9, 
   3.8229975124017878`*^9, 3.8229978510709143`*^9},
 CellLabel->
  "Out[298]=",ExpressionUUID->"ee6aefdc-4644-4069-bf04-05af893ffe99"]
}, Open  ]],

Cell["Now we draw our decision line and margins on the r-\[Theta] plot", \
"Text",
 CellChangeTimes->{{3.822997092894528*^9, 
  3.822997107733405*^9}},ExpressionUUID->"3cdd876a-61f0-4c1e-a3e6-\
e20a8bdb5b3d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decision\[Theta]", "=", 
  RowBox[{"\[Theta]", "/.", 
   RowBox[{
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2"}], "}"}], ".", 
          RowBox[{"{", 
           RowBox[{"r", ",", "\[Theta]"}], "}"}]}], "+", "b"}], "\[Equal]", 
        "fx"}], "/.", 
       RowBox[{"Join", "[", 
        RowBox[{"wsol\[Lambda]", ",", "bsol\[Lambda]"}], "]"}]}], ",", 
      "\[Theta]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.822997263298644*^9, 3.822997303650529*^9}, {
  3.822997350505608*^9, 3.822997355481245*^9}},
 CellLabel->
  "In[299]:=",ExpressionUUID->"e74cbda6-4468-43da-87fc-af120b2c9a1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "39.73831541726387`"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "2.5235048826932087`"}], "+", 
    RowBox[{"1.`", " ", "fx"}], "+", 
    RowBox[{"1.9196102447608843`", " ", "r"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.822997356346171*^9, 3.822997512426814*^9, 
  3.8229978510766993`*^9},
 CellLabel->
  "Out[299]=",ExpressionUUID->"c9e57d32-5656-4126-a544-cb2a68b7d7de"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "sepdata", "]"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Keys", "[", "sepdata", "]"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{"\[Phi]polar", ",", "supportVectors"}], "]"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"decision\[Theta]", "/.", 
       RowBox[{"fx", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"r", ",", "0", ",", "2.5"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822996981286694*^9, 3.822997002086546*^9}, {
  3.822997044093986*^9, 3.8229970542634706`*^9}, {3.8229973664961433`*^9, 
  3.8229973703958073`*^9}},
 CellLabel->
  "In[300]:=",ExpressionUUID->"9ac46b35-a8c8-4fb0-8acc-7c9eb3da12f9"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{0.8173894901710712, -1.8106507743179687`}, {
          0.11141961113123644`, 1.5623572642627543`}, {
          0.7895259946338514, -0.4847436665256791}, {
          0.18780314670602638`, -1.586537082861427}, {0.24136096745765045`, 
          2.998158602370644}, {0.06573875950878105, 2.043059003833555}, {
          0.5422466205096241, 2.6720828955548726`}, {0.23115450673602744`, 
          0.4904412673460606}, {0.3960060815485871, -1.301437826423534}, {
          0.7004737819422449, -1.8343692602173052`}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{2.071958612461975, -0.1723782891727108}, {
          2.075499316991622, 1.9299482374851298`}, {
          1.9636369806416225`, -3.067228247631557}, {
          1.85055696564651, -1.1506015446429476`}, {2.0583580269620114`, 
          1.8208924036580747`}, {1.8759165838390086`, -3.066332623351288}, {
          1.8751432242926847`, -0.6831305889201751}, {
          1.9171279990838217`, -0.2582252416616537}, {
          2.0558148892783366`, -0.25858522674350404`}, {2.1000521392274396`, 
          1.4295301271134075`}}]}}}, {{}, {}}}, {{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          GrayLevel[0]], 
         PointBox[{{0.8173894901710712, -1.8106507743179687`}, {
          1.85055696564651, -1.1506015446429476`}, {
          1.8759165838390086`, -3.066332623351288}}]}}}, {{}, {}}}, {{{{}, {}, 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVxXk41GkcAHDm1bEabbTVyjVEMiabFdsU3m+oZYyJXCHmN+MsUll2Cx1r
i1Q0ykpK85jSPbrwJJveUO4RSq2jhKlFlJgY5+7+8Xk+hsLdW0NpKioqbv/5
/9yDwrmWIZH20s+jHu6beFDZwuD6Mlxw/YZN5S12PJh9VvYHg+GHB5L//NHX
hge5JM1gDmMHZurZLA4y5UGUXdyuMYP9+IrLby8iv+FBy2RE5meDVCyWKH1S
GtxgXnu36aDBOXzaayagzNsN8mrFewcMruNfH8wLY4VxoeB2anuUxUMcatgz
9TCIA+G46dzHmAoc2y2rKNrvDNFys57Cgho8ufi++dqLm0Hd8Ijp23XP8bX3
/KWhOU6QvqiOmUe14DhNPUtaiQMI270eo/pWHNEpkXncBtj79Ihwt2kbvmbl
sJwTZAd399A9v3fpxI+288eqJWzIS4jsX+PbhfWrNdpuZVlDknjKY/TjO1zW
06G7o9ESVFq64K/4HiwmbEc/GxasjA3b58WU4wD7Dt8bLGPoVZz1WfDoPbZg
H/bb5qcNHPnOA6f3/oPvTWtbda2mAa9XZK6v34+/vjkeH3Vg8nF/hfBwtXQA
e0q3tDqVLyEWmq16jvxB3F7fvqFhxIioY4WgY2QIpwl53KpEJvl50H/MyPsz
bmY3XkvwtCSvy0NU/VnDeLcgecdJb2tSdKwyiKEYxs9f69ZWarFJ2Jy4Lpns
C+7UMDLJZtiR4JiEInrOCPZ1QaKaWCA/hJvLuIJR7KxzIKpiiwNp1GItiGMr
sBbX4pm6pxMpLUg6z0Jfcalx4ye51WaSoMp0r+/8imH71ayFds5EvSPeObpw
DHNXpFy4b8sh8iuGmeLEccw+7RPzUZtLMldpq5V4K/E0P/BpjAGPiHLCqgSM
Cdzcbxa7WdWd+GcGyugfJvDOwVVFmkPuZNwpXykum8TR4opC9MmD9Mgd9pWn
TOFgE58Lj99sJRI7S50GwTSu9D/iIOn2JNKjcZrhq2fwspAbz3kvvUiKd7Ar
UsxgC2uvdHaFN7HuyLue0jCL7xSdU3d96kOyzc5LG1xVwET9VfTKYl9yiKRl
u5aoAG3hnYxVpduIm453fq2xKuT/Te+NKPUjG6OrAjRTVWH9foH+Lzf8iVhX
aFyvUAV2tceyy9IAYlxxNYsXQAOzAfb4RfF2Ilpdzmwuo8Hbl/nzX58MJGEj
ak01TAS0PdJXP6UHEeHdL4zUUwi03txKFxzkk6gkzylOBoLmgrahjCQ+ifMs
fEU/g0B0aP6W8mQ+OaaISxdlIdAwDPl2xSk+KWArJ8/mIpgXoiPqFfOJ8sls
65WbCJR9qRnhT/hE1ExPq6xCMBRvVWtDo0jOpV0RyTUIeMGcCZ4aRS7Fyhyd
6xBIXQXM8LkUKV4qmqiTIYjUPXX8rDpFOvwXR7S8RND3qJ8zrkUR0x5tx+4e
BO9UJHUlKyiypjBe/7IcAe57MNlkQpH1R9uVoR8QiJsazftNKcI1zb3T148g
UDJ9YjmLIjGRDP3hYQRtjn7chLUUSbT9XXlvBMF61p7EMzYUOarR/SJWgSD7
u5RbN9dRJPv2pRPj4wh85IX0DluKSA6rhT+cQFDcUGc7ak+Rmx6hDolTCJYU
d0fRN1Kk0OiZnv0MgtiLygvGjhQpG1mpnJ1F8CJ5UYPtJor8C1kEUNk=
           "]]}, 
         Annotation[#, "Charting`Private`Tag$43556#1"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVxX0803kcAPDx08NJj0tXr2qbcnZmnl7OQ3n4foTbb81TsRSKzXMmEZdw
pUVS0SoX8dprsVRypAv3KqXv6cEJi0jKukTrQXm2GOLu/ni/3gbC2O1h2hQK
xeM//y89LJxvGRrtZLSkWZ6bJoCH7Qx3PwYXDTB6jlQfFsDc47pjDMYuVGM1
HtCZKgApzqbPY0Qht13rVq4+JACRY2LMBP0QCr0sSi+ME0D7dGTuMD0LyTcv
DisWCmBBdy9zgH4R0SM8jSpdBVD0RBb3mV6KVuPWa00LBVBxI6tbZHYH+RZk
eg4dD4YI1HbxS/wDlHdyC6VicTDsUxn3VVU0olHTgz8VmgaBrkE6841dK9qa
11J6y2QP5CxrYhUFt6NKNttW2343CLt97xPNnej6iqF5LJtAiHuULoxlvkJv
LMxKqDYBcHO/ns9q7mtkmJIYaMXxh6KU6H4Lvx40o2/AZ7vuArFsZtv4l7dI
pewIC9i+EyjtPXA3uQ99p9ThuIf5gVFCeJIvS4WwycWoVaE74J06b8eie+/R
iavWl1cl8GGrau+v5+I+or4DNozhWF/wfCcxodH60aGkW6JT+32g/4Ew7e/y
z4hRatcWKN4OZss717sEDSB/1oaDC9K2gS5SC5Rjg0j+gmr9MccbOAP+Exv4
w0irrD3SleoFXfWhWv7sEWT1fdJChxUeUH3i4R6GegSJu9ldMisehM9L7FEo
RtEMXGfVsLkQEp9SrVcwhs7P2pbbkRwwjzBRuAvGUTG7rtUpxg2ermAvStyk
Rl3TegcnolygtkJcyCa+IvONIo91Wc6QosXybn79FfFfMD0+zDmBrjKZ3Fc1
gRy4kc5Sij2orhjkylInUUh0428mP9tC7o9rdG7zNejl09ohmr0VSArCGwSM
KaTfKPV5/skM/HN3K/Q+TKGdVSW8lGNMmHQt0cjqptF+8pK0c4IGfaotSfWZ
M8jx2RBpMbkUih0t17YIvqFmx+6CM+mV98szEpdHmM4i0Ml3rnm5BGfyQ3iE
ehadpEZNH+fRsLWyqDSzZQ4ps3uCvGyYON+4sLyFR4FUy6ajrHtm+AjOzufd
poD1NW6zNN4Ke6zllzwx1IL6zrv6sgO22HlfQ8DyLC2g8pfONZjbY9k6oWGz
WguWnW3tPeWAsOGDqxc8A7QhKsfulr3YGUtM61nP6rShI2RZR3mgCw4f02lr
ZBGwNp8eHxPkhoU3RxlZZwjYnEDrwYiDRWKfma1nCbijn3zJgOTgRJ+qF3rn
CbD+83mw2JuDT6gTcyQXCLCcOv3WRcDBFZs003lSAjamTfc+FnOw5q+5zitl
BCw43aVqfsTBkmd62Q8bCGiVn/vcxSNxgTwm8ngjAd5ug2WbfEksT1C4kE0E
NL3nigoCSVyzSjLVpCCg3lhrICCGxEp/amT7cwJu34gd/CeHxMy+NS69fQTk
17qPvGsjsUVVMu2yigDq7ms33V6ReHNGtybsAwG5s0T8lV4SuzOllZ/6CTjp
XDsaMUbi+GgGbWSEgNQG4/H+lVyc6nBU88cYAd8iM6p467k4Y3FvR4KagCTd
twm//8DF+TfkpyYnCYj1yFfH2HBxcZpOxJ0pAoYGx6oVTlxcti1sS+oMAXsl
Xr+Yc7i4asPj9U6zBKgsy2wkXlxcN2akmZsjILx9/sSwHxf/CwvjRLs=
           "]]}, 
         Annotation[#, "Charting`Private`Tag$43556#2"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVxXk41GkcAPAxr0qa2lQSwpCIKB08qLzfmg5nuebnaCMjg0yJsK4u5Sw1
ZTTSgxXyWI3U0q4O3ghNjmKsepZKNAppE+PO7O4fn+ejywl1DaDTaDSn//x/
zmnO/E1HQmxc7e3+/KziBc8kTEcPph3uCQ07YbzEC+QN1eeZTC8clnljHU/Z
C3JIus48ZjDm9wxk/UP3At6OyGMTOjG4JSotZnzUEyQzQYJvOqnYoaDJWrHT
ExZ09RoO69zArFmnJzrZnpD/Ii9sSKcEm5e51lJ6nlB2N7WLt+EhFnHI4lxt
DwjEbTe+hNfhrSyLME0TCo5LjfoqysR48uC6Im8bNijrXjB8b/kKH6g/rXFy
uztcXtpknH9Ygiu93xY/dXADTpd7DWruxHfh16iBva4QVn+BE2r4N5b6vFeV
7HWBeycYbqvs3mKjEoOW7x7OkB8XMmjm0YNRSuHF1yX7ISFv1mXsywfcocoQ
mTc4Ak3SA49j+7DWCl6o2hd7MIjgRrsbS/Gl3wUVpQO28FEmpBY96ceapS1G
dxbuA3vp0VPXwj7jV6yXur4Ke2D/R/56be1B/MNR/DCTzoLBOs7Z56Ih7FAm
OW9psBM2qHRqsXyHcbyfU54mywaUscyve/QrLly5Qph72hr2DXtP6LG/4VVL
eIKkYAt4U3tEwdtkBMf1V0giAzdDZcozH6ZsBG99t70/1t0UuPMie1pbv2ON
iM1mHZZrwT88rpKRPYqHO9ojHjtpwsbA9a2OfmNYnKak1zWkBC+XmSyKtJJh
6wXGH4P1hmselSXcNEHjeMv8S6kGpctInIKxc/Pbcbz+g0GPeawuUe6OtT1e
MYEP/SiaEEcbEeltXUFe/CRO7g4r7owyI4J16opV7CmsEn3Gqe/cVsLP5jb6
Maexrz8vQ83WkngLDrUyPk3j6mNBwt0z28jk7qKpvOoZ3GouyWTIMemT7oqu
TZ7FbbeXaMy920lu7dik2eL3AwtUQrh1/SwiSoxUCTSdw1b6fySsbt5Dktn+
Dkg2h7kNynMjxfuIeXd+SXKLHPMaM8dX3LEjWUY3RS0ONHA/sbSmKd2BnCHp
WQ5VNFgaXav4SuhEnDTZRS/0FYD6Kb7EOesA2Xm88aBKqgLg4mVXNj9yJnmr
OfrNMgWwGaen+Fe7EP264uv7D9Jho/pQkE+5K+Gb1hq3V9NBijxihDluhDuq
2CY2RqCU62M7ketOOPe+M1OvIFBj+MiZV9iEl+A2a38VwZvui74uGWwS6Vbx
mpGBIFNUVXNOyCYpssjL/OsIlh9QPdubxyZlVlMzwhwEjGvNtMJyNpl6Ku+8
XYpgTm0b3bCdTfjtjPRnjQh616yaZ6pKkeyCY0FJYgS3xvYEHFKnSEFEK8u2
CcHh+pP16VoUebCSP93UiqCL+zLx61qKdHsvD5L8heB1SdL8cguKGPaps3r7
EDRulC3Y4kkRs4pY7UIpggu0NUH+P1PEOrFrKuATgt1tzs8zDlPE0TCnfGAQ
AQm/kzIWRJHwEKb2yAiCqkr/hQ9iKBK//dzU/VEEMUlXg/tPUSRxcW9HhAyB
hUeNeGUCRbLuFlycnERwf1Ij7Zc0itw6qxj4cBpBuNh2sPgyRUpdAnbFzyIw
y46yf3ONIhV6DVo2cwiGjxb+piSkSPWowZRcjkC0rV3Z6iZF/gWjUUo+
           "]]}, 
         Annotation[#, "Charting`Private`Tag$43556#3"]& ]}}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     Full, Axes -> {True, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 2.1000521392274396`}, {-3.067228247631557, 
       2.998158602370644}}, PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.822997060845477*^9, 3.8229973712940474`*^9, 
  3.8229975125143337`*^9, 3.8229978511822653`*^9},
 CellLabel->
  "Out[300]=",ExpressionUUID->"fd627370-44fc-4e33-914d-7c63905fe844"]
}, Open  ]],

Cell["We can also draw them on the original plot", "Text",
 CellChangeTimes->{{3.82299711180614*^9, 
  3.8229971191969137`*^9}},ExpressionUUID->"2c5cf1ec-d97d-4d2c-bc13-\
067fa2c68da3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decisionr", "=", 
  RowBox[{"r", "/.", 
   RowBox[{
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2"}], "}"}], ".", 
          RowBox[{"{", 
           RowBox[{"r", ",", "\[Theta]"}], "}"}]}], "+", "b"}], "\[Equal]", 
        "fx"}], "/.", 
       RowBox[{"Join", "[", 
        RowBox[{"wsol\[Lambda]", ",", "bsol\[Lambda]"}], "]"}]}], ",", "r"}], 
     "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.822997263298644*^9, 3.822997303650529*^9}},
 CellLabel->
  "In[301]:=",ExpressionUUID->"739518e8-41fe-498f-8b1a-d648f3d8a6fb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "0.5209390826753817`"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "2.5235048826932087`"}], "+", 
    RowBox[{"1.`", " ", "fx"}], "+", 
    RowBox[{"0.025164629891823775`", " ", "\[Theta]"}]}], ")"}]}]], "Output",
 CellChangeTimes->{{3.822997249842276*^9, 3.822997304574511*^9}, 
   3.822997512527205*^9, 3.8229978511952267`*^9},
 CellLabel->
  "Out[301]=",ExpressionUUID->"662011a6-edd7-4446-9e6e-2d72722eaade"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "nonsepdata", "]"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Keys", "[", "nonsepdata", "]"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"supportVectors", ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"PolarPlot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"decisionr", "/.", 
       RowBox[{"fx", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", 
       RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}]}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822982966741523*^9, 3.822983017155324*^9}, {
  3.8229841909463043`*^9, 3.822984249421977*^9}, {3.8229971304059*^9, 
  3.822997135497827*^9}, {3.822997309219988*^9, 3.822997326903941*^9}},
 CellLabel->
  "In[302]:=",ExpressionUUID->"8c0a27cd-0ef5-4831-b3aa-cb1a23f67122"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.0009402659049429163, 0.11141564362630568`}, {
          0.6985681983270928, -0.36790456437588814`}, {-0.00295604144687557, \
-0.18777988106197538`}, {-0.23888242209918228`, 
          0.034500797441814446`}, {-0.02990472311744523, 
          0.05854307847237184}, {-0.4835702248162677, 0.24533902079622932`}, {
          0.20390719257284282`, 0.10887728322031986`}, {
          0.10538241515767546`, -0.38172681750042337`}, {-0.1824956607100494, \
-0.6762831160175996}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{
          2.041251388907825, -0.35539451182767}, {-0.729497294004517, 
          1.9430725958833286`}, {-1.9582099623680669`, \
-0.14589014711693948`}, {
          0.7549130603093653, -1.6895760872115724`}, {-0.5094375357680065, 
          1.9943197246955076`}, {-1.8706064275341703`, \
-0.14104829949370085`}, {1.4543618707479875`, -1.18363578035018}, {
          1.853565067751745, -0.4895674667312021}, {
          1.9874646392084663`, -0.5256987415568544}, {0.2956806496520435, 
          2.0791324971956673`}}]}}}, {{}, {}}}, {{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          GrayLevel[0]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.7549130603093653, -1.6895760872115724`}, {-1.8706064275341703`, \
-0.14104829949370085`}}]}}}, {{}, {}}}, {{{{}, {}}, {}, {{{}, {}, 
         TagBox[{
           Hue[0.67, 0.6, 0.6], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1:eJwV13c81e8XAPBKZihJQ5EVqUihpHJUKq1vJUlKKFHKKCKU0EAyk5W9k72J
DrI32fu683NTESVZv8/vL6/363PvfXye55zznCN501rn9oply5Y5cCxb9v+/
fxY4rs4XsPGuob9xt0NkKf3UffEq0unUiyusrhmg3PP3t16StlDk9tx3zQKl
C0u2a5K+4NWTebjKFnd7TltO57PxzUKyfIWBE7oqPFKOI612zGdV4GNXXGdr
4XiK9LFnk1Y5X57j2z8PPF7ksTHZ9mRt6dXX2JvLPL+R9LzTWqnEBB/8uTos
LDGXjSIYGV7q4I/xKz2y03LYeHVBP8Wm8i2Klyu7ypKG3jcjxebvcMlovi0s
m42bxPmuzvCHYNJEx+z9LDaG3tzpeO5KOF5MNOxoymTjg7XLLt2ef49L1QsK
sqRtK551WcdGoruCl3V1OhtzlntHpj+KwcDuhcurSPfNVaSIacfiRGZ4+ek0
Nnb9TDz4SjQOHwk+kC5IZSPHG9ZOTYxHnQDNLWMf2PivgVs6ICABc8A0nJu0
7OnLXX23EjH1Pl0OktlY/1k0+iJPMqac6PQ3jmfj0poLe7oupOKXG1CmH8fG
psCWe8NSHzFXJu7B6Vg2TmZz1w9Nf8Tsq59tRaPZ6P4hdevn0HQk8gqY98PJ
95lX61qyzkIRzwM39oSxcdl4gXJ/bxYGbiw1+hnCxr8+n3syjmSj84mbnPrv
2DgnGff6hHAOht2cYQz4sTFCMOHrroJcXJ67p+K+Lxuji84Gd4vnYapkr/zM
GzaWCYh/dfTIQxOtwyl/vdi4gZlxOU0/H0s8vc0ynrMx+Mr2os//CnDFWasr
9EfkeW82rHE/XIJ/5L1dmLZsPOezmuqcUYJNU8Zbxh6Qv//L0v7e1k+YWbkK
yy3ZqHDK1VVheSkychLzpG+zkaX9K/JAVRkaXFXgc9Nh40q67/SOhHKUiFf8
w3eBjdo3o7IvDZZjjpjybZ9zbFSRePDBfl0F8s3GtTprs/HtT2fejy8qUKJB
6sfiYTYOWV9uajStRLZo+cZoOTZq7t5uOSJdhfWbzkRly7ARqQ2GCdeq0Jrv
eH6pJBsPrnj9+ubbKkztsnhfupmNs9ML+g0rqvF+637TW6vJ+DWNFDxBqcZf
F32bzv0m0NhHe9VoRC0q/uR7E/mJwN1P5g4pCTbiOl6XFs4iAs0orJzrRxrx
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

            "]]}, Annotation[#, "Charting`Private`Tag$43712#1"]& ], 
         TagBox[{
           Hue[0.9060679774997897, 0.6, 0.6], 
           Directive[
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1: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
D0PzoE8oBxu1B6Yqjn3CYfD/5GdeM8DE84etj6qGjFD9R0vnSmDiYdtPQVuv
j4GFx51C5nEm8q8YTCt8PAZDUfXfJQ8zca+55YqbbmOwR9xP7dJ+JroxA+Xe
FowBlo6j93YmKnPGCr7YPQ6ny+/1lXMxceWtrPj1s+PQd6dUj6+agXEbovhH
3kzCsb/MizR9BiaYu+v++DoJMwY/VW+dZ+C3/64KGqZMgseT0F0lmgyMluDs
SBmYBFHMaX+lyED2OInFFRr/INfQWzxChIGfK7/IBnBOQe7y4D+Nf+nIceng
p/qiKRD6fu1cyVU6npIS90qtmwLi2etj+efpGPPxSo5nF+VhmStJGnQ08VGz
OM6YAjMdD6k3h+iodPZe/1XpaXhUJfWqZi215zGFucM9pmGsQm6vZAkN01XS
Ht7Wn4HV3IIZ/dI09GRKbg03mYE/JyUquLfTcFrw1puuBzOgJL789k5hGjoP
3710wmUG2pQ/H9bmpGH00afVVZkz0GEo+1OnYwF35VyU6hCehSd1ikbbPy7g
a8WsTU2Ns/BiTMFScGAeO6ZFckO6qddHYosl2ufxuY/ZbdOxWfi81rtqX+08
Jo6dyu1lm4OgoKQp+dx5lB7iUQmWmoPLa8/WLfOZx3E2oUs77OfgUvXqw6Fq
8/jsD6344o55wEu0Z8sC5/Cj4kGpF/vm4Zxk+kcLzzmsPDyr9vXIPPzaKh5a
7zyHu4a3uVSdnYdaW9cmd6s5rL6YuXnm8TyULqjkVZ+aQ52F8HNHiuahWqOt
xWh6FjWdrER/3lgAj92zh0aVZzEVafnTdxdgp17umoqDs7jC27BBxnoBvLZO
WkXsnsV+Beljnu8WQKsCO8+smUWpuMQ83sQFuCm2NUO/awYNTgnxIRsNdhYX
+N63nUHeD+HbBb7SwDX98IvkpGnUK7qx49V3GhjsK7o1Hj6Nkiz3Y71xNLij
aaOx9cs0Vr9KCPHJp4HktOGm53bTGOySNx85QAPt9TIq/05P4+aer+/s9tJh
49Tv4am+KaQJP7nblkWHnDGWrsmaKXyWxGV0tJAOOsq+YaocU2h+88sNnwo6
vO48KHZk/B9u4gkzO/iXDlekjTKd0v9hySbmvS0kHbTL+XWzzv5Ddqg6FqLE
gEGNxHSXZ5NoXpzTcTqTAXdbgyvIknGUFMp6WJbPgBm2bNXE2HHUK44ugVIG
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
jyqKx/w89j9WdXWn
            "]]}, 
          Annotation[#, "Charting`Private`Tag$43712#2"]& ], 
         TagBox[{
           Hue[0.1421359549995791, 0.6, 0.6], 
           Directive[
            RGBColor[0.560181, 0.691569, 0.194885], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1:eJwV13c8VX8YB3AlkpJQEUkSWUlLIh4VDRIpZUVGWjZJmWWUUhQlDVFmZiK7
x57Ze++97ji3jOR3fn/d1/t1zr33nO94vs9H2MxW5/pqJiYmd2Ympv8/08t/
WJz4xsC0W1ssw2Zi89LUyk6Kkv5ZXlK0aHkd30jYda0mTfnkwNJreRcjMyul
ulIZuF+yPI6TwwsZbhOHkkm3vQjS/WTpi/e1xn67ki5535i7veApdmt226uS
Llwrcbp4QxAG9A1GryU9XDOD1tmvMCZ9a3BpCgOf8H0W5rB8jdTSkKMepOcS
0ksjuN9iwyXXsP2kG3++ZRHHd1hiuMrvSTID874bmazdEIF6hUPc0qRfrHtw
V84sEh080/WrkhjoYeSxwTjrM/75m77lTyL5fe3Ldq8topF/Zv8zX9KTlPw3
UTkxuC30SO5G0kvfD1G/borDHyG+GlwJDJw3CmW8z/uKyQaiiU+/MvBCvsyC
L3ci7sC/5f/iyfuvSg9fv5mEptc4D7TFMbBJbZKLmT0VH2gleimSXqOxa2Iw
PRVdjqs+exfLwN+rmjjyTb7hnTi5ljMxDLQ1uBdmkpGGvr57Tlh+YeC2duF9
+tcyUOvta+eIzwzsv3JrjHX9D2QaK7rZEsnAwboNkUkZPzA/QvfxvggGNrzw
dBhhz8KCWdf0qA8MVAs8zLKYnoMll5d60t8zUO6rLdwxycWhVdrl+I6B8Xq2
+5rX5SGn5YfO0rcMfO++81mAcT7Kp66sDw5h4AcrZd1K5gLcE2B87H4wA4G6
2q9XrwBb9BdlDF4xMExdeno2qQD3tx4y2hBEXv+4lnWVXiF+GtvUv/8ZA71O
xOwdTyhC99/W3Q+9GLirwwNSdUpxs+97Y4YHA+3vMicHJpdi5Z/wn2buDHzq
z8+4wV6GsUJH+KUeMJCNsS9qdVEZ8j5yPe/gyMDDC9VxPbIVGLX8eE+XBbke
O3xu83BUY4yRb8W0GQMjJXt3ON2sxhBfU+35a+T4bPq67ldxNcrcPsy7bMTA
BVkbftMHv3BcYU9w/iUGdhBbtQXHalCCo6id/yQDAwYfxZmb1OOOJSm5ahUG
dlbkhZcH1GPLNwXfu8oMXL7tc00spx43+hxayjzKwBBTNp7mzQ346oWbIbGP
gRJbtatmKxvw+x3+dxoCDGTZ1KGw9WATKle41N2fIfB3392zTUyt6Pkve2P4
JIG7i+lfHkm2YkWfn2D+GIEDH2s5pS+1Ykh2W+LUAIEbWNRoVrGtuN1SMo69
lUD9ogOF0ZptWGduU6KdT6DhOWOfybftyDVmbM38hMCxklNDLpJdeMCU6ZC3
D4FDVdzely924elppZFlLwJPBhZPS7t14e2TquuH7xMomWHEKK7pwsySUk/H
OwQuu78rCLPrRpdz8/2fNAlkZG2y7Urvwf16fi6HN5LPa9nnnyXQj6ezREGC
ncCnTvzCp/b1I4aWHOdjJTCb4RVbd6IfJfK3rowt01GBpmjbeqsfm3RHnM/P
0JGvLuRmWmY/fhmMUpOvpmPUUMifTzoDqPFJb9bPm47c1vMW+30HkWt3seqw
Bx2PSaUzDr4dxC2tKwvHHtBRddeqof0JgyjmHuLbb0fHJ0tqhUINgzh0feI4
5SodE854bizePoRHfX7pHTxCx7MWiSsi34ewdEOLj/YoDXf/IwRku4dx8Ifk
yNd+Gl6f3+y3mzKMxUdlVjF10ZDL0LGJe80Ixur2OLyro6GzTcqqHqkR9Kry
vhOURd7fNbJpj+sIKmYuSj3yp+Fk3mmx53yjmKjQyuK/h4YbxyZmHpwfQ7U/
otLKwjQMvmUvGGk6hkesO9Vm+Wk4f6v3YYHTGNr/LjeAjTRcPynYPPluDJ/y
mipHE1RcL/p63czoGE6cdnvxsICKxBE2/i/u4/iDcvOr/yXyuv/Ws9+iJ3B0
Q80W3vNUnFNcK5v3YwIXGXHaEaepePlwwPuC8gn8vVtTMUaBipW3OucyJibw
uOYubq+dVHJeQvl19k5i89k98tZTFExseTh67vskbru+XeqoBwV95N2EZHOm
MOxIecHJexT84Mfy07xqCs39/hiq21FQ1DLoWlDnFFLapuI1zCi479H6z82L
UygVZduy4xQFuZzC49kUp7FO33KejYOCUpInbwnkTKOvED8vbd8cJvDtX6hP
m8Er52UP1wvNYatLouL14hkc6dTxjuacQ3kBwVxK0wyKdJYXHZ6bxSTabuMZ
YgaFBM5cmkmaRWsXrTQ3uVncx2EznycxixeeRjyey5zFHWmXXJkEZrDDUmQL
a/ochq2xWV27bgbPHeLder94Do+te345eH4aLcOOFQ82zuGUCv8DltZpHGrK
3PSOOodvV6KOPQmaRvXS6BUNXgpGfX8jvmHNNG6zuZ1heZGCW/ryOvePTOLy
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
ON6POfYfqedTlw==
            "]]}, 
          Annotation[#, 
           "Charting`Private`Tag$43712#3"]& ]}}, {}, {{{}, {}, {}, {}}, {}}}, \
{}}}, {AspectRatio -> Full, PlotRange -> All, DisplayFunction -> Identity, 
     DisplayFunction -> Identity, AspectRatio -> Full, Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-1.9582099623680669`, 
      2.041251388907825}, {-1.6895760872115724`, 2.0791324971956673`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.822982997598936*^9, 3.822983017704062*^9}, {
   3.822984213126554*^9, 3.822984249870015*^9}, 3.822997138183972*^9, {
   3.822997318125251*^9, 3.822997327303424*^9}, 3.8229973760970783`*^9, 
   3.822997512624506*^9, 3.822997851310142*^9},
 CellLabel->
  "Out[302]=",ExpressionUUID->"0f709f72-d3b0-4f0f-8b8a-79ccf2f1170f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explicit higher map to higher dimensions", "Subsection",
 CellChangeTimes->{{3.822997531303759*^9, 
  3.822997543022784*^9}},ExpressionUUID->"46fc5f4c-3ffa-48b9-b86e-\
56250f6201ff"],

Cell[TextData[{
 "There is another way we could get support vector machines to work with this \
dataset: by projecting onto a higher dimension. We now try the map ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Phi]", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{"(", 
     RowBox[{"x", ",", "y", ",", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"]}]}], ")"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "16787ddb-9d94-4d3b-b064-75351c2d5831"]
}], "Text",
 CellChangeTimes->{{3.8229975499878893`*^9, 
  3.8229976002086363`*^9}},ExpressionUUID->"6a498b52-ba54-4e92-916a-\
0a93b2a9eda4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"\[Phi]3D", "[", 
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822981714997316*^9, 3.822981752475871*^9}, {
  3.8229818834395657`*^9, 3.822981884942523*^9}, {3.822984286288579*^9, 
  3.822984296242984*^9}},
 CellLabel->
  "In[238]:=",ExpressionUUID->"6861ff20-3faf-41d4-9b08-460b06dff3b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sepdata3D", "=", 
  RowBox[{"Map", "[", 
   RowBox[{"\[Phi]3D", ",", "nonsepdata", ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822996523810607*^9, 3.822996533247594*^9}, {
  3.8229976431917677`*^9, 3.822997649976454*^9}},
 CellLabel->
  "In[303]:=",ExpressionUUID->"e9c83070-caa9-4aa8-b412-39a8ec08725e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Plus\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.19418006351395`"}], ",", 
        RowBox[{"-", "0.7939897238477599`"}], ",", "0.6681255786421237`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "0.0009402659049429163`", ",", "0.11141564362630568`", ",", 
        "0.012414329744635947`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.6985681983270928`", ",", 
        RowBox[{"-", "0.36790456437588814`"}], ",", "0.6233512962025725`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.00295604144687557`"}], ",", 
        RowBox[{"-", "0.18777988106197538`"}], ",", "0.035270021912685266`"}],
        "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.23888242209918228`"}], ",", "0.034500797441814446`", 
        ",", "0.058255116612093004`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.02990472311744523`"}], ",", "0.05854307847237184`", 
        ",", "0.0043215845017533505`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.4835702248162677`"}], ",", "0.24533902079622932`", 
        ",", "0.29403139745410833`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "0.20390719257284282`", ",", "0.10887728322031986`", ",", 
        "0.05343240598437615`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.10538241515767546`", ",", 
        RowBox[{"-", "0.38172681750042337`"}], ",", "0.1568208166234662`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.1824956607100494`"}], ",", 
        RowBox[{"-", "0.6762831160175996`"}], ",", "0.49066351918847156`"}], 
       "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"Minus\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2.041251388907825`", ",", 
        RowBox[{"-", "0.35539451182767`"}], ",", "4.293012491755352`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.729497294004517`"}], ",", "1.9430725958833286`", ",", 
        "4.30769741483269`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1.9582099623680669`"}], ",", 
        RowBox[{"-", "0.14589014711693948`"}], ",", "3.8558701917433478`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.7549130603093653`", ",", 
        RowBox[{"-", "1.6895760872115724`"}], ",", "3.424561083102818`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.5094375357680065`"}], ",", "1.9943197246955076`", ",",
         "4.236837767158944`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1.8706064275341703`"}], ",", 
        RowBox[{"-", "0.14104829949370085`"}], ",", "3.519063029522216`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.4543618707479875`", ",", 
        RowBox[{"-", "1.18363578035018`"}], ",", "3.5161621116107655`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.853565067751745`", ",", 
        RowBox[{"-", "0.4895674667312021`"}], ",", "3.675379764871138`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.9874646392084663`", ",", 
        RowBox[{"-", "0.5256987415568544`"}], ",", "4.2263748589785`"}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
       "0.2956806496520435`", ",", "2.0791324971956673`", ",", 
        "4.410218987473746`"}], "}"}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.822996519520288*^9, 3.8229965603602123`*^9}, 
   3.822997495918667*^9, 3.822997650569477*^9, 3.8229978118370256`*^9, 
   3.8229978615675993`*^9},
 CellLabel->
  "Out[303]=",ExpressionUUID->"52011027-32bc-4b19-a92e-7f7b9a0b997f"]
}, Open  ]],

Cell["\<\
We go through the same process as before to set up the dual optimisation \
problem:\
\>", "Text",
 CellChangeTimes->{{3.822997603357193*^9, 
  3.82299761824004*^9}},ExpressionUUID->"38d37acc-0bdb-4c4f-991d-\
7486c167803f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"X", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"sepdata3D", "[", "\"\<Plus\>\"", "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"sepdata3D", "[", "\"\<Minus\>\"", "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8229948029074793`*^9, 3.82299483227779*^9}, {
   3.822994895491407*^9, 3.822994909677128*^9}, 3.8229956280829763`*^9, {
   3.822996584986902*^9, 3.8229965874163322`*^9}, {3.82299766668358*^9, 
   3.822997669056814*^9}},
 CellLabel->
  "In[304]:=",ExpressionUUID->"3397a542-4cbb-467f-b59f-150bb2a6caf0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Y", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"sepdata3D", "[", "\"\<Plus\>\"", "]"}], "]"}]}], "]"}], ",", 
     
     RowBox[{"ConstantArray", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"Length", "[", 
        RowBox[{"sepdata3D", "[", "\"\<Minus\>\"", "]"}], "]"}]}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822994836114833*^9, 3.822994836484962*^9}, {
  3.8229948876520557`*^9, 3.822994899517584*^9}, {3.822995205087777*^9, 
  3.8229952055487947`*^9}, {3.822995684929783*^9, 3.822995692354609*^9}, {
  3.82299659035343*^9, 3.822996593018736*^9}, {3.8229976718363543`*^9, 
  3.8229976747718363`*^9}},
 CellLabel->
  "In[305]:=",ExpressionUUID->"9c85da43-9e4f-4a00-8f3b-7699cf29f1da"],

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Length", "[", "X", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822980054946007*^9, 3.822980060322157*^9}, 
   3.8229956746813107`*^9, 3.822996631988751*^9},
 CellLabel->
  "In[306]:=",ExpressionUUID->"50633e20-1ff8-4749-85f5-888a52caad1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Lambda]", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"\[Lambda]i", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.822736499045179*^9, 3.822736503094264*^9}, {
   3.8227368604226017`*^9, 3.8227368624132338`*^9}, {3.822979903555831*^9, 
   3.822979935021117*^9}, 3.822996633439192*^9},
 CellLabel->
  "In[307]:=",ExpressionUUID->"b230f7f3-e6b6-4875-8729-d458c00b19f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"max3D", ",", "sol\[Lambda]3D"}], "}"}], "=", 
   RowBox[{"NMaximize", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox["1", "2"]}], 
         RowBox[{"\[Lambda]", ".", "X", ".", 
          RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "+", 
        RowBox[{"\[Lambda]", ".", "e"}]}], ",", 
       RowBox[{"\[Lambda]", ">", "0"}], ",", 
       RowBox[{
        RowBox[{"\[Lambda]", ".", "Y"}], "\[Equal]", "0"}]}], "}"}], ",", 
     "\[Lambda]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822736506293404*^9, 3.822736542931388*^9}, {
   3.822736582192131*^9, 3.822736601610004*^9}, {3.822736708592511*^9, 
   3.822736715634078*^9}, {3.8227368193715153`*^9, 3.822736908461323*^9}, {
   3.82273778357137*^9, 3.822737786462852*^9}, {3.8229800257185307`*^9, 
   3.822980088764784*^9}, 3.822981320132049*^9, {3.8229843572529182`*^9, 
   3.822984360581049*^9}, {3.822984410881886*^9, 3.822984411013171*^9}, {
   3.822997683716748*^9, 3.82299769812615*^9}},
 CellLabel->
  "In[308]:=",ExpressionUUID->"4ec81ba1-354b-4de1-9c11-a62b8f0849fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol\[Lambda]3D", "//", "Chop"}]], "Input",
 CellChangeTimes->{{3.822981972357045*^9, 3.82298197421145*^9}, {
  3.822996803910034*^9, 3.822996806800394*^9}, {3.822997711345305*^9, 
  3.822997711682067*^9}},
 CellLabel->
  "In[309]:=",ExpressionUUID->"a051ad17-0515-473b-80d8-7f7d0fd25b11"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "1", "]"}], "\[Rule]", "0.2534435060986108`"}],
    ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "2", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "3", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "4", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "5", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "6", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "7", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "8", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "9", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "10", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "11", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "12", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "13", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "14", "]"}], "\[Rule]", 
    "0.15486347243173237`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "15", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "16", "]"}], "\[Rule]", 
    "0.09858003366687845`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "17", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "18", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "19", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "20", "]"}], "\[Rule]", "0"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.822981974510281*^9, 3.822983138607081*^9, {3.822996809008205*^9, 
   3.822996817905559*^9}, 3.8229975123639917`*^9, 3.8229977121202927`*^9, 
   3.8229978267133627`*^9, 3.8229978673442383`*^9},
 CellLabel->
  "Out[309]=",ExpressionUUID->"ffc31bbc-6c94-4f93-9013-39397b5c7044"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"supportVectors3D", "=", 
  RowBox[{"Pick", "[", 
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"nonsepdata", "[", "\"\<Plus\>\"", "]"}], ",", 
      RowBox[{"nonsepdata", "[", "\"\<Minus\>\"", "]"}]}], "]"}], ",", 
    RowBox[{"Positive", "[", 
     RowBox[{"Chop", "[", 
      RowBox[{
       RowBox[{"\[Lambda]", "/.", "sol\[Lambda]"}], ",", 
       SuperscriptBox["10", 
        RowBox[{"-", "3"}]]}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822983462611957*^9, 3.822983547509169*^9}, {
  3.82298362037705*^9, 3.822983623751202*^9}, {3.822996700815817*^9, 
  3.822996710129126*^9}, {3.822996763648779*^9, 3.8229967689445143`*^9}, {
  3.822997722392871*^9, 3.822997726206066*^9}},
 CellLabel->
  "In[310]:=",ExpressionUUID->"f7e4c92a-2ff1-4321-9d6e-4b45ea73c2b5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.19418006351395`"}], ",", 
     RowBox[{"-", "0.7939897238477599`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7549130603093653`", ",", 
     RowBox[{"-", "1.6895760872115724`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.8706064275341703`"}], ",", 
     RowBox[{"-", "0.14104829949370085`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.822997728769926*^9, 3.8229978306244707`*^9, 
  3.822997871126337*^9},
 CellLabel->
  "Out[310]=",ExpressionUUID->"d4e453d5-5f52-4140-b02f-30514786d41d"]
}, Open  ]],

Cell[TextData[{
 "We now compute the values for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"w", "=", 
    RowBox[{
     SuperscriptBox["X", "T"], "\[Lambda]"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "3fbe1833-bfe7-4db4-9d89-b411e9a9c48b"],
 " and find b from one of the constraints with a non-zero ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "i"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "2af9da74-da80-4325-9f43-a43df079e287"],
 " actually being an equality (rather than inequality)."
}], "Text",
 CellChangeTimes->{{3.822980687380495*^9, 3.822980759188776*^9}, {
  3.822997897228054*^9, 
  3.822997897832984*^9}},ExpressionUUID->"fb1441ae-dd99-4725-a8f5-\
f79776112d7c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wsol\[Lambda]3D", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "\[Rule]", 
     RowBox[{
      RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "/.", 
    "sol\[Lambda]3D"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8229803676940203`*^9, 3.822980370015842*^9}, {
  3.822984473441307*^9, 3.82298447399157*^9}, {3.822997944173113*^9, 
  3.822997947265462*^9}},
 CellLabel->
  "In[317]:=",ExpressionUUID->"71f2efef-129b-4c6a-a3ee-630dc2dfaec7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w1", "\[Rule]", "0.018282310588797195`"}], ",", 
   RowBox[{"w2", "\[Rule]", "0.07432662649770455`"}], ",", 
   RowBox[{"w3", "\[Rule]", 
    RowBox[{"-", "0.7079166836448212`"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.822980370853683*^9, 3.8229819978509083`*^9, 3.822983226978138*^9, 
   3.822983397195828*^9, 3.82298368393115*^9, 3.8229844773832207`*^9, 
   3.8229868712559566`*^9, 3.82299791069234*^9, {3.8229979477416058`*^9, 
   3.822997955283526*^9}},
 CellLabel->
  "Out[317]=",ExpressionUUID->"ef9beaeb-6787-4327-a3b3-613ef8ec360e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bsol\[Lambda]3D", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], ".", 
         RowBox[{"X", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "+", "b"}], "\[Equal]", "1"}], "/.",
       "wsol\[Lambda]3D"}], ",", "b"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822980299440219*^9, 3.8229803357880507`*^9}, {
  3.822980380565118*^9, 3.822980395310096*^9}, {3.822984104177977*^9, 
  3.822984118529121*^9}, {3.822984493849442*^9, 3.822984503882687*^9}, {
  3.822984736416507*^9, 3.8229847552277107`*^9}, {3.822997918905621*^9, 
  3.822997919388515*^9}, {3.822997949459992*^9, 3.822997952744218*^9}},
 CellLabel->
  "In[318]:=",ExpressionUUID->"58bf686c-6ec9-4e53-819a-8cc46e29f9cb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", "\[Rule]", "1.5355418817693718`"}], "}"}]], "Output",
 CellChangeTimes->{{3.822980309338909*^9, 3.822980336134239*^9}, {
   3.822980381167412*^9, 3.822980395758669*^9}, 3.8229820009555893`*^9, 
   3.822983227636537*^9, 3.822983397819415*^9, {3.8229836846273937`*^9, 
   3.822983710861951*^9}, 3.822984119837113*^9, {3.8229844981799183`*^9, 
   3.822984504349407*^9}, {3.82298473713524*^9, 3.822984755646729*^9}, 
   3.82298479290993*^9, 3.822986875137107*^9, {3.822997927602071*^9, 
   3.822997955840975*^9}},
 CellLabel->
  "Out[318]=",ExpressionUUID->"87b8aa27-bb56-4f86-92b9-038525426cd4"]
}, Open  ]],

Cell["Now we draw our decision line and margins on the r-\[Theta] plot", \
"Text",
 CellChangeTimes->{{3.822997092894528*^9, 
  3.822997107733405*^9}},ExpressionUUID->"432d1d91-2cf6-43da-9e08-\
9c1be9cb08ec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decisionz", "=", 
  RowBox[{"z0", "/.", 
   RowBox[{
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], ".", 
          RowBox[{"{", 
           RowBox[{"x0", ",", "y0", ",", "z0"}], "}"}]}], "+", "b"}], 
        "\[Equal]", "fx"}], "/.", 
       RowBox[{"Join", "[", 
        RowBox[{"wsol\[Lambda]3D", ",", "bsol\[Lambda]3D"}], "]"}]}], ",", 
      "z0"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.822997263298644*^9, 3.822997303650529*^9}, {
  3.822997350505608*^9, 3.822997355481245*^9}, {3.822997962105638*^9, 
  3.822997983816794*^9}, {3.822998072927631*^9, 3.82299807583996*^9}},
 CellLabel->
  "In[325]:=",ExpressionUUID->"aa1c82e1-22dc-4e7c-8d15-f8eb5cb588e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "1.412595610618105`"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "1.5355418817693718`"}], "+", 
    RowBox[{"1.`", " ", "fx"}], "-", 
    RowBox[{"0.018282310588797195`", " ", "x0"}], "-", 
    RowBox[{"0.07432662649770455`", " ", "y0"}]}], ")"}]}]], "Output",
 CellChangeTimes->{
  3.822997356346171*^9, 3.822997512426814*^9, 3.8229978510766993`*^9, {
   3.822997975155055*^9, 3.822997984455784*^9}, 3.822998076638815*^9},
 CellLabel->
  "Out[325]=",ExpressionUUID->"9a216dad-c395-4b09-be65-5ae462914da4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPointPlot3D", "[", 
    RowBox[{"Values", "[", "sepdata3D", "]"}], "]"}], ",", 
   RowBox[{"ListPointPlot3D", "[", 
    RowBox[{
     RowBox[{"\[Phi]3D", "/@", "supportVectors3D"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"Plot3D", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"decisionz", "/.", 
       RowBox[{"fx", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x0", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y0", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822984574319694*^9, 3.8229847031036263`*^9}, {
   3.82298474624844*^9, 3.8229847531479273`*^9}, {3.822984833697484*^9, 
   3.822984862854591*^9}, {3.8229979986699743`*^9, 3.822998011153727*^9}, 
   3.822998048708482*^9, {3.822998092863194*^9, 3.822998093087064*^9}, {
   3.822998142115275*^9, 3.822998148414166*^9}},
 CellLabel->
  "In[328]:=",ExpressionUUID->"898703ac-1d6e-4d87-8310-8111ca61d604"],

Cell[BoxData[
 Graphics3DBox[{{{{
      {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], 
       Point3DBox[{{-0.19418006351395, -0.7939897238477599, 
        0.6681255786421237}, {0.0009402659049429163, 0.11141564362630568`, 
        0.012414329744635947`}, {0.6985681983270928, -0.36790456437588814`, 
        0.6233512962025725}, {-0.00295604144687557, -0.18777988106197538`, 
        0.035270021912685266`}, {-0.23888242209918228`, 0.034500797441814446`,
         0.058255116612093004`}, {-0.02990472311744523, 0.05854307847237184, 
        0.0043215845017533505`}, {-0.4835702248162677, 0.24533902079622932`, 
        0.29403139745410833`}, {0.20390719257284282`, 0.10887728322031986`, 
        0.05343240598437615}, {0.10538241515767546`, -0.38172681750042337`, 
        0.1568208166234662}, {-0.1824956607100494, -0.6762831160175996, 
        0.49066351918847156`}}]}, 
      {RGBColor[0.7926498, 0.5499369, 0.1278459], PointSize[
        NCache[
         Rational[7, 360], 0.019444444444444445`]], 
       Point3DBox[{{2.041251388907825, -0.35539451182767, 
        4.293012491755352}, {-0.729497294004517, 1.9430725958833286`, 
        4.30769741483269}, {-1.9582099623680669`, -0.14589014711693948`, 
        3.8558701917433478`}, {0.7549130603093653, -1.6895760872115724`, 
        3.424561083102818}, {-0.5094375357680065, 1.9943197246955076`, 
        4.236837767158944}, {-1.8706064275341703`, -0.14104829949370085`, 
        3.519063029522216}, {1.4543618707479875`, -1.18363578035018, 
        3.5161621116107655`}, {1.853565067751745, -0.4895674667312021, 
        3.675379764871138}, {1.9874646392084663`, -0.5256987415568544, 
        4.2263748589785}, {0.2956806496520435, 2.0791324971956673`, 
        4.410218987473746}}]}}, {}, {}}, {}}, {{
     {GrayLevel[0], PointSize[
       NCache[
        Rational[7, 360], 0.019444444444444445`]], 
      Point3DBox[{{-0.19418006351395, -0.7939897238477599, 
       0.6681255786421237}, {0.7549130603093653, -1.6895760872115724`, 
       3.424561083102818}, {-1.8706064275341703`, -0.14104829949370085`, 
       3.519063029522216}}]}, {}, {}}, {}}, {
    GraphicsComplex3DBox[CompressedData["
1:eJx0vXk8Fe///38cFdkqayqtWlQqlL1Gkp0W7YtoX2jVrrJGiQqJ9mRPm4pI
jTZlCZEKCce+71u23+uTeV7P723O790/c+vuMuc597nOnOt6uM7MpK0HVu7g
cjicqSM4HMH/tpMKLZ4PDAzQsB0RcVav9GERtdPhaVCsfQ/h3ryLNdski6ko
USkn+4IOwqUO/Zj/w7KYagg+ulPRpIXwwIFJ54y9iqkd//ZTS/h4H/uUhM/Q
nkf4g3HxUspDShieTfiMh0Os7+qVUBzmH/DHWssjRp0h7Sng87/cbHGNB84j
/NWaSt2O9hKoh/BF5aoeu1V5UD/hH4+c/Za/nwfHS7gxN3WsxUMe+CE844rM
TrqSvB7hqybYPlVRLCX/B68DI+WXPE0rJp5h63Z3u/dk4RLiGbjInKc//Q1K
iGfgPok9k4ScyXERLm1mZHfyDfFA+I0839jabvQMfMLuPxxrdR7xDDykQ8ks
6zCPeAY+0/3oNf0nPOIZ+BOpd0UvannEM/AFwWIzp88oJZ6Bv563ziFoeynx
DJyiH7wVvV9KPAP/ZNEofLaQ+CTc7Le2VZN8GfEM/jq/tpTvf1dC2gF33LRo
XkkfeoYtt/bCKStt0h8IP38y9+OnY+S4CBcTnjRC8znxQLhvgN36qEbijXC5
qa8ejJtdSjwDv/VcsMFndynxDHyy/jJNgdBS4hl4eNYNlyMlpcQzcOUtFenl
CmXEM/Dn9Spy6zaUEc/ANRzP2KYGlBHPwN+IpDzUzSE+CV8SJN3xeEQ58Qye
Gi6meyrHYT8AfkR+dM7dVqwbeHf4NgXJeaQ/EH5W/ckuNztyXIQP+fT3WUcE
8UD4BSvD3t3lxBvhEryrhgWTyohn4P4HC69YWJcRz8DHDMwooG+UEc/A73g7
TFX9WUY8A1ccl3QgRKqceCb9JUo0QXZ5OfEMfK7W2iEXLpUTz8BffA627PlC
fBKuvaYh0H5oBfEMPiqMwmbVRZP3BeH7fjQfta4m7yPCm7YvTMqaSvoD4Udb
PUWWbCXHRXiP8/dVL+8QD4Q7j5x4d3oB8Ub40Lv7qoPkyoln4F7KcWpiq8qJ
Z+CjErlnz14pJ56BB5hafmlKLyeegY/NC5LcNryCeAZ+f1f5ptylFcQz8Gkd
88KNXCqIZ+DRbo7N8W+JT8JVpb7ozO6pYPVnHl04xCkjKriM1Z959Da/tNEK
RWWs/syjqyfJbbs8tpzVn3m0/dOtjwTWlbP6M49uXfS484h/Oas/8+iTX7sX
V2SVs/ozj+7buPTSOvEKVn/m0a41V36kmlSw+jOPHn7y98SF5ytY/ZlH+wjN
2PfkfQWrP/No6YAjLycNVLD6M48OUqQH/HQqWf2ZR49/LmI67EQlqz/z6JDF
a/xPvKhk9WcePTPr/p+apkqW52w69936Q3sCy1mes+kNy0NfF3wvZ3nOpov/
NA21HFXB8pxNb7fXXZ5kUcHynE3X9HjcUL1YwfKcTR+4mFMWklzB8pxNt42e
MFdOsJLlOZs+Fb735AWqkuU5m+aox37oOV3J8pxNu30UkNj/qpLlOZsWsbJY
V9xWyfKcTV8pCQxeqVLF8pxNyxwsq/toX8XynE3f6J+roRFVxfKcTU/0Pu0c
WUE4DceRflZNeoYPeV8QvkL8nPWNVPI+IvznzdQIMSFSJ+GbZsq2nl1Cjotw
3ivbhc3niAfCdxs98tiWWIm+mH91uV3fcrvQM/w7vN1gnPGCKuIZeFfL5Z0J
h6qIZ+COzgVPZz+uIp6Bc0dO77lTU0U8A/e8c3jpqOnVxDNwceW3l123VRPP
wH1fD89vv1tNPAMfbbpacffvanZ/pj7oiMdVuFay+zNlkrpOYH1SJbs/U5nr
QszSeivZ/ZlaVdl4baFWFbs/U/lHdYqfHK1i92fKZojHzMkxVez+TJX5Zjv4
N1Sx+zO1d9J4etisanZ/ppqe7Bl+clc1uz9TDoteWtU+qGb3Z+pvOufO5uJq
dn+mnDaaV2WOq2H3Z2pozXVV/fU17P5MeZ0odXxxrYbdn6mRQnM/T8uuYV+f
qcSuivWhJ6vY12dKz0M1RC62in19ppJlzjZcaKlieeZRpiEpmr1zqtnXZypL
VcZ1/75qlmceteadzdfi8GqWZx5VsCxazqqsmn19pmz/dNp+mljDvj5TlXZL
ojU217A886h9PT4dkUE17Osz1XwhX2/cjxqWZx51fPQ0Lx/JWvb1meoJO5TL
WVbLvj5TzgveTDjiVcu+PlNCH4X3ln+uZY83qJiXSb3bDlSzxxuUpoGY0Y+H
1ezxBvU2e+1V4yrSHwjXt31QkKBYwx5vUF8aG6Yq2xIPhFue1T549zbxRniO
2PmEUfk17PEGtf7mtyFustgvgRcpKSzrWIkegW97tTto9+Va9niDqjZ8UZqf
RsZ5hB/IHVC2EK5jjzeo1m1mJ2iDOvZ4gzrZEvBexbmOPd6gBpx4YiFv6tjj
Zyrq8I27k3fUsMfP1FyBimr/+zXs8TP18rLKfKE/Naz+3EJpjT9z9uSYWlZ/
bqHo6C9fatfUsvpzC7VUR1rK2q+W1Z9bqJSULZuzMmvZ42dq2bqH4fpidezx
M5Vb0dH8wriO1Z9bqA1H9XWnu9exx89UsaDP+aB3daz+/J9v37ws0f469viZ
qpk4dexZ7Xr2+Jk6+OTgjqZj9ezxM9WxMPHJ1uf17PkgFTzXQb9kQy17PkhN
f0tfsrqO8yjgj8xFf37KwXE/cJWCNZM0R5LjIjxuT/C+KHPigfCFXfUvx10g
3gh/d16Lc/lTHXs+SBnJuJsKcOuJZ+BfH2T5H1lUTzwDX6k6rqj8VD17Pkj9
StqltC6unngBbr3s+ZHU1nr2fJDiFfa/0Z3XwJ4PUrvtTIWf2DWw54NUw99r
KydFNrDzDSqozqL87nLyviB8wumguZLe5PwSHjq8/KRbCukPhCsFzvvYMZQc
F+FPpjlK7NEnHghf8PLzuoKzxBvh8UukHli8rmfnGxSVbV1Pd6Jn4J9sojRU
5zcQz8BNG9udQw42sPMNKuvM4nTZRw3EM/A1Yt6yF6ob2PkGlX/jl03P1EZ2
vkHZKCk+tN/ayM43qIq4A+1FdwiHfIy6Gjnd09qQvC8Il9E8kp3lQs4v4TeT
345bQpP+QPjE1SK7XvagZ+BhpaufTdckHgifffh+T5BDA/EM/CmnfqnYswZ2
XkepX9a8craetCfHl6jglt+k1Eg8A9eLzlTctrORnddRydpjD+QGNxLPwM1T
dsYbFTWy8zqqalaeQKF4Ezuvo2a19k+Tnd3Ezuuo/QmK5stMm6iPM85NK4jt
o2Gb3P1NVuRAMeaDDHdVjW7OWl4M7cnveatH/P7phDkV8Ky+rwKj7pay90+t
8y3e+Kq6jr1/SiYtQf1cWh17/9SEzNhJ53sayf/hdb7+uBqvqoP1w/6uqade
XF1VxG5Pj1qn49U1tJTdnso5aPHo+vZ6dv2Uitn+B0ViTVSLS4WdfUE/DduK
MM+CM5OLgZOfN0W5JbutLGW3p1oVhhwWHV3Pbk8NjHSaM1yRnBey/6Uf2o1t
pXD/8PPnOhkKMjK4f6hXxTthzOnVWD/8XqZLyvHrs5rY7emVB0J2jEstYren
fX3k1t+3LWXXQ1lpHypqEK5n10PdMS7gvtNvgv6fBNuib3ULT10W0fsda1/w
/8y/ks7UP8gKuCOi9+r/MM6/ksYO37jt+SMRPX9FE9//Z/6VFKco2ZGZKKJX
9G8/ZP6VtFovxbMuTUQv4F97Mv9KatnoNHZ4gYjejX+czL+SfI5rPJ5aI6LH
/DcR+Gy/Bj39bhG9i4PtyXGkPg7NsRYW1fMZ3D/hO1M37TwtJ6r3c7AewodU
SHVfnyaqd2WwfsLvC6R5vVggqvdi8HgJX6TgMv6bgajer0E/hBdoaj2rtxJl
6uTANunkqqYlItsITwKvlk7qldXp6Bm29TfrTw77jZ6BX4wLEZtSi56BT8vZ
eJf6i56Bf2qQVN00XJR4Bm4rkvrxxGhR4hl431TntdemQ51JicBvLdaseaYu
SjwD19rc6JixFD0Dzz0RNqJ2FXoG7uC/OVhoO3oGPvKp9ALFI+gZ+KO0tM96
LugZuHmly4bNV9Ez8Cqudv3Je+gZ/NFznK6sFxEl7YBvMtWYckxelHiG7d8d
DS99Z4gSz8ADnEONn2iIEs/A59/eVJBmiJ6Bf3sltb9qNXoGvv97KmfoDvQM
XLTJ2W+SA3oGHimqNW2RK3oGvnR606sNvugZeKl+uNnx++gZuLO19R+/p+gZ
uMIpmUNPafQM/PW1dMGvGegZ+LpnrgHVhegZPM0tTNFKMULPwL92OaWXr0HP
wPdKa27h7kTPsBWa19g8/ih6Bh5iFuam44aegevv2iy3zg89A//jIh3lEIye
gTveSdO9+gw9A5dPcMl8lISegcfmam1NzUTPwK2am9oq/qBn4M1iER6CDegZ
uPeMLWMm9qFn4LMMZB/piokRz8BTtnyl1o8lPAl83PWSKtV0R8/AF4anHl3t
j56BF7x3Fj78AD0DP/5H86ZPDHqGrczfRuWH79Az8BiZ8KTPWegZuKWKtVVZ
EXoGXmcuU8FpRM/AL+5OP6HQj56BT3NzFdUWFyOegX+8q31nzTgx4hm47evm
eUdmiRHPwPt/RHy4rC1GPAO/2bJlTbQJegauJSFX/WUdeobjltDefCniPXoG
Hr1aesKnb+gZuOmhtGclxegZeMUlF4P+RvQM3DVC6+eYAfQM20kfm/ZoSIgR
z8DfFIX3WimIEc/AN/ZYXz44W4x4Bt4tKzvZW0eMeAZ+TfXri0hT9AxczdLN
KHk9egaetUcnn7cbPQO3d2+xGziOnoGL3I8cGOuBnoFHJNr4agagZzi+c1Vh
C0ZzxIhn4OOGWH+ZP0KMeAaeMEFm44rxYsQz8DU66fX2ymLEM/C2Na5OF3XF
SB3Arx7Wlgo3Q8+wnePTHPphA3oGnhYZoVm8Bz0D3/NpS1rvCfQMfGiJrLW8
J3oG/qD3a9OC6+gZ+OLR7q4rw9Az8EI1XdkDL9Ez8NPLWiO8PqJn4KP3RelE
5KBnOI7GgKY/HgvFWOO6pETvmPBDIeZirHFdUuLMDOsh7zaKscZ1SYmfq2Wu
F+4VY43rkhK3D/2q9PekGGtcl5TIneSWKHtBjDWuS0q8o6uzTC0QPcNWd11L
ybJwMda4Likx70ikg12sGGtcl5R47LKN0IVPYqxxXVKi1EO5G6HfxVjjuqTE
Z8kZs9+XirHGdUmJFjx3+k+LGGtcl5RY26e7skdAnHgGfkG+rUxuFOFJUO+W
pdqenafQM/A+m+Yx0hfRM/CbjhGP5gWhZ+AagVv0LCLQM/Dc57I5e+LQM/DD
mV93nE9Gz8Alat26gnPRM/DoYbpedBl6hq3p5FaF363oGXjFwqinXVxx4hm4
23rbJTKS4sQz8ElHR/9QmSROPAN/eyVzt+U8ceIZ+Mbo8z17KfQMvPvzQh8P
S/QMdWW0uqrseoWegduN0Pno+hk9AxeZ1bLm3g/0DDzMMLI6sRw9A1+y1cYx
rw09Ay85IzeiQ1CceAZ+JijjvqSUOPEMfOxL9/lzJ4uT4wEen6X72UxFnHiG
7eq61vW79dAz8Fahh3Vuy9Az8CtTtp67b42egStT8pJv7dEz8NQNWSH5jugZ
+O5jHhqdXugZXp8K/pr/ox09k3H9Gzf71iHixDPwU3k6nJHS4sQzcNn2Ft/Z
U8SJZ+AvRkZNNVEVJ56Br5ht+2rHYvQMvMFotJnLcvQM3GtbZuGdLegZuNK5
8wdf70fPwD/dWCj46wx6hu222LZrbZfQM3CB7IczRt1Cz8Bv1299rfwQPQPX
GT7G0jQBPQP/pfiteGcKeobXebJczs1QTZx4Bm5hlyG7TR89A6/xcI88twI9
A/d4oKt7ywY9A1ekWzNeHUDPwN/nR9nmnkXPwK07bNuavdEz8N5R8h4St9Ez
8CDlLPlZ0egZuLqJR7TRa/QMPGf7Imp7KnqG7SGn9m9OeegZuPit6O23q9Az
8Idx2zrjO9EzcJOcMRd/DJMgnmF/EwZslGMPomfgb8aMTso+h56Bb1TPXNno
g56Bd644Xy56Bz0Dv2a/8MSMR+gZuOqFNpGliegZeEbIw9u2aegZuF3S1nln
89EzcJHf8h9uVKNn4GGdWavjutAzcAMpz6ocIQniBXjJHOp0k6wE8Qzbs6Yd
4uLTJIhn4GN3PrqntID4JL8X77xdzdAAPZPrzaOoH1Mfo2fgs1Ns9+i/Qc/A
U8tG91qno2fgOzlZPqcL0DNwwXEekwJr0DPw+xqLXrzoRs/AF1q1G34TliCe
gRfsj86rl5MgnoGfvLjNTmS6BPEMXCZszMA0dQl8PzP8+btvV5csRc/Alxd6
KtqsQs/A67uoOMdt6Jl8Hkp3mgQdRs/AZ8x7/PulM3qGnw9sbDt3rVacndfp
3Tr+UDLmrzg7r9PT9tsamjFcgp3X6f14LK9ZO1qCndfpOaRmpQrNkGDndXqj
Kjw2K2pIsPM6vccCVJOeIXoGbqbQ4bJ5tQQ7r9Or1nwkc2q7BDuv03NftT0i
4IgEO6/Tm3JwrM5zFwl2Xqf3ziv7a+ZVCXZep7c5/IJN3T0Jdl6n1/Ner1X4
KXqGbeCfTveptITe/v/bTWwfDdtK9fqNSS8hh+QkAZeLvCqp+lhEz27w/xRw
3m2tTLVTmJ8Afzbr2uj3zqLk//B7AZIP2/Z9x88F4Mluyx4W/ve+gP/D9urJ
zl1FgRKEw+ukLL+lez0O64f9Pdli7CF8XYTdPiky2f/v6Y2i7PZ6GdXLUqa0
4nUVfs9GyOqZ/X8+4/557qdhu3VIvfntYBG92MH/U8CVu/2H390vStrDz83i
liVwisVJe9jKRHce40ZjP4ffO72QmvHjDu4ffn7VW3/Cki24f6i3YnJwyKZG
rB9+r+9w6M2UJxLs9kmfA29sXexHzi/5uXSS/pydhzHvgv1sa7p/Teu3OLse
vWdyprbWr/nep0n3t3fd63Drp9i5ev7NnclzH/RT7FxdJud77e53/RQ7V18h
smRUcFE/xc7VLyx+pl7Q10+xc/WPJyZskh43QLFzdc5Tb2cL7QEyzwGuWdkT
dn7dAMXO1R3G702njw1Q7Fz9yepfzV3+AxQ7V6+8ZCin+nyAYufqUz6+0N33
bYBi5+rWPZO3hjQOUOxc3Szoy4eGYfj+BF794twaUVn8P3h1fufVmjuAnmH7
uqt79IjxAxQ7V2+fu3uRse4Axc7V5+36sc15wwDFztX33jG4kHBigGLn6iG5
MY9bA9AzyefEJn2f/RI9A5c3uNy9Iwc9A7c63Tf+bjN6Bm6Ut2BynRCHL1cv
a6t7ISzH4cvVnUeGGE2dxuHL1SfM3pi/eAGHL1dPNJK0tzZAz8DXb0sZOGWF
nsGfzfgJhi9PDVDsXP3Gau99DYHoGbbfL/VcmR6HnoGP+Lgn1iYXPQM36flZ
ENSKnoEvln/gVC3M4cvVi+ZvkBo2GufnwB2XjwqbPJ3Dl6vL233RpNQ5fLl6
nMe5tI1LOXy5+qoH6tYnVnH4cvXmt/VN/ts4fLm6T36I67PDHL5cfVbHRtkM
Z/QM/MsoqciaK+gZPC0+HRPo346egS9cP7KoYjiHL1fPd/h8SFCew5ern7hy
dsjEGRy+XF0mesF1XQ0OX64e87lOab0hhy9XX176IPHoavQMvK5/wzLf7Ry+
XP3CGEne4yMcvlx9unqKQ5oLhy9X/7jCSajqKocvV7e117gx5D6HL1cf8GyY
Pekphy9XvxUSSi+k0TNwraRNKzdkoGfwMbIuuF1Lk8OXqz8S2uC5xojDl6ub
Thk19sgaDl+uXrXoy6PLOzh8ubr7hnN60Q4cvlx90jH1nC+uHL5cnb5av6Pc
Fz0D3/QopEsgmMOXq3d/2eg1/hmHL1e/XiY5XieJw5erz+ekPl2byeHL1b+N
dV7i8IfDl6vv19D8caWew5eri1o17n7Ui56BR+wP60kRFSCe4bidbtTdiTzK
4cvVFWIfqCS7cfhy9YRvGz7y/Dh8ufq6+lFrB4I5fLl6u3BK9dgYDl+u7qvo
5Kj5jsOXq8/T0xixOgs9A0/f2HD/UBGHL1ffczx0vk8Dhy9XF/Lb9Dmqj8OX
q4c8ltrwWUyAL1dfnJpaVzpWgC9XLyp3PseZJcCXqzsKaEkqaBOf5PjkFZpC
tEzQMxxfk7G6sfxzDl+u7r29Pn/Bew5frj7TKcR+5TcOX67+5eZGzoFiDl+u
viNO0s+rkcOXqwvkpEyN6Ofw5ep3G5xefRQXIJ6B64pompWME+DL1fOmNhb2
/eeBnasfXxx2cIyOAF+uLr15s6CGqQBfrv7shHSA1XoBvlzd0j9txsHdAny5
eu0Tl9eXjqNn4J5pWpaR59EzHIdN57lmzyYOX67eJ6nhFjrA4cvVb8xpkH0v
IcCXq2uahkb+URDgy9Vzd2zS7ZktwJerH3aWypTTFeDL1UfeTrWdb4aeYRv9
yrlt+QYBvlzd5Lumh/0eAb5cvbKxUf7iCQG+XN1NNDw6zEOAL1efNN2a+hAg
wJer0/oy2UWhAny5+ibr9O29L9Az8O6Trp2jP6JnqDcrNOVGl7IAX65u/85J
WWahAF+uLlKokaRiLsCXq0d0Nay03CjAl6svlQ4r37tXgC9XL5m7+YTHSQG+
XP2cmbRoiCd6Bj5uV9rtpOsCfLl6vIvLvMIwAb5cfe0drQ/dLwX4cvW2+KbV
sp8E+HL1q7nhVarfBfhy9TnN1qeXlQrw5eppYrISdi3oGfjuGV/veQpwiWeo
S2+VlMHufQJ8uXrhgdQfbqcE+HL1U17Oe+5fEODL1UeHa/a+CRTgy9Vfvm/0
yQ8X4MvVV/4Jm9QZK8CXqzd1b34hlYyegV+SkTGalyvAl6srqaTnmZcJ8OXq
n81d7fa0CvDl6tt3aw+4c7l8ubqAW/PV4FFcvlz97t0IRXoily9X1329Ja5g
LvFJXj/vh6xp1yL0DK//lLu5/meEAF+ubjFe2qktToAvV6/RSpMc9VmAL1f3
XO0SqvxDgC9Xn3pIS9O0XIAvV393qSl1Z5sAX66+JSJ8s6sgl3gG3vvBuumu
JJcvVw8qknFNnMTly9U1etJl8uZx+XL177JuEe0Uly9XP6SqoyO5jMuXq0tY
tnydY83ly9Uf7om0MbNHz8CN3W1adzmiZ3idic/CAowqBPhy9Tfpm5W2twvw
5eobqqQTnYZw+XL1LsF0y9tSXL5c/doE15L4yVy+XF1VR9vhhwqXL1fPWtM8
rFUPPQO3OxwRNGI5ly9XH+6zZfbsLVy+XD08UpY23s/ly9UNPn1dseMMly9X
Lyl2K3O+xOXL1c/16hy/c5PLl6uPG906/HUUegYerxZ162c8eib729JExU3h
8uXqyqfDs3NUuXy5emqA9Y6mxVy+XH13jEyX2AouX64+NCP9opINly9Xv1/t
qmB4gMuXq1NDdZ5uPYueyTx4Yov+OW8uX65+Ujcy9+YtLl+uLrfOZverh1y+
XP3FEbme7wlcvlx9xeUM7+YULl+u3hDlPlEij8uXq3sl6z6fWYWegc/gtS41
6kTP5PNTQrt6mi2XL1e/rdR8eslBLl+urr00QsLmHJcvV/9ls+W+ow+XL1c/
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
gS+IVCsL7UDPwLeU+JX9EYT7LPWS70dfOHPDc54neibft3v513PPNfQMvLB+
w4XgYPQMfNi01xcKnqBn4POsx16UfoOega8POH3RIhU9A3fJKLh4/id6Zt8H
FTwD/7HolldXM3oGPnCs10tlAD0DV3qy6dJeMfDQRLhVZeKlB/LA2wh3nKDg
/Xsa8C7CQ9ee8ZaZT3wSnnm50NtyMXqG73V1zSpTufcJPQOfst1ANS8bPQM3
vxWiKlmMnoEf/T5EzawePQO/I7ZDze0vegb+xeCT2hshqCeL8GbHqfM7pMl9
tzjs+6CCZ+BL68vn754LvJjw/VMNF9zXBV5FeODmsAX5JugZ+Ptrw9Sl1qJn
4LVfd6qbb0fPwKWHfVZ3P4SegS9aNF3j7Vn0DN+T252vXDCC9PMuwv0kfQqM
R5LXJTzRtKHAWYHUSXi5i+XvhJnkuAgf8frx71YN4oFwzVaJwtlL0TPwrbMO
FO5YiZ7Z90EFz8Bf3pz756cdegb+J+fyn5Gn0DNwYbGmPyYe6Bm4qsHyIhd/
9Ax8k+PTotf30TNw9xcji9seo2fgT+oOFisnomf43mGe53G3c3roGbjgu59u
ryzQM/DZ3RruzRvQM/A1KoHuM3ejZ/J95z1d7tuOomfgkffXnb/lgp6BZ+e9
Op97GT2z74MKnoFPNT3pYRSFnoEvc8nzcIpDz8BPJGh5xn9Ez8CDW4I8W76h
Z+DpM/96zipCz8Dbt264sL0OPQOfcDPhwu1u9Azf4zTReKfceAY9A3c4MGnO
DC/0DPx2uPMc20D0DDy5qGTOjVD0DLxJTn9uTgx6Bi6/PHiuWBJ6Bq7vyZ23
9Ct6Zt8HFTyT++V0vZ8XV4megdPzpqg0taFn4NW7XVWUuHBfvibCpe6Xqmwd
AbyNcN28Jao3xwHvInzHqBDV70rAewm/bDJETVyDcPL96FflIj+tX6Nn4KUK
+35e/4KegYutSfuZlYuegS/wmfVreCl6Bm6d7PVLvwk9A/fsr/11ug89A3+m
bp73QoTcn5DDvg8qeAY+NFwsf9pU4MWEzymyy9+iCryK8HVyX/MDKfQM3GWZ
csE3c/QM/KGHd4HIBvQM/DtdX7BkF3oG3t9p8dvRAT0zh6Gn5L/KKaMLPQO3
Sn/hJETuA0zyNz3HITLOelKkTsJDdY86n5xIjovwTIdc5xhl4oHwrugFLrXa
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
4y7qu7XtZ89V6JkZp1HzbAOzpTag54L/kXMy40BqrfRy36Bgtudm6rmsx23F
CPQM9UvIv4148gg9w3bv2Pbn2s/RMzOOpZIVZtOfXqFnZtxLTZq4LXX5W/Q8
jan/zOQbuQUf2DlnB3VaIFBz8TH0zIzDqV+CmUvST6NnZtxOqQ4btmytM3pm
xvmUj/DCDbzz6JmZF1DVIg477C+hZ2YeQS0Vf3iw6yp6ZuYd1L0RvNOu19n9
mT/nZOY11Jf3QTrDi9EzMw+ipnzKMvQvR8/MvIk691lo5YRa9Az156cs2hzV
hJ5hq55+dPeCDvTMzOOoqxnRR5J60DMz76Pqs0rPmglgjsHME6maJyUlT5+j
Z2ZeSRnFjK7XiUfPzDyUCn6xrCv5LXpm5q1UX+x5wZUf0TMzz6U2xL+RKExB
z8y8mHr5uk1+dyZ6ZubR1Mi3s6a24nNeYD7Il3My83RK81Bp2QkFzIWYeT3l
e2RMk+AUzIWYHIBqOLqix2cG5kJQv+kJz2Fj5mAuxOQMVNgpelSoGjsX6qIE
znSMm6eF+RuTY1CbzynPeL0IPQ/yAWqj9Syvic3ombnPGxVnszXgYQd69hvM
TyjJbUH31XvRM3OfPMp+R1b0OwHM3wb7Tx/1ZZfQK3MhzN+YPIpS3Lvow08x
zN8G/fdQ5+yOZmyVxPwt/3/knIVM/eETlH2qNqDnV0z93Mnbg47YoGeo31rx
Zkj/DvQM9SdMy35yYR96NmXql1Ea/lr6EHqeytR/aJZe8t1jfD7pn9QxNdsQ
yLUg/xygFVbGa57bjPP0IczvNfs/7fT1wnl6L+Ph/Nj56WJ4/SHrH9OVj3+b
6cjOVweoewf3X1kUJcFqz9E7EHbdve4ZX+6aJCJisej5LVInWQf4XcW8zWgM
PPcE10kaLj0ZnB/fTzi0nx4s1h4/H9rjOsmbL7UemH/vJxzan5L82j5rGbTH
dZL1U/8+eNvQTzi0/+ri3XF7D7THdZJUQELIvOHIyTrJVovOEW7AcZ2k37DT
ocFTkEP7I9skupzvAMd1kpXHdMKkFyGH9sk5GV2tr4CTf+T5O0x7st7Pe21i
eNdhbM9+jgy0B273Ytnfn/WkTrKf4s+OEXu9kUN7G0nPPsUhcD9GXCepqrkw
8nc48UPaXzCt6ts8CtrjOkn3iL5Iy/fkvJD2z12M+wPGQ3tcJ5k3+m1U0m9y
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
q4XrQijB6uG9rFe1gKcKWUkblZI2dXBdCKU721pHT6yD60LItiboRO8DdYCn
CuXsLn53NqmO9PUh48IPL3qG2RsVkf5JVB89IONb8sIi0qeK6k8e6Y8zP1tE
+oFRfeLUJUduvikifdeo/uJtRE6HdsWI9Fkkuv2KH1187IpJX0YSJ15w8ETk
xvRi0v+S6oXtPvySieSkzyjVV1wxmTR7vJz0c6V6xSA3v/RdctI3l+qbEhM+
jIqT0744RK+3aW0S8V1O+kuRv0e4eMm+XWP6F6N2Tf1fib6q9mXa7ZXFpF8a
1Ws8DXWMrheTvnRU99BYuuBUYTFyaeorSfSGc3evi7vKmzjw/eiOTjp1cEGO
nPRbpbp23qfXr7RKSF9bqvsv7dthvE0Jon2tmvSOXz1cIw+XkH7MVL+878nt
nqklTb97LZmfcbteB+1MRspJfziqB0ZlBgV5yEkfPqp3kXQqanNfjno09cUk
+tWs5QN2V8lJH1kyf+LYNmfmTPxSQvr1Ut3ybMHl2E6lpC8y1VN696/o51ja
NC5+H/yUh1vNL/iXNsVfRp7jGJV5G+lMKCF9BKmeukW6+sDeErSxqU8n0aep
dY3+/riE9BUmz1Nc8iqwz5CKUtK/meprFxa5Xe1dRvphU72OHZigv7SM9DUk
/g1vCD+i+Dm9lPSPpPq3UW8s1vuUkr7RxC9hPb9gZaf6MtKHm+rB3Uom+A4t
J/0piQ/HF9b7PC1ZUEb6eRN/i61mXXjZQsTS/t//6f+8B1mNLPu3Lyfpb030
/dIDZofeltM+zURvuSRzV4MeS/sNE/14Tcf0NQ7kPUJOdV3P5Tqfj7O0/yvR
A9UjF9j/815J+pgSvcu539eTW1TQ/pFE7xPrP/rmHuKr+b6ItycWHOzwuIL2
8yP60Demmcd+kM/z71+xrls7qIZV0v5qRLdUJLtu3FRJ+4QRPWWv5h3ZbeKX
CJ9/3hdajon/t88m6VdN9LtnvMVuxSztu0x0855Su2KjCto/mOiPIrucnbOo
gvbBJfp4tKro2dkK2s+V6GmZDwaMyaugfR+JPmdnoPqpY5W0fyHRP7YumiN+
Vkn78BHdOWjglS3iKtpPjuglJjsqysZX0b5oRF8bnWq+YHcV6tHUh7vpPkSO
GWN9/u2DSfpJE/2T45G8hbUVtC8y0V1Lc40y+1fS/r5EL99stAatqqR9aom+
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
HpCilYUbXyX+8/5u0mwekKIWv3s7f3ARCfK/IYZfFPWbRIL877hhAV56+0SC
/O+n6baGQ06KBPlfw0OPxq6+IxLkfx+EuGV5J4gE+d8ZiX1dr74UCfK/1e8K
vid9EAnyvz7fAw9/ZEWC/G9fnemdGhpEgvwvOY/9U7P5QYYCt4yuOX9IJMj/
DjtVty8uQCTI/2bfDtXLuy4S5H/XP198U/FAJMj/tpUbjNZ6KhLkf4tGWCiW
1okE+d+9M78e3PdXJMj/dtkQ1v6illiQ/310dElYfFexIP/reMNwbP4AseS/
P/P5X3IuemyzeYNFrr0fXQ3MEAnyv38kbsMfvBMJ8r/nnfo+zyoTCfK/o3cU
LKiqFwnyv3fLHt9YPEwsyP9OE3uM2mUlFuR/y7uZvgyaIRbkf73HyJyil4gF
+V9y3nhs8/kEDXw7xvGUhliQ/33xVcHe6SwW5H9XaoXtfmEqFuR/d5wdu2D+
VrEg/9s++lvVFm+xIP/7ICt87+kzYkH+l5zLDfO/DYcfqx+3Fwvyv4HX3C/d
WiwW5H8nTk3Umh0vFuR/i5ZtDtn0XCzI/5LzqGH+N3XUWHzotFiQ/9X5afl0
+m+xIP9LzlWG+d/XXcsHWXHkd+Lzv8cHhahn2jKC/O+Evo/d4teKBfnf5ucV
8/nfLOtlBXmrxYL8L1esM+uAhZqk3X/7kakfyPtutVJ1tJjsX6bP63cT2NI5
UUVkvzN9nu7p97Nmy3w52R9NdbW4iaPLA+RkPzV9Pu7ffmVD5n5yfSXVW7aq
ikNJxWS/Nn3e9VkcubWmbwnZ303121W/8ZLlJWQ/ONWH7pqinhtSQvaP0+ed
6R3H+kkzSDw/qX7P4hqK95WT/elUN39Rc6z/CznZz06fd9mnV/1Z0VBC9r9T
fU6P6CnvzUvJfnmqf7j397SNWynZX0/1JeNsPifeKSX78enzMVemtedJdxL/
T6rP27TguZlTCdnvT/XPf27oXg8uIecDUN3VV7GofX4JOU+APk+3PzM6VPCs
lJw/QPU/c9Zmz1ArI+cVUN1LHtMpFZWR8w2o3sZDtHyEZxk5D4HqJ5jp927F
k/NCybhkeFf79Baj6krIeQtUZ260cwgfUErOZ6D64WFO57qsLiXnOVBdPeWW
/MQNoldQ/ZTD90FMUSk5L4L6gR6/8zXnBZH431I99JjxvBe5ZeQ8CqoP6Ljh
6lidcnJ+BdWjQuOr7tqScya/U33kiBYjexwl5z02UD0h1WG/fxo5V4Q/b9PE
xtP3/hNy3uYvqoe/f/7W+Dc5p5TPgwxZpW8cMKqMnO9B9eh653WttpBzNSup
PsY7ImZHZBk5P4TqT/R+NFZWl5HzRshzH78YciIge0U5OZ+E6g5P3hdYXSPj
lVP9jZ2J6cMC8vlqqi/4tGlzny7k3EU+31G4JiEpeB45V7OB6suVrdpoBNDz
WKhecXjWrD1SlpzfQv3A9W01G46vYcl5L/R5Pc3p79bb7SrJ+TD0eWp3+0a9
2pgKcp4M1XPHKNC2rRXk/Bn6fPx2KuZPL1klOa+G6tu7i6YGda0i59vQ5x1X
uGiPZxvyvXQ+Qbs23npeO7GSnJ9D9UbVN13XA5XkvB36vLuQvv7QxftV5Hwe
qveYE5+tXV1FzvOh+s1itc4H+lUjnf/O/6HPu0sG+i3r31WS84Ko3uu6s8Mq
gypyvhDVw4ZGnPswo4qcR0T1Qcn1ctsTVeT8Ivp8tP7VS6v9vmpy3hHVXxzd
NO9IQjU5H4nq9h0Srv5sqCbnKVE972ar6nXDa8j5S/R5OmXaS98Nt6rIeU1U
f/2u/btCOeFfT/VZK12NZ/WoJudBUf0td2ddmlM1OT+K6k5eypiR56rJeVP0
eV09+FPACfsaNOm/86mo7pHUp7DRp4acZ0X1BlsPU4/nNUj3v/OvqL7nY9Lm
ErVacl4W1cVr2j5xlNSSc7fo83qrZqbz/Ohqck4X1X+f7xj+sq6anOtF9X2m
y79bDqwh54BRvWX8/XH3V9eQc8Oofnzy7yPGN2vIOWP0uR+4zL9rK6Naci4Z
1bt8+7Jyx8Jaco4Z1UP2m0ZVBtWSc8+o3kdn62+nN7XknDSq376UPClbh56r
RnWzgZqnrOzqkKKpz1aTjpXWm+otLUkdMu833ncYZTC7lQbxXdRX9PkwukMX
Nw3i06j+lKsLH7WP1FfzfqPNXWbkUAtyfd5v3MyIy5g+TYP4Ruof5mwUj/l5
ndRj837j67FHr9pHaxBfSvWTN92chz0ln+f9xsgJL+fpbCTx8H4jb/GBygF7
aN011d12jt4z1ZfUsfN+w0vt9cJ37zSID6d6j+5eNd/LNIhvp3qShcX+dj80
iM+n+kLHr3qDWmpKSB/Z/3QWL393ZmfNVQ3yHkF18XcbTfUoDfLeQfUr2uIr
fZJpfTvVLfs/GmqdTeoVeb8RFRzoGaNB6sl5v2H/0E4ntzOpH+b9RlW22rVa
U1InzPuNY1WPh2uMIfsTOar3ae3xvO9UTQnpg/ufLsP+6xdfeJWvQd77qG52
1GAwW0LGy/uNzOuvkltwZLy831iLD842ViN12rzfaPVpTNk4PVq3TJ/7BYOW
XD6DaJ0z1T2nGQ6NtKd10VTvtCIz9fViWkdN9bj93o4V62ndNdVnXxxb0dJT
k7ynU/1r3LfdPY+T+nbeb6SI+iaFtyXx8H7DuVuBw7OOpM6c9xuq0YHFxX1J
PT/vN4Ln2G1tHEnr0qk+0k2tTdfJtI6d6m+OPz4/ei6te6fPd63Ufsnum2md
PNVvFxTOOnmQ1tVTfcqvoNKI07QOn+ql7e13PA+hdftU9xraUqPkPq3zp3r3
6YmXGEy48X4jafVms25ZZL8A4cbviyf9fYlO9tfHgroIsi/eH9Q/kP3vn0Cd
A9nn7g/qGch+dn9Qt0D2rfuDegOy39wf1BWQfeWfQP0A2T/uD+oEyD7xWFAP
QPaDkz5ARCf7vns1m7dlqOKzRYzLQ7pfg/q0kZct4/sZaUlI3+j/dBZ18Gjx
bjyrCeZnFsWcSFizqIHsO+Z92nLzVh9bzSJ147xPEzkkre/lqgXnYTS5dZay
a1ctOA8jec9Dx8cM0ILzMNo/3tLI0YLsp+B9mn9G9u+SQ2SfKe/TzEoOnxQF
kn0EvE973TjO2OgGqZPnfdqWi2c7/3YgcfI+TT/e/m6HJSRO3qfdf9NSMnyj
FphvOWRXl5g7Y48WWX+m/ipl8bluqY+0yHo11Z13zogszCDceJ/2O6C1teod
iZ/3acGRT/I7lpN9o7xPuzbU1fKDFxkX79OspnfMrvcn4+J9WsHqbFe9a2Rc
vE/b5X2YGxylRdb/qd4xZNwR22Qtki+gPqru21J0tUaL7C+j+gntzrlJKi2y
H43qpv1zln/U0Cb716j+fNLRhh+dSd0779OWuyIf/f5kvyHv0zYWFynePCP7
R3ifpvk32EuRT8bL+7SwTjMMtUoJH96nTRrROtyUI/c/79PkM56MnaymLXnQ
bJ5UoW5HB7ruM9aW9Gs2T6pQwnX59wtm2pIvzeZJFZqHzx+OR9qSPs3mSRWq
/zizU769dlMehPdp/j/a3Pm6mO6LpPoQveTx2hvIPgi+vv1rQGSD/3ENCfRv
pF889G8BCt/pYR6NCPq3oDEZpl17MQL/RvqhQ/+m6Nzj9PKP5Pq8fxsw62Ts
JWUjgv4tPeu07S9HRuDfllZOLTBcyQj8G+kDDv3brWsL1rYzZgT+beKTdn8G
mjEC/1b04bnfNMQI/Nv3ZYs2vPdhBP7t1D49pv4cI/Bvgy688NcNZwT+jfTL
hv4tf1Qv39o5jMC/ecz+aKSxnBH4N51Np6P6bmYE/u2uz9SJEw8yAv9m/NPE
L/YJI/Bv2OCz8ZtMRuDfnMzOPKz7zAj8209bmyma1Xw9AdFJH2ro39Qyq+++
PsoI/FsIe11ScZYR+LfxLRa9aXmLEfi3z931VvaMZQT+bcfYF8rx6YzAvzmc
rI0M+MYI/FtN+E3rKJFI4N980p3eZrYTCfxbvyL9NZXdRQL/lqZ6+bvVEJHA
v5F+0NC/DVsamx2RyAj8W/aeDUufv2IE/m39OZN6+UdG4N/UYz4dYSoZgX+7
JfXv3O0nI/Bv1tXT7o5pIxL4t7294nM9+ogE/q0L2rTCb4RI4N8eLeyjvD1R
JPBvjtu++GTMFgn82/fTAd1Kl4oE/u3UXdtIkYdI4N9IH2fo30hdK/RvpD4W
+jdS1wr9G6lfhf6N1KlC/0bqUaF/I3Wn0L+RelHo30hdKPRvpP4T+jdS5wn9
G6nnhP6N1G1C/7Zw3MvnrqtEAv8W+vfVS9MckcC/Hc09U4EuiAT+rXetjadT
hEjg3/LPBFa3bikW+DeP+3b7TAzEAv8Wu2qxhlG2SODf5ngZXLYoEAn829fL
r8zm1YgE/k3NdIl22WixwL+FTDS8Kp4qFvi3cS6Z5t3niQX+rVTVZ5BKLBb4
t4MdC3BHPbHAv/UYHjhrhLFY4N+SHOxKZ5qJBf5t6JN+ZmnrxQL/lv2h8Kls
t1jg39bXB8394yMW+Le2uvZsp/NigX/T91fYfxwpFvi3qLu3in5MEgv8m/0L
5y36c8UC/1Zd0r612XKxwL8dZTLP2W0WC/zbktnfZl4LEQv825+N4SVP7osF
/u28j8v2T0/EAv82OrSDujJTLPBveSlZFw2+iAX+rXCCu1r+TrHAv3k69wv6
elQs8G+ddxX20w4WC/xbXGBQQv9bYoF/mxM13X5KrFjg306yCZv354kF/m1A
i82tLsnFAv/2onv/c4++iQX+beXYogFvRWoC/6Y2L/jJt3ZqAv921cNhpk4P
NYF/a97nlPw9VeH82qglyYak/oCj+q7sYa43bImuoHqPyOilR/cTnaX681PD
l6+PIbqM6hvcY1bMqKT1DVTXnzVy1fDufD000Vtx8etkSXz9LtHv5I3ZkPaN
rzcl+uyYxxvD+hKOHNV/Bo5183WS0/uD6Je3Jbq7nZaD8Sqx2oOHQ2/3LAbj
VeIw/xHmfvOKwXiV2GFz7PDNvsVgvEpcP3vUyHkpxWC8SnxxePyosT/guJR4
RFzCuFcv5GBcSvz5rCW6/xeOS4kP7EiSnDEvAeNS4r4Lxk/YvproNB+Ns8Zg
60WXSsC4ODx0a5xa0GA5GBeH380d3XLXMjkYF4f3jHzUyjlYDsbF4V4dLNpM
yITxc3jZric6sfklIH4Ot12EdM+rl4L4OXx/bLLeXlQK4ufw3K5WBku3lII4
Fdhl9OP8/RYlIE4Fbtlp7Lvlm0pAnAp8+2fC+6k3YDwKfHpcSlFIEYxHgUcZ
TZB7G5aBeBT4y9+nJatty8D3svjk78Rb6yaXgu9lsfnnceEOu+H1//HPTFr0
8Rp4fRavLJoYs6lnObiODCc8wTsdZ8HPy3Bt6rND236Sz5PnuBRt7Ckp/rev
QdP3Ur29Wor8Rxb//kP0BLlV6Uc1lo6T6K5pT8uejGYBfylqc9OavbaBBRyk
6N6htIrD11gQvxTNWTmpau07+nny39HkNhl1httIfQ/9/1ANO/XrrwiiK6ge
8OLFt4JConNUt4iw4Z4aVALOUiTzeVUfytdTUv3wOrsGn72VgI8MXSyd8PDf
vgbN+cjQhGepMUUfIR8ZYkMnxqXrVAA+MuR3JD0+fGIF4CNDI1dPfnxiZwXg
I0Ofpj5PcL8HOcjQllcvU0QHKwEHGepyxza1NLYScJChFN/XaS+qIAcZWrlh
+rO7PaoABxnSts96fnpuFRgvi16FTTr8b1+D5uNlkduxZ0del8HxsqjD2inH
IrtUgvGyKMkmwydgRiUYL4uWD5jmu+MQHBeLbpzMPFN9ogqMi0XTNtkHSp9W
gXGxqM4hO+hhAxwXiwLNZgQHD6wG8SvQz3VT5//b16B5/Ap0xe7FgrhvMH4F
mjTIZtGFvlUgfgWq0nrltM8JxqlAOTOlK96dqwZxKtD2YTNXJWRVgzgVqJt+
7uorajUgHg71GWLb/9++Bs3j4VCmzusB1/7CeDjkobAbdNgcfi+HGg3ejHp6
swZ8L4du1s8eE/qxBlxfieZ+m64Ky68G11ei37lZf3zV4XWUaPD7/LZ3o2rB
51XIK2ZG1r99DZp0Oj+56I9e+299Eflz03VwrOLBYHl8Efi8ErP1jyzUXOjz
iOp+by0s/60van4dDo9/M7yxwo8/p4DopdExTFZaMbg+h93fj9VQH1UCrs9h
w0eJmrXriM7PB0nnxmn/W1/U/HsV+FlMbLZipRx8rwKvDxqVk3cB+g0F1t8e
nxsvlYN4FFj5OOlTO+1SEI8CX74w/gs3oRTEo8ATPXHB++1EV1C90kki+7e+
qHmcLHYIHh3SMK4ExMni+h2Prn7yKAFxsvjCAovr+Bb0DyyWWCTcuP65BMTP
4v2X0J0OpTB+Fvfdm3z3d6cyED+LM52t7hfal4H4WbwZPY1M9SI6v17UsYf1
g3/ri5qPS4bf7Xrs9tegFIxLhvcuGutRPK0UjEuGe1kmbn62txSMS4ZfdB23
NSIa+g0ZdvuTtO0kWwrGK8Nt96d4GiWWgfHK8D2XCXvFX+F4ZXiuVeq+st7l
YLwy/Nt44oGXC8vBeGX4qjj94D0/+hyn+hT5JO9/64uac5Bi58WWVi2rIQcp
bjk+aUJFjzLAQYpvG42fmDm3DHCQ4hmNTyZF+ZQBDlLcUIimBGLof6T4YnLy
1J1cGeAjxaeWWk/vfaYc8JHikdZp9m0zygEfKf7ca9KMGhXkI8VeLZ7NzBnK
Aj5SbFo6eXbMShbwkeLs9Odzzl2g7w9U3xo61fHf+qLm3GToR4unDzq5syB+
GTJVf/FkTMdK8HkW7S239uoxtQJwZlHvjDTvFnsqwHVYFFVt4yepqwQcWOSY
+eqUiUkVuL4CtXqZPrtvd+hPFOhuxOS5GnPoc5/qs44/d6w7Wgm+V4FGZ79e
MuVZFfheBSq4P911wO8qwF+BvE9lLdUxqwbxcOjknSkmg3/AeDg04kRGb70B
0D9w6OOGaX1/LOHP0SD6fvuX/T4GVIE4OZQcZW9mf6kaxMmhlf7ZQ4flVoM4
OaS1eYa5YesaGjfRo2fnDP81tgbEr0SGfi+44ZlVIH4lStpk86OjuBrEr0TL
ZrxqUI2E/kGJ2gy1+ylbR+Oh+n3dzF9pIdVgXEo0NUDKzN1SA8alRHVbZorH
hNeAcSlR4NxctW4FcFxKZDlydkuRPr++Q/Qiw7xWpVNqwbhUaPKs18+6f4Dj
UqGqYdMz1LRrwLhU6LR+1ovyCdCHqNBozv7Vq+3QJ6hQQV726/t3BM93lLNt
Vs4i21owXhXaPu9NLtpfC8arQt1Gz8nrFVMLxqtCaR3z81tXwvGq0Jqfc99V
GdXR8RNd5+Pb99mz62A8tL6I/Jlwsvt9InRkG6LzfuN8ol/4X3ei836D1Bc1
vw6H6zbfW6gcR3Teb3S6o71oqC28PofHjohcnHwLXp/DKza0c/75kOi83yD1
Rc2/95/31uos7ceb4fcqcKLJEJ3v+4nO+40SJz+dgSdhPApccFeqe/ALjEeB
W5eZ6SVUwngUeKjRaT2ugei83yD1Rc3j/Of9d0Xd093hME4WO19ySH0YC+Nk
8eH8+6k1qfT6VL+v1S6tTw6M/x+/0edrurU++V7eb4Q7z3zm2YPovN/IDYp6
FjOI6LzfUGXpPq+1+N/1Rc3HJcN5X3S2jyuE45LhxvZu27dVw3HJcD976fb7
P+G4ZHjmYbMdbCsaJ9V3PTm1w9iA6LzfML6iu6vlNDheGbZ5575rvCMcrwxv
0cndtX0ZHK8MX54ybHekGxyvDD/f57+7Yg/Reb9B6ouac5DibY5mAxppnLzf
uHry1IDRPen1qf7ymWKA+xAaD9W//50xMMIScpDibqOiBsr58VJ98ibdQV3n
QT5SnNph2ODneyEfKa528B/M+EI+Umx49NvgMecgHymWJM8a4hEK+UjxWuWD
IbejIR8pPmOmb1aSTPlQndQXNefGMJ2yZxQm20BuDGPdOqrw5zzIjWHWI13Z
sBWQG8MEbXeXrfOA3BgG38+R3dgHuTFMRfnQoi+Ug5Tqej38iwzPQ54Ms+LU
rOKjDyFPhvHLeFCckgJ5Mkw8oy//lQV5Mkzx6M1y88+QJ8Nour+Rr6+APBlm
RLh5yc0fkCfDLCk6U1JA+y/w/s0p+fSUibGCvy8o4sAZG80e8PMs+jv6we+W
1ZA/i0zd9VTjf8LrsMj2V/TfzLnkOrx/2zLMoLHVMnh9BboalXv/uTHRef/2
qmJYJDMEni+qQJzxmcgxlkTn/VuNR94Dv+PwexWow+3h0RnBROf9m0QeEC0K
hfFwyLr/92XH5sF4OLRx6ezlT5fDeDgUdD56+W93ovP+LTlXf8XwfTBODp2q
4lbOTIFxcuhRr7mrfLJgnBySL4pZlfqJXp/qmgHtV6tYGL8SlV7T72h7Asav
RO0+be7ofR7Gr0Rj9PM6Jt2C8SvRUtvhnX48pPFQ3dcroNOQp3BcSjRsefsu
+g1wXEq06OLWLnYtyHnjvH87lJff5ZAu0Xn/dl9zZNcnRkTn/dv7iUFdGwYQ
/X+d58n7uqjZAa8nSeF4Vejjce713i9wvCqkljYnM64SjleFBqoeZir4cVHd
cXj7LNOWJB7e1735PCI7byDReV+nMgjK1rKAHFSoz/Qf2ZOnQA4qNOOQo3Tf
HMhBhXYmxUrjXYnO+7rr9YY5XzdSncSJ8x9nfrtbSM5N5fNWf78N+l5WTXQ+
b9VvwMnv3X8Rnc9bzVpW+31+a+p/qL7rgj132oD6Dapff3OPe2lM+4UxRCf9
KAEf3MMzu37rNOijVNjm4ZAf9xyhj1LhLdV+P8qXUf9A9Usmih89qC/l81nP
nWY0LNgL/YYSh6yzvxXWE/oNJX5x/d6tIhonn8/6/kk7rPM4yEGJuxpsCptt
Azko8WS77DDfeZAD30ey+XiVuHrgjAg3XzheJTZcERkRfg6OV4kll9rdLg6F
41XiNflut7tQn8znuc5o5dyekwLHy+F1XbMXXV8Bx8vhwDlDnD57wPFyGPv6
ObXfD8fLYTatzsn+BBwv38+x+bg4HP9F6rwuG46Lw8Xthy658RmOi8Ma9qeX
fKmA4+LwiMNflxg2wPgVeFSmQ7vLYTB+BXZtGdnuXQyMX4F9xrXTbZcK4+f7
JDaPU4G9T87UX6kHn8sKfPdZlP6V7vC5rMDv/uoavB8I/QaL1fZK04KrYDws
Hhhrlp6jhPHw/QSbfy+LHVDuc5e58HtZvHP7sIxzS6GfkeHMwTN3nhlM+xkx
RCd99JpfR4Y7K2Z5LgqGn+f7wTV9nvhPep58U5xUL9uXcybhhMD3Ip34oQHc
eejfpGi04nTAoDCB70VL+30LWBkj8L3ouMuswCtP4Xil6GHwg8D32YL4aZ+y
pusQX4qGWr0J8moQ+GG0aKf52cQW8LksRYeizpytp327+LzbvYrvZwd3p88p
qr8znhO8aiB9jlNdtPBhcMgY+Fzjz5lvzk2GIs1mTY2VQm4y9GH1g6l1XyA3
GVK7qjetXxXkJkMDP3hMc1UK7hM0V/fNtPMt6bnZDNFJP6/mfGRI9XW27V4L
yEeG+vR/aBs3BfKRIYelBnaKOZCPDO04v8XOdCnkI0PXcvPslm6Cz3f+/Pnm
HFi0uyhXFakPn+8sutHJ/E9FD/h8Z1HWzDN/eg6mPofqymPf/ywaCznw/baa
j5dFGdfyGnfsgeNl0dePw5kHPnC8LOqiH8hUnYXjZdEk23rG5CYcF38uffNx
KdAU/9lRtx3huBTI7WV0VMkyOC4FOi82eNDNHY6L72/VPH4FCpg99+HmZBi/
AiUdj3l4JxPGr0Dlqe1jSj/COPnz6pvHySF967wVoedgnByy3D18ZWEojJPv
D9U8Hg4tafF29UY16hupfsxy5JpbtF8Pn9cj59g3/14lKvg+p/PVz/B7+X5J
za+vRANiHLutmawNrsOfb9/8OnyfoObX4evJm65DdVJPTv7c9L14d5yFx6Zt
/HklRFfv1j2x0YQ/35DopJ68+XU4/CRs98dvRY30c0TX62T5abkKXp/DdwKR
W8pCeH0Ov8284vZrFX/eH9FJPXnz71Vg0XRn44Q+sP5KgQccemLMmfPnbhN9
bpJRz0FW/PmYRLfXdjHxOgXjUeAdk5NNEi/BeBT46t4evesj+PPyiE7qyZvH
yeLr6XvzPZ1gnCzO/FOQH7MGxsnihhHobe02/jxrohtvvPK2rzeMn8V1h/e/
n/gMxs/izlj2fs8bGD+LrRskH2JlMH4Wbxhy9UNdzf+uJ28+LhmeNP7KsfH+
cFwy/M89dWz7FTguGT53b4lP5B04LhlOLcM+FY/4c6WJXm3U43jP53C8Mny6
McS3lQqOV4YTR4lOoLbkHEh+va50k+uJHYZE59frdMJSTkT1Ijq/XjdaZnyy
0ozo/HodqSdvzkGKy2PxOCYDcpBi3bru48fkQw5SPLbv/vEexZCDFK9YIht/
uw5ykOKTZyWohB8v1eOyQ1A3dRIPv15nviNFkjGU6Px6nXOksZUIQT5SfIQ9
YGVhB/lIcVSPYqvNCyAfKf44f8KEOyshHylucfrahNLNlA/VST15c24Mc2yI
7GvKH8iNYaJXSb79ouPi1+u+XAn5Zt6Rxkn11u+Z7+t703FR3ayd6/ebwygH
qi+cmvK9gHLg1+u89xtzHaZDngyTryjijq2CPP/5x3RC/dMtkOc/suu1+t8H
IE+GmX1O/GO4H+TJMJ45S39suAh5Mkxo29QfoeGQ5z+RWfVqKIyFPGUos4fx
wklrYPwy1Lm452KtN/DzLNp0zkq79RX6vVQ/l3NVW3IHXodFiQutdbPbiAEH
FpX5X9dtY0h0fr1OV2/p04w8eH0FGmvz9KmoGP6+CrTiYM9Uizr4vQrk/GZZ
+qnx8HsV6KhGWvoLW6Lz63VR1ibPxAtgPByK9jm4zUed6Px63ZenxdtSOxCd
X69r/XvCdpUJ0fn1uqHm17ePGEZ0fr2OsfPeOWsLjJND/b1Ldh4/AOPk0OzE
ibvSTtLrU30Pd2PXnwswfiWaq3a9v50Exq9E+8aqDTg0HcavROGblw14shDG
r0RvbqcOaFhF46G6St5roNlWOC4lupp2Y5BBBByXEr1WtRg8PQ6OS4nqh68Y
fDgNjkuJum9IH4xzaJxUn3qz9xBlARwvPH+JX68zftircLIXHK8K2VZ7Fe47
BcerQltNSgrjL8HxqtBlp4myr/y4qJ4RcEPWPx5yUCHrcelF+YWQgwpt3Nq7
WLsGclChs3cPFU/5BTmoUEppafH+1uRcTX69rrLbZPkjA6Lz63UGjqHyb8ZU
J3Fin5GP1Z17E3/Fr9cVhO7SkCKi8+t1QzuM1ZywkOj8ep33kd+aD7cQnV+v
e9eQoNXHj/o3qvdf7akdHE77wjBEJ/2DAB9s8iipXa2Sfi/VEwxwm8i20Ieo
cKld97YVhtCHqLD2oX1te1Jfyq/XjU4qbLtoKHzOKrFxcMLm2bchByXe0sZz
S3o65KDEz3ZYbh0lgxyUuHOFamv4L8hBiePuOCecUOfPYSc66fvTfLxKvPhE
YaI7guNV4iPpKCnCDo5XiSP/XEmSL4DjVeIPI5gnXalP5tfr1Da6PJm7BfoK
Dn/2dN54oyP0FRxuFfNk45fe0Fdw2KzGaJMh9c/8et3C3vs2OUjgePn+O83H
xWHT8S7u6w/CcXF41rZk95t+cFwc9rzXw6PgIhwXh0PL9nt0iIDxK3DYoMKe
VxbB+BU4ZwXq9X41jF+BVZeu9NLdBuPn+9o0j1OBuVpZ71XpME4FNupr1Sck
F8apwFOXXO3zoRDGw+LNBUvenbsM42HxJcPkd7m3YTx8/5fm38vi5CuuH13b
QD/A4op3KR/Pt4d+RoYlfrLjAUXw+nzfk+bXkWHfGcUnnWxF4PN8/46mzxP/
Sc//bIqT6nNlLqGJEvh8l6J9HVNC66dD/yZF4TOMbw1eBP2bFOUePXBr1Wro
36Tod3LRrZCtcLxS1PunVdiHg4L4aV+JpuuQv8fo2tWl4d4RAj+MXn14Gp4U
J/DDqF63V8SPNOjfpMjIxitiSK7AD6MpB+URqwsFfhi5P7a+fbUacuPPBW3O
TYaMTxctjPOC3GTI9oXVIsUpyE2GtoiuLTL9f5uHHm4P7OdZMsUkrcZIJ/Yn
CpNiZu9ADzfE/Quo4fPAPjfocWz9W4z+lP30Lue4Hb8w+lP2Bw4tjvvIzoQW
Pg/sX/1ijtcShYkjxutEjFPik+Hn5yPG62DnhaKGwwv7t45J/JuOoYfDC3ux
qkP8ry+jh8MLe/tNSgIqD9HD4YV91qsmgdh36OGAuB8B1b8v7C2ZU4SqDODu
hIsnWR8R2myL7t8X9j3FKsJvvND9+8J+6+oWYdUImDhivA52jiiqvz7Y7/j0
6PAaTph6xHjdQy3nI0/h7XDEeB138uIjcvB2LAwg7iNAdf8He5YtT46VFKO7
/4O93huX42sb0N3/wT5cZenxZ/Dz4RHjdbDzRVHd+cW+eXFyxXIfdHd+sV93
+3DFA3i7HQYQ5/mjuueL/YWU1Or8beju+WL/a87R6hXw89UR43Wwc0dR7f1h
7x/yRGdRP7q9iPPtUc3/YT9b9Jl+1k90cxDnkaKagzjXHdUcxP5BAFSMpF4=

     "], {{
       {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
         GrayLevel[1], 3], 
        StyleBox[GraphicsGroup3DBox[
          TagBox[{Polygon3DBox[CompressedData["
1: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
             "]], 
            Polygon3DBox[CompressedData["
1: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
Sj10j7pX3+T6A8B+8K7mU3gYvDW8E/wKPATeCt6hETXWWmuNVftbw6xl1ny1
9Rtcvz/Hfa0pXP8SvBfcCx5ofoL3hLfwb+DX4f3gbeCd4VfhoXAfeEf4W+s+
nz7OTw6NolYZUIX2vrVecif5aw33FrwsvABeHf6Tay6AD+dvmjVCw6hl1Az2
IrdwfWuOZ3H9ao3QDGqHravo/e6vR62z5m3C+L3wxnBX62Yjara125pubzCJ
8eEcb8e5weYz+CC4P7wb/AC8pc9iDYUfhHv7XdYE+CF4K+cW3hx+uB7P7hxs
AT9SDz22OtwLfhzu73fDW8GPwdu5FnBv+Nl61HZr/LbwM/DO8IZwv0ZoKLWA
mkDtpmZRu+xaRS/2KNdv61xzbkv7GfhgeHt4D3gKPBrewXvAb8Mj4AHw7o3Q
PGofNZG992TGR3I8kHN7Mv4CvAe8uWsKvwuPggfBe8HP1UM/bQpvBz8P7w5v
BvdvhKa0t1EzqTXbs592g8fBu8E31xeXnep31renerce/fX5XDPG+KpHbjfH
meusgdZCa6jaS401rylqptrrG66/i+MLuP4Q46Ueud+cYe6YAd9dRc2wdvwM
v1hFzjB3zK7H3ncPu5efqEXstS754rt61CJrirVlVj1ykTnD3PFK0Z/+Jn/b
a0X/Gf9qideLHv2zKfqNmfz9g1XUOGvdqzn2x/ym6K/m1SPXmGPMNYt7rqb4
DnuxX+qR68wx5ppf65FrzFHmqsU9TVP8BnsdNYZao00VvYQaQ62hxlCb2vNu
a+2tohe+sx652py9rrWzHlpOTbeWtRNeHm4GrwnfU49+eTl4Q/juemg5Nd0G
jdDMxqIxqZa+i/F1OO7AufXN1fDacHt4vUZoJLWSGsleaqkUudCc2Je/v4Pr
V+W4FefWcb/Xo/ZYk6xNP9WjNlmzrF1z61G7rEnWpvvgTeBu8MaN6Jntne2J
9R5+qEdtsaZZ2+bUw7+w5lh7bq9HP94SXrsRPYu9iz24XtMiPudzfBjnlvL3
qTngYfDv9tPwOfBouObz5/BLxqTwq/Qo9Cr0fE7N4fmcWPTCKTk8Ir0iPY3T
ctR8a/8+KfyxK3L4I7un8G9aFb2h/jiZsety+EFDUvgxekx6TXpQExg7I4V2
mMnnzBQ5wdxgDtgnhydm/VaPnZnDw9HL8TvPyeHRnF7q+1nqpxS19zuZ421S
6Lnrq+gvF/I5j+NDObdkIzSYWuy4FP3s5Tn8n91S+EtqBu89OIV/paelt6UH
dmEOT09vT4/u+Bye2LlFH12Qw0PQS9AzODiHh6GXoQcxKoeHoJcwER5homqE
N3EGhyNz5ChzlTnn+hwenPpL/aae0yPUK3SOL4KvzfHb9k3hh6l/zG3mOPWs
Gk+td2AKP1ANoZYYncLP9Jn11rzGubglh982PIVf6RyoF9WDzo05elDZb/vm
qAnWBnP83jlq8ILS3zSH91NTmutSxOf+8OFw9xR+yVA1t7Gdwg8ZBh/iXknh
vxyoRoNXSOG3qCHUEmqM7XPUEGuJGmNADs3Rq9S3gTl63i1LvTA/HJnDv1kv
hV+k5lB7qIF2ZuzsHH7Ktin8v3E5/Kp1U/hNaqZ+JZ9Zb4xB/cp+KWJTzaR2
UtPsmCOG9WP6poht65X5UM2wu3qcz1iOe6Tww4bnqGUrpvCnjIlj4FVTxIox
6N7cIUVsGmNHw6ukiL3FMeF3p4gVa7T5cYx7MkeNtlZb0/fKocHV4uNS+C3G
5FHwyili1ZgdD/dMEctqGrWNNX9P1yaH/7VOCr01Rs0Mr54i/xyaw09bE07w
4Tn8r7VS7MexJX+tnSKf6fHp9ekBjs7xOZbj1VKMqbHUWmqsPXLkBPfidily
xUopetMJnDsoR8yZG/1OY9H9P5XjY1P0ZuY36/PeKXodez7z+34p6rk9k/V4
rxS9lD2Y9X/PFL2ZPZL5f/8UesKezXq+R4pezh7CXvCQFPndnnC6uSNFr2jP
+BF8Qope0h7jPfioFPrBnuAD+JgU9feGHPVoWAo9Yo/1qbk3Re9lD/kxfGKK
3tIcYr0ZmiK32FN8CI9PUf/tId6Hj05R7+2x3jRfpqhP5gt7kVEp9Is9sHpn
5xS9sTnJ3LR9it7THtLctVOK3tIe1V62f4re1R7P3vfwFPXTHs5ecWyK+mkP
e5t7OUW/Zg9ob3xYivprTjO37ZKidz8xR3+3WQq/wB5LfTMyhX6yx1ePHZRC
D1mjrFWbp/Af7OHVOyNS6K/Tc/TCfVL4X9YQa8nWKfwle0T10MEp9J89/Cfw
SSl6e3vCz6ylKXrFu9V7VfSER5aco1eth20ucg9Ym/5exd7YIIWXpad1dI4a
67sSc7K11xyk931BFbnJPWevoyZwL7qH1AbWPPeWOVSvTs/O3KonrDes/3pM
Ds9Y79gcdmyOnKyX7Z40V5uT9Ord4+Yq30n5bsoceVyOHKWXbk41d7nH9Xb0
eNz7vsPxXY45cHyOnKA20dM3V1iD9Zbdk4trcy30pPpMf84ebVbRl/p96mdr
vp61elM/wX7cGDKW7K/VGK6Ba2FOs9+2XzfXWfP0Y4xpY3tJjr+vwqM4rWgk
3+2pEdROD/GZUtZuojkQblmunVBqru+irKnWYnsOew/f0ejv6Qe8wPENtfh7
/Re1ojnD3GFN1g/Rz7BWW3N9V2hOthZb83zXYA2yFqrB7CXMWeYuNZbvvtR4
ai978L5Fzw7OUcN8l6XGsba5X9V6A1NoCzW2Wrs759rk6KkXFn2vn+KnJ8fv
1GLMNfDaV2uxNtZ49fLbtaj9nXPo30+Lfu6Uo3/+pOhZPWT768+K/l8nh1/9
cy36401y9HsLatHvqs/tT+0n7R/Wz9HP/lqLfnm9HP7HL7Xop+0h7CX0dxf7
vbXwe/Vz9Wd956ufoH9h/+tvUmv7DP5Wewp7C/1c/Qd7UHtRf9N2OXpQe1F7
2P45NJD1rksKbWSNPR5eLkXtdQ+7l9dP4Zf6nWqTP2vxW9SMavFBKbSkc2Jv
pD/lXG2eQ+ssqkW/rz+i36yfrl/hM9oPfViLZ7fHsdexB+qeY009/qAWa71p
jt/+Ry36e9fIXsc1du18J6B/MK8W/oOeywD4h1r4Iavn8B/mlP7GNdPb0NNw
LX2/oJ+iX6SfMDuH9lCD2KvpoeilGCOr5biHvZIx4b39Tr0P/Rh/i9+pF6N/
7m9xzfVK+lQRC2pG36WpMdSSNv9cUr1SC//rjxy51ZxkbjKnmFter8W7AN9J
rAhPr8W7ilk5tJkazd7VmNKr0aMx1uxB7UWN6Z455lCvRA/GudWD04szRrd2
f+f4229q0Y+6Js7V17VYKz0bvRvndLMca6y345y79s6R955di7kzJn32GbWI
Vd/p+W7PPdQ7x2/Sv5lVi9/qPdXGC2vxXXpAekGu8TY5+qWjSn5Wq/pOZ0iZ
T/O3e1DvyXu6N/WU9Jb0i+yXfcfkuyb3YJ8cNXNcqV/WUmNePTax1DPnwN7c
mHVu1DB6K2oKtY2/ST8xpfitanL7h9YptPouOfqHNin8SjWs+rhjCm1rD6Je
7ZSiN1Hzj4YbKXoBNbn9RqsUWt2e11rZK0UvbM6032iXIpfak6o/O5de1Zxu
b/N8LXL9ySW+tkjRC6tBxpT6pzZRo6qnO6TQrvYM6vtlUvQS5hC19NIpcotr
aO+wRIq1VQ/YL9pPWq/teey16il6ITW4+n/ZFNp81xz9RNsU/uriNbF2plgr
c5jaOafIbUNLvfYZfBbX1NqxZIq1tqeyV2ieotcypvVvayliXQ9B7bFlCm/B
nstevkWKXszf7G/fMIX2UAOcAW+UQhuoIdT6m6TQFq6pXrTf4VrrQah1eqfw
JtT3u9diTu1V7MHVEpum0pvn6LU3TqFtnAO9ZmPKudGDUHttlcKbMMZdqzVS
xP7/AdvPUOw=
             "]], Polygon3DBox[CompressedData["
1:eJwt1mXcFlUaB+CH96W7u11KQYGlG5FOkZaQ7pBWylUBFcE1QBQxQRrpRnTt
xVwVXFBwXWPXFVFBkN7rhvlww/u/fveZmWfmnDNTbtD4ruPSUqnUNpVJ7cqR
Sp1PT6XqqdvkOllTqf+xoRlTqZfY22wN+zZcLqFqs0ryz/pG6VvNDrKN7CQb
zdaw99kr7Cc2jK1g77C1LE+2VKodu5stYwvZb/rGsfXsI7aF/crGsnXsQ7aZ
rWTvyVlUGZbOcjteK31T2RL2QFyvSrHqrL0/G8u/GDuGrWUfsE1sNTssF1I3
svysoOPdpu8+toItYT/qG8JeZG+xVeyUKs+6sglskPyDvv7sGfYqe4GtYV/I
hdVNLF9ciyqjrzMbywbEPVWlWEc2mvWV/2PsALacHWAvxn1WpVknNob1l7/X
148tY/vZ83FPVTl2KxvPBsaz1NeLLWG72DL2DevBnmA72FL2XzaYvcDeZKvZ
eva1XFrVZcXZd6yvvqfZPvZcPDdVlnVh49gd8jp9x+VSqg4rFueN88jF1J9Z
BXmtvmNyyWSuFWUvs4/l3Koiy8aye0ZNnWM8e4T9heVl7dkM9gxbxHYae0au
pTqzmixdXx19w9hcNo2lsdpsKLufTWVF2e1sAduQ/LZMrB4bweazu9iJmIOs
CevDOsRzU3/IlVULVlvOaGxdfcPZPDY9nlvcL7mcasiqycX1DdL3WPq1tfoy
+11VYN3ZJDY07p06J1dRtyTrt4CxXfXdy15ii2NOxlyQy6tG7MaYP/qm6VuV
rN998SxjXsplVQNWVS6ir4++h9h69iwrwUawpWwv28AKs97sQbaOLWer3PtP
5DyqEsvOiukbqO9RtpWtZNv1nZZrqo7sJpZfX0d9s9iz7K8sF2vJprDFbD47
ra5jt7E72WC5kL5u7H62kj0Zz8g5hrOV7F22jn3GSrI+bBrrE+vP2AnsefYG
285KspHsqWSOx153ytiJbBP7jO1gOfXdwiazJ9g8tkPf7zG/VSdWI/YSdSX2
AtWONZJzGNvC2EnscTaX5WMd2Ey2nD0Sv9fxJrHN7HO2k72v3pav2NxzsitZ
7G/sHZZB5WIp+TVjMxp7M+uPmrMDLJ01Z/1YM5bFeRuxMexhNpu9ri8Ta8EG
sJvZp6wE682mst7sVZbGmrG+rAl7j+VN9qvY1zqyi6oa68dmsnFxT1R1dgeb
w+6UL6ub2AA2m02Ifd311WAD2T3iRPa1c3Rhi9gr7DH2JWvD5rFV7EH2JsvO
2rAhrDXbwL6Tr1ONWbl4b8V90Fc3eTe2lN/Sl4O1ZUNZm7jvLCdrx4axtuyS
upH1Z7PY+HgW+nKx9mw4a8feYNlYazaYtWLHWWe2kG1kj7K/saysFRuUXMvH
rCjrkewHPdhXrC2bz1azBeyCqsr6shlsrLxJ30/y9cm+Ee/zreykXE21Ztez
LexnuapqxarEnqYqO16v5JmPkP+prxmbnazV2IvPqSrJ3Ii1NVLO4LnVYkPY
fWwKO6MqJr9jMhsmH3G85mwOe47dyzazE/INqiWrzI6y1vrmspfZQ2w/y8Ca
sttZU3ZWVWI92RQ2XP5IX5FkP53IurN/sOLJb4u+XuwTViwZG9fXk73L8iTv
6VGsU8w/9W+5QNwvVlo+r65P9pfpbJT8gbEFk2+GeCd3jfXLCiTv6Xhf3soO
svzJOzS+D7qwv7N8yTdDvPc7sw9ZYdYt2f+6xbuCTWZb2CG2ix1jndjDybss
9tPDrD6bxp5kM+JesalsG/uC7Ynnqw7JmVVpljfmgb7p+nawI8n74xy7i+1k
R9l+toK9IZ+3NxVhF+xNF9gMfbv5V+xArK3YO+STaVc/21Jn9V3UN1PYw4+x
12K9xZ4l/5p27Rv2D33n9d2tbxf/kr0a6zzmgnxCn/9SZ/Sd0TdF31ZwmO2O
vSnWl3w27eoWefX6jsQcZNljT2CF4t7HMeUL+rKzS/oOxnWzS8yhU5fZK/74
gVVQTVn5eEYxZ+R0lZtliBx7qvy7sYalzvvnaMxplkP9iRWOdR5zQf5FXwGW
KeZkzBn2GyvIMsf+Evs7O8Uys3OOd8m1zPJ79/Lj7PWYo6wnW8x2sqfZv1h3
9jjbzp4KU9/KBWNPYGVif4mK90n6te+w+DbLZk03MXYcW8TuiT1MfSPnj/XK
SsW7Ntac/EcyD+Ib7tO4N+wMKxyvqJincW6WL/YnVlLO6hyNnWMsW8jmxFqN
tSSfNrYQyyJ/7nfcoG8kf4CNYdvYKbmG6sCqx3shSs4Zz4kVkffouyg3UN1Z
PbabXZDrq26sLsvsWho6x2i2gM2KdRS/T05TJVlueZ+xl+VGqidrwL5gDYyd
zpayu+Oa47fIl/2O4ixn9IWzjKoUyxPPTf0oF1e1WEV5r+NdkhuqHqx+rFNW
0zkmpF/7Lo5346G417EIVAn/5ZI36vs+5plqwsqy/wM3E8pH
             "]]},
           Annotation[#, "Charting`Private`Tag$47211#1"]& ]],
         Lighting->{{"Ambient", 
            RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
           "Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{0, 2, 2}]}, {"Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{2, 2, 2}]}, {"Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{2, 0, 2}]}}]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], EdgeForm[None], Specularity[
         GrayLevel[1], 3], 
        StyleBox[GraphicsGroup3DBox[
          TagBox[{Polygon3DBox[CompressedData["
1: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
             "]], 
            Polygon3DBox[CompressedData["
1:eJwtmmWgHdXVhu8Jsy+cydzgBAsahRgQIQGCBw0SoFiheAsV2uJQhUKxFoq7
uxWX4u7aBFqsuGvxYt/zfO/8OMk8s0b3Xnutd625i++w+/Rf9Ovp6dmJfyr+
/3G3p2dap6fnotLTc0JfT8/v4Z3h2+EL4enw8vAx8JHwQgN6er7lxF+z7yhs
H7HvGHh2eCl4L37rs309x8/PsYP4fY99T/b9DdtB/HZl+27sl3Luwti/w74H
+/6CbQb7P4M/5/cP7P9j393YRvX29GzMsUvXPT1bw69jHwj/EfuP4Ts572KO
X4R9PWzvxb5jsS0Kd+C94ePh0XWexXt67/3Ztx18M8ecx/n7wtvCN8HnwA/D
x8Lfwitz/CbwJK8N/wX7AfD28C3w+fBiHNOP7X3YdyK2/fj9iO1/sO9c7L+F
d4Jvgy+AD4R/At8FXwLvA28D3wifDY+qMzaOuWN/BPZfwY9gvxr74uybhe19
2Xcytj/w24XtO9h3EfZ/wqfCvYzfGhw7kuvtAL/P9RaA98C+JXwNx5/J8b+C
N4evgk/3/hwzJ9uHsO/v2B7hd5zjx75VsO3Y9PQ8AG8Kv83xv8a+BXw1fAa8
Lfa74Gnwa3Dh/n3wkdz/fXgk15gD28Hsu4JzZ8Hen+1Dsb+LfTT2ubD/mX1X
Yq+wN2wfjv097L3wAPiv8Afw0hw/O8f/iX2Xc/yScC+8P3w6/At+m/ku7DuV
47fj+e6FN4bf0H+43nLOD9ebjXN/yvEbw5dhPwX7UuwbwPZB7sM2GJ4VPgA+
Ex4B98EHwpfAg7jesmzfyvVmxbYb+zaCL+WYk7neT+AN4IvhE+Ffwj/wXeHT
4B14vvvhTeC34O3h++Dp8Jvw3hz/Q/gG+Cx4V3hD7w2fBO/E8Q/Cm8HvwH/q
Zv3cCy/I82wET3RtwkdgH8HzTodf4Hnnxf4u9mvgQfjPNPjP8M/hBzj+Co5/
Ar4Q7of9IXgI568OP8b5c3D8ePY/B7/Kb0W2h9eJD09jnxv7gZxzHNv92DeS
a93E729sv8v178b2PHwePIBz1+b4u+CT4U+x3+f78DuB8+dk32RsN/M7hu33
sN/TlzlwLp6H74SfhC+CZ+F6D8OT+f9l+BV+K7C9Oce9zvZ/+A2DhzVZH69V
iVcvcP758OzY1uF5hjbx91errN/nsJ8L92FfC/uQJuvplSrx6T3s18KLYN8A
+0Pw2fDX3PeBNt6cA38DPwjPhE+HZ+P4qRw/Az4NnhVeEx7GeK4Hz+T6c8Fn
8/9rzh+/CRzzAMefxfb/uN79XG8XeCX4Qngejn8NvgweyLHr+z5cbw34cccU
vhP7SfAnHH+v8Qb7CvoP9v7YD8f+S/hh7Fdh3wKeYiyC/6r/wmvD58DHwVfD
hzme8F3wevAyxgP4cPhR+Hj4e3hVrv8qfCk8H8+3Hrxknee/n/v3wUvAK8L3
wQ28uTEePonzB8DrwGOMF/ChXH9deCx8BHyY6wleCz4bPhbehPm6Sl+F/wXv
iH0d+Fz4eHhR7jfO/Mj9ulz/EOw/83mwX479YPinPg98GfwUfDFc8fyPwIM5
fzX4UXMm53+iz8JDsW8Ebw2vCp/G+X/j+K3gVeBT4aPhLeGV4VPgo+AfwVPh
s+Bj4MfgE+Aerrca11uM+403H3C/Gj4M++7wQxx/pfEM+ybwi9jnw36oMRJ+
EPvfsd/A779VctQJ3cRYY60xfHg387eEubskvg1g/CaYj6s8jzHlaraHdxJr
+jeZj5urPH/TZD5uqfJ+fU38wXjp+//JvGruY98anD9vk/F4pEr8nKfJeDxc
Jd4dx/HXsb20OYnj527ijw9Via9deAR8bZX8reZ5sMoxaqE/w+fBC8Krw4fA
55or4VXh+ZrMj/NnPvhBnfU8pSQ+zd4knt5VxZ/maKKf7q7i/wfzO8m1arzh
enM20RP3VPGvxZrkh+er6JFFm8Tz56roh0FN9Nq/q+iDWeFhnYyxY/19f94R
PgQ+CJ6tydhfU7X6rYk/z6iS7x1jx9ocpe85J86Nc6KvOSfOjXOiL+5ZkpvN
0eO6uYf3quFluxlTx3apTrTSgk3W/z+r6IH5m/jrk1Xy25JN8vFLVfTmEvCm
xt8q+mjxJvnXfKS+WqDJen2qij4Z3CRfvlxF7xhDLq/ik/rmIk3y67NV9Jxr
/jK2F+8kFgzEvibbT1TRA8ZwY7kxX212T4nWNGeaO41p/6jiw8a680pioTFx
p27m3Ll3zo0tzrlz7xwbC51j53pyJ7FFn3J+DizxNX1YX9bHzeX6oP56UIlv
6jM++29KfEmf1rddA2oJfVLfNMaoXVwjrhV9Vu2hz+g7jola03f23Z0TtZFz
4tw4xmoRx9ixdg7Vho6hY6lPqpWdU+dWn1L76VP61rqdaEtzurn55yW5Xh9x
Le1R4jvXluQuc9ie2DpNjneN+H76vL7vmlBLm+MXY/uAktyvj+gr+pDaWh/S
l/QJaxk1yttVNL3axZj8ZhXNZKzWZ/Qdc7Ta2RxtrjanW1sYw4xlrmljrTH+
rSoa3divJlAbbNVJbeOade3qs9YWxtB3qtQAxlZz5HtVagZz5zXwB1VqgiO7
8XF9XQ1mbWHOurTKO5vLjNnvVqlZjOXWAGp5Nb21wXXwR1VqgGPUGvCHVWq6
o+Hr4Y+r1EzHdaMZ/1Ulpqgl13LN+KyMbyGelSb3ds24dnYu0XRfk2IGdxMD
jAV7sf8L7OO70ed7w18aO7rR4h/AE7jeNt3kzzNL9MWt3Wj/D+GJA6Lf1Nbv
ex/4tm5qj4/g5dv8aKw6vSR/vgPfCS/Um3ytXrXeWBj+t3MP3wEvCD/j2HSj
p5eAn3dsutHTi6tTzXXd6OXB8IvwD7upB84o0bMfd1PvLIn9Bey3d1ObfIx9
EvYPuqknFsP+LPY34Nvg+eGZ+g58O7wA/LT5Ax4Fn1iiZ4whxpLzS/TchG5y
7T7wV33JgebCg+F+2Cd2U//sC/8P+/Ld1OL7wV+38cJc81v4W3hNeGF9F56F
86fBg+GjSvTMBvAQfaVEL6wPLwn/taQemgoPci3BFfwKfBM8D+8zg+uvBM/j
2sP+fV98WF++taTe3LkbvXZBif7/WTf1whUl+sOYZey6vKT+WNEcDv8O/o7r
bWZMgU8o0XvbNJn/9eFX+5Lzzf3Hl+jTKWoG1zbcA69sDndtwx342W70Xn+e
//G+6Per4QZ+wljpmoNr+DH4C/hxeIR1Q1/WgGthl5J6tQc98C/sy/WmHv4G
+wx4DPw6/Dn8GDwcfqkv/Y2n4JG9qY+/hJ+Al4JfgTtc79/m2t7Ub19hfxJe
ujfvOxT+xj5OST38PfyMubg39eJ38NPwMr2pF62h7RW8UlJbX9NN7foGPBa+
Fv4N/Ca8jL0eeCY8tjf1cT/Ge/5ONJH5yp6AvY6XS3oFszSJ72oo89XmPP91
8Mol9ZI1vr2Yl0pq/94m+cycbe62XrPf8UJJLT0GLuYe+DNzKXwE/Dm8AvaX
4BvguXi+p8wFxjh4TvhJ+Ab49/A7HD+O41+Gb4Tnxv5P7PeqWeAvsa+E/R74
SPgLeEX4GWM43OX4Rzn+PjUA/BX2KdjHwr3mPvhz7NfDv4PfhpcbkJ5Yj7m4
pFdmT8Le1H9KehWj4Fng3eFP+tJTsD/1Ykmv4Tr4t/Bb8LLwaLgyN8Ofcvww
+Ftu8ZPS9lO6qaV/Af+3Lxr9O+y7lmj3EfD38G7wh8afJuO1Wkn8m2ncd23z
W2JANKPaUQ1iL9AacJ6SGs7a0BrrgSo1mbWXNZ3n22+x1rNnt02Jj+vrGzcZ
z8kl8W+7OrX2S/x2YHsS4/wDbA/DO9YZ4xElNbBj7/PZFzytm36OOWWRkh6d
ucYxmr9kDh07ayqv91AntZZzskDJnDtX+sSCJXOqr5hzBpX0EMxF+sTwkppb
XzFHLVrSAzN3DahTa7+oPqgTo65o9aexyx7D4JKehb0Ha8Ah8Cmd1IaF9x1a
0qOzV2fM/HuVmGssNWZsVJJTjCXmlFVL5sxc8x9jfm9yzGfd5ICLqsRoc4M5
67FWD5rLzN/qdWuEbevkhMtbPWyu2ITjz6kSI3dmrj7Gfry9HGOOawf+pEoP
96RucszFVTSDuUfNcGOVnKaWcA0uW9Ijcm2awxcrqfHN7ebMxUtqVnOpPcoJ
8CXteJjjH23169bteI0vqakdv/Xr+Mbwdv3qP/Z0jJnGzs3q9K9WKunH9PK7
qUqPYO1uepijS3o29jbNsRdWyZHm3k05/3LfraT/Yk09tqQHZK29Xh3fGNbG
i03q9FMmlvRn7GGMKelh2duwhzyqpMdjr2d6nf6G7+y7P86+E3123mF1eN06
vjG0jXc+g8/iPewNDelNb0/NonZRQ9gbMceqLYzp82E/vJNYb49uyZKejr07
rzm09Udjq+8wrPVHY+FnJf6q/9p7M4deWUUzmFvtIT1Tpadnb2l6k3y5Qone
cgwcC9/R3tUGdcbaMXAszOH3tfWTuX1j7Bd0MsaO9YZ1xs45cq42bZKfnU/1
3UZ15sIxdqzXavKsPrNrzR7aoDY+ON7GDr8t2KMxhthDnLcdH99v1SaxzX3a
Vm7SP7Snaz/xdn5fV+l5XcDxd5jjq/TkL4KncPwf1Q8l/Us1qb0kn1mtumET
39WH1UvrNun/jSzRH+akca1/m6vUHEuXHKMWuU3NUKWHc14354xs/Ukto2YZ
1fqzWmadJv0/r+G1zJHLlfRAzZ23qimq9HzOgddlDFcpydkvqu2wf4p9N/gU
56/JuT6jzzrZHlyJz97RzRg5Vge18XO9Js/mM/ls+vQyJXOsr79e0p8/oPXP
aU1ihc/os+p/+u8RrX86po6tc2KveEN9xLmB3zfec/4VbE8q0dv2fP12oqZQ
W1hz2NtUc1qL3KLmqtLTPqsbn9K3jBnWEtM5flvfFf4avlkNWKXnd0Y373yo
a69kLLyn9zbHqf3NceY614Ta3x7vwm1+sferhr6hiqZVW6vJr2/7V2r1CU18
1Xt67/FNYq9z4tzY012opGdur3eNJtfW5/V9Ne5VVTS92neFJr6rz+q7U5vE
AnOUuWpSE1/Qx/S1pZrUutbQ1tKTm/iea8C1sGKTb4GOsWM9scnYOKaO7fJN
xlYf09eWblKLWxNbG49oUotbU1tbj2pS21ojWyvP25vYaPywF2w/8NpWj9gb
GdukdrbGtdZ1TY1v84e1yepNxsYxd+zXhs+ElyrRc6vBR3cyho6lMcvYZU1g
7WiNdV3bz7L2WqZJLW2Nba3tNbyWa0ytOLJJrW+Nbq0+Bt6xkxrfWn90k9rf
mt3afdkmtbo1ubX5ck1qc3uu9l7HNem9mnPNvevUWWvmTHPnNPiMTjSSWsma
dU01UpsPxtbR234T9dvoMnX0ut9E/TY6po4e9Rut32qtuV5o+xfWYtZkL7b9
CGs1NaW9GXs0I1v9M7ATzaB2sObZtM1H1kJz1MmlF1TpB8xVRyuoUdQqaky1
5n7sO7Wbn3FmRqs/56yjZczJ5mY19llVajq1t5r5lCo1rlp69jr1sT1j+xFq
5NOq1JBq57rOtud4rt/APmvjm/09ayS/rdkjsHay5vHboD0CayE1slrZmsPe
gT2E1UtqCnsLfvN+o+0X7tXqM78jqXG3r1MDv9/2f6yN7S9+2uop+0fWbH7r
s8dgLec37tfb/pL9sTHw3CUx56puehBrlNTgH7d6YGrJNwX1rv2119p+pv04
+5Uz2n6d/Uc10UptfjJf2HOY2fbv7EVYoz/d9ues3efmHRbtRPOp/frXqfcd
Y8e6r452dI6cq+Gc37+kBruQ82et0584ukr9MQT7bCU159nYZ6ujNf2bAuul
gXVil5pD7TE/PLSTmGZsU5N29M0Sreo1vbY9EWsdNfGjnXYOsG3VRCuvU1J/
W1Nv1tYH6sUtmsylY+rYbt2kX7NuSb3fj2Pe6OSbofXJlk3G3jX3//2iJv2m
9Urq982b+Io+oq/MV0c7qfHV+kP0oU6+karH562j/a0hrCXmqVNLqNHV6kN5
525JTXhuNz7h3FxX4iv6vL7v9wt7c5O6Gc/9sX9j7qyzds6oUk/7c9s5tNa2
h2F/336+vY0F6+Qmc5K5aYE6ucmYaGy05+C3eHuA9iKGsa8uqYHPh7t11qYx
w9hhjeq3f3uE1q4L19Hi1gzWDs6Jc+OY2ytZqE4tYY40V6rZ9b/DSrS8Odnc
P7o3udoYNLE3NZmxyTVibHm1ZO0Yg4xFxgh7lavU0RZqDLWy30DXateP30bN
P2u268t8Yk/Mb2n2MO2VrcH5R3VSQ1pLLlfnfv5Nhn+bsXwd33dMHBs1itpq
0d5olwl15tI14FrwG+fUNn6b77au834blHwv/mGd2tia1trWb25+v/H7jN87
xtXRUmoq//Zh2Tr9Hv8mxb9NWa1O7WuNbK3sNb22f2Pjt+mJdeZOH9PXxtdZ
m/6Ng3/r4BpwLejj9sL85jWl1Ut+q7eH6LdRe6b2Fv0e5/cOv3/4Pcgeon9b
YQ/X3qI9IXtDfkPz2/pKdfq9/k2I/aGt6jybfz/i3x9Mgv/QSUwxtqxVp5a0
Jrc2X7lObPRvRuxvrV2ntrTmtPZ0DVxSxYdcG1Pr1PL2EOwleA/vZQ9Z/bdm
ndpBPWVvYEqdfq9/E2O/a0v4lk58Rt+xhzetHU/7HfYg/T7k9x57k1vU8S3n
2LlesU7/279ZsR+kHrb2sAaxf2IMMZbY47Q3aE9uYKuH7dWtUKe/7t+k2C/y
+5y9N3twfmvZpo52tQdjL2bVOr0Rr+G1JtfR6mp2+21qfrX5HL2pBewxrt+O
h73H1ev0Suyh2Ev5Pz4q2lc=
             "]], Polygon3DBox[CompressedData["
1:eJwt13WYFlUXAPCX2EWW3QUFBelclpBdpJYQEBQEkZKWkrIB/T4DPxH0U0Al
VbAoAwxapRSxBYMyULELBRNbQfB3nnn/OM8z57fnzsw7c++5s7VGTeg7vngq
ldotMkStrFRqvoMNJVOpxsVSqf6lU6ly7Co2k+WwlqwEG8emsyPG5bHabAHb
yE5RN4CVZBewW9g/6uqzDuxzVkJMUreOlWVXym9Vl81asI5sPyslrmNPshx2
hXyJulKsKctml7NFLJMVspHsGcdn8aLMVOp8eT2xWP6suub+NkzdSWwKW8xO
ZO1ZKXYxm8NSrCHLZBexWewYbsAqsqlsKTtJXYe4l+xU6j72OuvABrO66hax
rawZG8qOZ1ez2SyXtWKV2A3sAVaRdWQZ7EJ2GzvquvmsDruLbWJN1A1khWx3
vLecVOpO+XzRiK1ne9X1UHclO5FdzxayCuw0VoVNZ4+w6qwrO5ndzJazquxM
VoPNYWtZPdaTVWOz2GpWh/VgKc/gWjafLRA3uafi7Eb2uLy+uk7qyhs7id3O
yrHWMV/U3cqeYpvjfeaaS+p2sCecZ6aaWaKYuuvYSjU1jW2Tvu7/2Ar2WMxL
9QXG7mLrHd+u5g5Rk81l69TkGduLDWOnmCc9+UvsMKvOZsvXqKvLzmFDWZ66
rnwL+5U1YTvlT7rGXPk8kc+Ws23GnqZuHKvPlrFXWDs2Nt6ve76NPc0KWDdW
ht3LXmPt2SBWmt3BXmRFrC/LYvewV9n2mEeeVQn2/3hW8nx1p6ur7LrT2MOs
GuvCTmDXsLmsLCuKtWXsQvYG68iGsIbqVrNd7Ax2GTtWJpX6D3uQVWLNWAN1
q9hO1pldyqqyGexRViPWIhvCqnl+7eN5se9Y41ir8o/VncuuY8e5l9vZC6wV
6x3rks1jz7OWrA87z9jqztch3jH7PtaqupnxftQVsu7sqHu+LCOZjzEvD3lX
ecYuYc/JW6gbrq43O8ZqRi3bGffCLpHPU1eMNWK1XGML+46NZNfG+mBPsYNs
OLsm+hq7n+1hXdgIdhr7gpUUGfEb3UsvVsHvOCPWtbrPYp6yp+XfGjuCTWI9
WXl1naPPsk9jnrLN8gPqhrGrY12yTewbNpRdFXOSvcJ+Z7+JyuZLA7aN/SG/
RN3N0TfYq+wvdhmbHj2HPct+ZGPY5Hi/bCP7mu2PueB8tdlW9oN8tLrrY96z
F9kv7EJ2IzuHneB3dIqexT5hfdjJrFv0SrafncmKs1NZU9HZNbqwEqxZzGl1
u9WdwY7IG4v72WvpXnJLRtILoifM8JwHstrG9o11qO7H9Dq6OyPpN9F3Zqvr
zSplJvtH7CNfx37EfpaXFxXEy+r6sarqesS8VHdQXV9WmXWPvYZ9wwawWqxP
jGM/sP6sJuvNekX4bT3Y8ex0eUfRPTd5BsVYbXmd6Auuey6rws6O+et8B5yv
KyvJmkcvZ3ti72HPyX/yu8ayKawee54dYuPY1HTPit7VNDvpl9Vyk14ZPfPU
7GRvqc7ukd8tWrC3WC12l3yBaM7ejLWTm+w/sQ81Y3tYDdbE8RuOj7juRNe9
Nc6dlYzZlJOcN84/R8wWBdlJ369i7CL5QtGS7Y3nEPuC49cdH3a+Cc53i78v
EYtFK39719/qqmvn+EPH2eIGdSv8/X6xVBT523u8nroH5Q+I1ux9lpeb7DWx
5xRmJz2+Kstz/ILjn133Aue7Ib2mv0zPi5gfBeoas9cc/61uvLoZ8S3FHmBv
sq7s/PgWYA+yt9hZbFT0bPY4+5wNZJdHz2aPsPfYu7F/u0YV9gT7Qj5I3RWx
r7JH2fvsHHZBvNes5D1szEneVbyzCuoeY/vU9VR3YXwPsZXsQ9abXcw6sb9Z
Q7GEvRr7Atsu/1PdpWxafA+xNewT1o9NiG8atpZ9yvqz8fFtwdaxz9gANjG+
S9gK9gHrxS6KdemeJ7B7WEnWhJ2tLtscbxf7N9uXfi4PZyR7YOyFC/zGllnJ
e30mJ3mn8W7jWzG+GVsa30qMNa5FVjJPtuQk8yHmRbOsZG5vZvfK74u5nZXM
u6dzkvkV86w1+yDWH3tE/qgY4ZxNMpP1HOv6K38rUrcveoHj5WoeFt3YIXaC
mOGenmODWUVji9gq9lXppB+Uy0x6X/TAPc4xQF0uK5AvU/eRuoGsLCtky9nH
0V9YDmvCHmIfxrrISub2Vud5SL5MDGInxTPhK9V9ydqwj+RHPc//spWsHfsk
I/lH4Sq2mnV2f4fljcRStj3mlbrJ8nuNLc/axTcNm8juYxmsIL5p2Hh2FyvB
Tom5xr5hpcX1bANrzz6TFxfXsLWsLftYfszYK9mqWIPsU1ZMXM3WxP2xA/Is
MYVtjL2CHZSXEVPZpthn2PfyXHET2xL9lP0oLyemsa3sLPaT/HgxnT3LurAf
5GXFzewZdjr7Wn6cmMzWs+6eVRnPuS1by95P7wE1MpNeHz1/X/R2Y0uxfPki
de+oG66uMRsac4D9xYaxRuw8tpv9yYayhmwI28X+iG8uls8GsR3st/huYg3Y
YLaT/R7PmX0b/VbMZU/FnGR11fWL9cUOsQ7su+iFYh7bnN4bf0nvT7FPtdGb
urEsY9vI16h7N54fK81as9XsvfR3ycsZyTdEfEuszEm+LTZkJH0u+t1SNojV
MfZcvs3Yn+I5s1+jz4u72fOsn+d3nLoGbDHbm16XBWwEGy76ur+RrJCNlL+t
7kj0F2P/kFcSs9jLsZ+zTHX12UL2dunke/JS+R3u7U5xo/vroe5PdrKYre6V
+M5hf8krizlsW8wD9ru8opjJXmLnu5em8X8qe4f9E9966v6JfVfcyd5Ir9dY
t22yk55S3+8Y7biZsaPjeak75u+j2KlsFNvLjrIxrDkbE3sIS0UfYUtj/vgN
Z7KR8R3GU+pqxdpku1gvdlReQ8xnO9J9LPpZ2+ykD+a7l38BiG34FA==
             "]]},
           Annotation[#, "Charting`Private`Tag$47211#2"]& ]],
         Lighting->{{"Ambient", 
            RGBColor[
            0.19699838300000003`, 0.252204821, 0.33320940200000004`]}, {
           "Directional", 
            RGBColor[
            0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
            ImageScaled[{0, 2, 2}]}, {"Directional", 
            RGBColor[
            0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
            ImageScaled[{2, 2, 2}]}, {"Directional", 
            RGBColor[
            0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
            ImageScaled[{2, 0, 2}]}}]}, 
       {RGBColor[0.560181, 0.691569, 0.194885], EdgeForm[None], Specularity[
         GrayLevel[1], 3], 
        StyleBox[GraphicsGroup3DBox[
          TagBox[{Polygon3DBox[CompressedData["
1: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
WMGaxVh4fbBvlJ52Ymp9SfM/L9jfqu5YExyPpGutC45f0r7mBmsvqu/mBNuS
6pG1wT5WddYX0bmy5uGa1L5IvqFnsF6kGvCuvL9LQ97z42AfKz1zX7BflX64
M9ifSwfbDb+Qs5753+i8pBfHNPpvz7mu17nmYSH37EH/qTnXlduD/by0ta3B
sUlaXEf42JxryU+DdSfpnO8FxxTpeHuDY4G0043B8Uva4zvwMznrpZuDY5w0
1cbB/lM1lHyrfOy3eefJisnKjQup69D+qsGD9RxpJt8H6zNa74Oiv6W+14/B
eo6+71D6J8l+NQ/B2o60F+XY8kNaA18Fa7PSCr4O1qykvRyfWoNSDXdB3mvz
Md7xu2ANStrOiuj8rBr3/zZYE5P+802wViYNZFKwjidd5bosD1ft9jn9LXPW
DQ4Fa7/SCvYH65PSKPYE65P/pzkE62zSiD4J1uukP/wKd89ZIyqeuvbsI60j
WDeTRtQr+nvLDg4Ea8XSKD7K1oL+tyO4/pIe8n6whtYAvoVjY84ai2olfZ8Z
0nSD9TppJh8G63vSTLYF12XScK7N6kfZ85bgmqIefSWj51TzdnPqOC4N6vLU
8V0azk2pY7H059tSx9Z18K3w4pz1rgvh2TlrRyek1ocH0F6QOh5JO7oxdcyV
Xn1D6rgsHXtTcP5cN3V9JHuT3V2f2g6lk9+ZOi5vhC9LnWNId7o9dUxfT/8d
qfOEDfD52fpV/Scfvwk+SfZTcO4in/9n8L6AdLzy0WtbfunvYM1fWllp+q/J
4sIRqXWAl2jzqt/g3rR/Be8LSJv6J3gvQBpXUWotQrHvde6zVrGZ+xRLrUVI
7zwjtRaquHlmai1IulySWifpJTvi2vmMnVLcfrqU/IlqsdS6q7S7w1NrGj31
u7NYoDxd7y5/UoXxU4M1Z2mS26PrK+US70fXOcoldkRrAYr7Jxasp+i5e6Lr
ENWqH0bXWsoHdkVrCsoZPojWBZRLvBddmyknOYajf86a/6fRuoBi4v7oOlbx
9LPoeqyW1lR0zfaC1ma0PlIb/ji6/lHs3hddg0mP+jJam6gDH4iun5UzfBRd
Rynua/5G8w6fq5ZMXeNIH7sIHp+zPjaF+Xk053e4OHXdpP2US1PnmdpPuQKe
lvO+zCWp6ynt3RyXfVP5qOIFa9bydfJ5+u27eO7LwbWnftdvwXq79sV+h1vl
vBeWS+0zZRvHpt4Hkb63O1qLka5yWOpYqf2ymcH7C9KED0XXtzXlP6P3xbSm
tkXXmcoDv8v2dORPvonek5IfOL7gvS7t382P1pK0xtdFawHKXd8M1n90/w3R
uoBy4BMK3gNTXDgy9X6N9nqOK3jPTLXJMQXvH2i9xIL3A7SOji5Y65fdhtR7
AdrXKxS8nyH7Xxut3Ss3Pqlg/U6+5diC9/bkY9dH6yDKzzdG6wjKdVdH6x2q
GRdFaw2qJZdEayWqT1dG1+eqH5dGayWqhZdH6yOqQxdE627yM1uitRLVLMui
dRbV0ecWvBciLfHtaC1PvmhxtG6i+ndTtG6immJztA6imujdaK1EtdJRHD1y
3j9dQ//FedezC6P1RPnArdH6gmqoVdH6iGphaZnyyfm8r/ubWq0ktnda6n0Z
7Zt8Fa2hKE9eFFwLS1NdElxjStddGlyrSps9hWuH5by3sirY/0h3PS91XJaP
XR2sD0h/Vg6unGeKdKfUe1jSmZcH6wPSdRcE193SdU9OvTenfZzF9D+Ws568
LLhmlya8MriGVS17ZWp9Q/uYK4K1CPXPD67NpTnL12qd/iodLPXemfTthYyp
kLOvmB68x6c9lDMK1tnln89O7Sukk5+aen9QevvsYN1Jvuit7LnysTOC9++0
//I/PJ9IyQ==
             "]], Polygon3DBox[CompressedData["
1:eJwtmnXAVVUWxT8feI7ec32Y45jYY441dqBjj4mNUtIhIiLdjZRKdwsqSKcw
CCgICGKhWDh2d/esn+v+cb/vrrvPrXP3Xnvtfd6h9Vpef1epoqKigf5U1v/r
U0XFvtqvEyoqNpcrKm4Q/rtwXeEtwh2yiopdhU+OFRXPCl8r+97CNWXfKHxO
9D7HemvsgbJP0P46Hd+/SkXFgryiYqzwuxozRePPln2l8HuyHy57Eh4kvEh4
D+EWGr+fcH2Nv13j7xLeX7iBcE3hqzW+ivAtwhuES8JDhWfp/NHCVwrvJnyD
7OuFf9AztROeLPvOuv4zut4a4SS8QvZNwquFM+HHha/S+WXhm3T+08ILZR/H
8wpPFQ6y9xOep/G763q58GDhxcJ7Cu8hPEX4ceEJGv+d7t9GeKJwJdk363pr
hXPhlbLfwpzq2knHOmnsQTp/ovbXy36AxteQ/XbZ99KxXrLfKnyb8J7CPYR/
1TZQ+9M0fqRsO+n8B4UfFR4lXBa+X3ip8N663k06dp7Or6Rj9+jc3WWfrP3l
so+X7Xsdays8Sbiyxs/S8w4QflHnjJX9E9nvFB4u+6/Cj8p+n/ALso8R/kz2
FsIjZP9NeHbu53tJ9nHF+Z2Eh8k+THiF8JXC9wp/KvyNcE/hccLDhR8QPkn4
cuFawp8L48AjhX8XXpJ7vj/V9R8SXio8Vfgz4RnCwzT+FOH/aHydsv2N77kw
+nmyZP9cEP1+QzX+ZOErhGsL/5z5/acKjxCemfv5nwqe70WyXyx8p+wfCw/U
/9myPaZtkPAMje8o+5PB5zcT3qPkb8i3/ELntxQepfP+EG4l+2HCzYOft4e2
KYzVsQ0a2zz3t8cn8I3ZOnaucEOd/5HwPNlHC78t+yThG/V+BxTxs1X4OuF9
hGsJbxI+TudV035lvoGutTi3P3yiY9Nl30XjxwjPj/6+1YX/Jlxb9meEW2r8
IcJNg79PW+EThdsLNxB+JPf33Bwcn1/qHncLj9b1/hSen/v678g+Wfgr2VsJ
j5G9Qv7XWvaj8VXZ75D9W9nvFZ4ge0n2NrIfy7PLXl/2e4WPEW4tXE/4buFD
hZsFf889k/1jhc6fKHyA8Hi+p/B+VXwP7sU1xuhep8q+SPtvyn6Y7F1kHyf7
DXxT2Y+TfTb+LXtV2Z/U/ZYJ7yS8UGMnaUw1+Cp6Ptrikzr/P3CEbE9p/HLt
l2RfJFsnbWNkr65ja2TvLDxW+HrhtcLduKbwzXAEsUTcCt/IOwh3lH208HXC
qzNzJt8eHxgofLOe9yDtN9Kx52XbW3iE8CpdZ189/17Cw4X/K/y3KsWcauxx
xKTOb0hOCI6RKcLTtP0bf9b4xrK1JmZlvwzOke1Hbe0ZK3uo4jGdZD+15HOP
0P0e0v6zsh/M9yQGZb8CTpK9g/Ao4WuFn4DLhYcHcwbcMVXbhdqvofMbwUeZ
z60n3Lxsn8Q38QG4BB/AF4gxYv1W3b+q9pvo2Iv4q45dLnyHzm8GP8t+sHBj
2V8o+x4dgzmFex8v+2Pa36bxh1TxnFwgfGv0XBHDxPLhJXPRrMzfvr7sd8Lt
+t9Z9n/p2HRsul6u/eo6tk72K5JzAzniKa6lMb/spOvpvCeF22sbKds1fLPM
79xL+OyS5wKfIxbhUHyRd+opfFbJ79oUjhE+U/jhzBvfrm607UqeU/Yj4HzZ
Zmq7VPt1dLyJ7Ifr+aYLbxE+SO+/Sv48V/hnOFD2dcKPC1eSfXHZ79xbtnNK
notLdH7Q/kU69gT5SuN2CG/XtkP7X2t7Tfuva/tG+3Nz5/s3guN3Z53fV3iu
bFV0/8rCfYTnCJeFKwn3Fn5MeDfhDTp/lfAuwst0/kXJ3AcH/hc9wJwI95S9
V9n5tTPfRjjq/Dm58+vrwfl9N50/RHiJ7HvJvlH2J4R3FV7O95X9KOG7NP7l
sjkJboKzxurat8l+pPZb6Ng22WoK/0O4pfArwhcL7yx8ofAq4UuFo/AlwquF
LxPeRfgy4TXC+wiPJFZ0/7/reT7T/5eYL23f8s56vpna/0rjZ2r8rfr/pvDL
2j5HA8n+CHOt44/An9oGBMf4Aj1vjWRfwCdekm2lxs8S/k54lvBa4aXCFbrW
AuH1wiuEKwsvEb48WU9eofFrhVto6xfMkXPI7cL9g2NoHrlR+L7gGJ8vvFzX
e1j7X+vYw3CTtgeDY3aZ7P0z69cLdL/t5FNysuwX6dhC2dbo/AXa/03H5sn2
m451EX5I43dBH+n5DiSfyv6c7L/L3lV4huy7yr5C5z/KXMr+qOyrhecL/yo8
t2zNinZFsw4gHnXeoGCNgFb4U1t3Yk3Hk673B5wuPFM4E35C15sn/IvOmaNr
nabnWV/Ewny4T3iG8JfB37exxpdK1nRoOzQ8Wp4c3S6zz+F7+FjfzN/szoKP
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
O6cI3wy/Z+7vXih8m/AdyfFNDUE81kmOX2pU6o26+FzJNSb109Ci/0ROResN
Fh4Fnwavz/Qr+jMvB9fvw4p+I5oMbVZF+AHhZbr/PsIP4kMla1K0KT35p4N7
APTq709e30JTo62HJMcGMcL6Vd/k9aBtwf2EPsm5mxxO/6h/8nrMK8H1/n3F
/bcH9wNmZP7+tfU8H+jeTZL9jZgithokczkcDn81To41OBg+PEF4Du+r8w/V
9Rom5wZyALlgQHKsE/P0wyqEewg/Qp0iPKjoH70V3E8bmNwf3hHcT2skfF7J
OQc+HZ+szdHo1CYjk7U0GhgtPCI5V5Gz0N7Tc3MnHIpWmZpbm6C50F7Tcmsv
NB/ab1xurYEGQAtMya310DRom8m5tRwaEC04PrdWIGeSOyfmXutEw6BlJuXW
MmhAtGD73L1serr0dsfm1iZoHLTO6NzaBY2CVrk/d64h57AWMDy3Xp8q3BOu
z12/UaNQq7TL3XulZ04/eGTuXEb8o50m5M41cDhcPiY3P6GR0ErDcut31oCo
14bkrkdZE2Bt4MHc9SFrAtRjQ3PXA5OD67FRwjVL1mBosd76Hv3Jj8H9+MG5
61XWHFh7GJi7l0zPHX6slZwv6dlQD/XKrRXQDNS/PXP35ugRUh+fU/DJ+9Hc
OyGZe6l5qX2pX3YvuWaldh1V+Cs1GLXYwUX8Pa3xBwqPEV5cco1FrdUnd/+Z
NQbqnX65e3+sGVAv3Zdbq8CXrBX0z70ewJoL9fQA4atL7plTH3fJ3QunZ07v
vGtubUR80avunJtv6ZnTOx+Uey2CNRbWWjrl5j966PTLuwmfX3JPk95m39z9
dHqU1F89cvc26WnSH+ieu/dJz5PeZ4fctRM1FGslLZK1B/GC9ngguVb+ILjf
fG+ydkfDf18258A9cA69TTjnpSI/oo/55nx71rBZm6EHzftfH92bZo38ueCe
OmvncBRcBYfSq2TNbUuhp6kXqB/Q16zxsXbLmvHW4B48a8nU7/Tw0dRoazRw
paKeRBujeVkrQ7OhhenZ3h2c0+jlwkmvBnMkXAWnhWgfg+vwkR+DfQjfgcM/
CvYhuJ0192cLvc9aPL9huCO4R8xvG+DYIcEcC/eSQ7sFczC5lRw/ITiHk/vJ
4bMLvUVuZw3mquCeNmszbZK1wyod+6HsnEPuISfQS2ZNc2NwD5i1Ttbo4Jt2
0f7EN+RbtoajZRtEHSK8Qtt3ZWtS+KJjNP+sy8xvXYS7Cn+jbXnwGusrmZ+B
Z8FH3hLemJlve0Tz1dfalgWvQW+T7Vvhx4PXYF/N7GP4GjmPtQ7WbDcE96xZ
y2WNEn5uH80f5MD3Cn3411p75ni6IXotkZxMbibH8FsKev7wTaPoeCEHkgvJ
kfTKyUHkInIQaz3koB2FXmWthxxGLkNPVyrqO/Q1epl6jzVT8kGHaL5kTYH4
bRwdb69n1s2s2zO/bMz1PSXbqNFYm6XmoXbrmKwV0fxo/25F/uSb8m17JscO
MUAsdE3+1swZc9cjOTbwSXyzU3LvDQ2KFu2SPLdoDrQH34jcQk7h21EDkT9a
R/MbHA/XkyPoxXVO1ir09Ojt7aR7bAp+xq9l754cC8QwsdxBuEPJPT56fe2S
e3f06OjV9UrmCjgBbmib3LtDI6OVWyfPFT6D73AP8Njoe9+T7Ev4JL55V3Lv
npqK2qp9cm+RniG9w7uTfZGePr39lsm9fXr+9P5bJfs2Povv8huXZwr+4bcv
/GZkZRE/8BG/weC3GMTIG5lrItZqqImolejP0s+jf0c/lRqetStqOGp7ahTW
YqjJqV3Q+FcG91DQ/tQorHXS86F2YU20e3BOYK2Unu39wTmLXi4xOjE4Z68r
4ptn5NmI97/WpIL7i/SGWPNh7Yee6JTkmu3j4N9oVC3sX0bXWKwVUYP9FFzj
UZvxm57Xgtcs+a0Pmvvq4JoFLT46+d2ZA3qbaPB6wRodbY6mbxWs0dH69GRi
dM1Hr+b/ODU3tA==
             "]], Polygon3DBox[CompressedData["
1:eJwt12e0VNUVAODBBAbfGx+QBFsUJEFAlzWxQCIISlVQQIoQKaJU5T2K1NCV
Ll2qdKQqValKD1VFiihCVBRBrFhCjYrfXtcfe627v9n33pm555x9bokWeXVz
L0mlUntFfrE+k0q9l06lzhZIpc6JV3JSqZ6sKesr7yfasOdYezZSPkp0YqNZ
LzZNPl30YZ3Yw6yDvKNozhawhWy3/E0xkb3GdrCT8i/EHLaYrWEfyA+LqSw3
O5UayAY53puVSu0TD7ObWCU1+f2YLmyMc/uwJexJto2NZX3ZUtaSbWfPsnZs
CqvDVrCurCEbzCqwmVnJb+vNFsd/Ir52/xdYf7Zc3lrdTnXjWD+2jLViO9g7
Yo+Y6LPnfPaNcyc4ftbxq+raqtvt827sUTaE3ctmsO6sERvKKrJZrAt7hD3L
yrEprB9rzSayh9gS1p+1YZPYw2wZ68OeYONYDbaI9WWt2ARWiy1lA1hbNpnV
ZstZD9aYDWOV2Oys5PnWTifjIsbHUb+tM6vD+svvVjdJ3TOsLhvAyrLJbDwb
wFbEmGK7WG/Wgo1l1dlCNor1ZIvY42wLG8Q6sJmsAVvNnmaV0sk4i/F2yHdp
z+5jneRl1A1Vl8vuZ53ZDWwYm2YMfcbyi/Xsn/KO6h6Q91R3OxurLo9VZ93Z
rWwM68BqsB7sNjaatWF/Yy3iO4s9vktb9nf2hPwqdT3VtWY3ssasCOvMWrGS
rBarKbY6923+lpiUScb/t2yw446OZ6lp6Nw1Wcm8zE0n8y/m4ZfqBrI8NkNe
X90qdSNZD7Yw5iTbzIawTmw2e5StZc+zbmw+a8o2sqGsM5vDGrF1bBjrwuay
x9gGNpx1ZfNYE7aejWDd2QLWjG1iT7F/sHasBOuflaw5zdLJ2hJrzAm/oxd7
nI2RV1O3IOaM5zSajfb5Z/LjMRfYNLZBXRd1/4vvxxazPWwg+718iJjPdsa6
xi7G3Gej4r6u96n8WMxBNibuy07IP485yEbG+seOyj+JecQms3WxHrre9zFn
2NgYz+pOyr+I/5QtZXvVDVZXQD5ULGC7WP9YkOWDxTy2I+YW+yXGHxsUa5Pr
7ZcfEO2zk3VlYE4yRmKsPMNGsBHsI/nHYiB7iW1zvd6u91PMIzaXbY/1mv0c
ayKbyTaz7uxsrCVsOtvIurLTMdbYLLaF9WDnYt1gM9gm1o2diTWHTWJrowew
79i/Pcvm8dxYVTY/5r66iWxNzF92KurYeLaKRaP6JtZxtp59xMazP8UYEKvY
+9GPWE48H/EaO8hGsEw8W7GSvRfjil0mHyc2sI/ZBFY07in+w47HPGLXyCeI
bexE9Dd2rXy4WMLeYYNYfvkLYiM7Gr2NXR7jR6xmh9hoVih+q9jOPmczWDH5
i+IgO8OWsJvlHWIsRF/wLN/1+w/G/Ij7sJXq2qv7OuYWW8b2sSEsHeNR7GGn
2Dx2fTwL8XasIWwuKymfIt5lp9lidpO8sxjGhrvvYdc/Eut9jNXoAeyQ/APR
MeZS9Cj2nvx90Sv+L7ba9fJc71s21zOfwl5nb4gX1Ldj5Vhb+XXqBqhbxXaz
C2wZu861nhAPsTxWmk1U15xVY21YcTaKNWGVWUt2DXueNWVVWCt2LRvBWrBa
LJeVYhOif7Bn2PhYd9kb7HFWk7Vn17PxrC17MuYbu4e9wtqxlrEvYeXZYtaM
VWWtWTE2MtZ79hjrze5kc6NXsCasD7uLzfutB/yVPcAeFPX8V1PVfch+ka9U
d0f0KLWpmBfxPMXbmaQPVkwnfSf6T+OcpB/dnk76SfSVBmwHO84KiHQ8K/ak
a9Zz3EXNTa471fVbsvqsK7uZTYvvxxqwbuwWNj3WcfZ0rDmsClvJ5rvHHHaA
DWPn2WPq7mXN2ZVsCLufXcsqsNP5XJ89yEqzuuwXlsdqsOvZQ+wn1p49wEqx
2uxnlsvqsltZNVbQPbqzmqwMq8cuquvA6rBbWBWWVteN1WI3sAYFkv82/uPa
7GZ2PyvAurJH2G2sBruU9WCN2D2sCSvKBrLGrDxryi5ng9i/WAXWjF3BBrNq
rASrys77fu1YVXYdq8zOsbasCivO7mNnWRtWnf2FVWcX2FOsAbuL1Wc57tGH
1Wd3skfYZaw3e5SVZY1YYdaPNWR3s4asEOvL6rE7WB2WYb1YZVaMVWRn3Lc1
W+2Zv8n+z5arKxF9jM1m+9lQdkHdK+xVdoxNYVnq3mRfsqujP7J7s5N3kvd/
G6MxVksUSt4N1qaTd4V4ZyjKlrPN7Hv5Aude4dzd7At2VazRrAJ7i30l/3Os
lawi28VOyq+MPQIrn53MjxPyy0VRUdI9drLPHV8Rc03dPepWsC3yH9x3IbuK
vcq2sh/ZInZ1rM1sE/uOzWdXsjXsHXaRrWKls5N3oZ3p5P0r3sOucd+VbBc7
L1+qrri619l+dkn0VnYDW8f2yfNFH2Vl2Fq2V56KOc5KRc9i6+Rfut5MVjj2
JOx19hWbxYqwN9gB9juxjt0YPYsdk/9R7Gbl2MtshfxT505mBdkmdphlxX6A
3RZ9lh2SFxQb2C3ZSQ+JXjItk/SbH3OSHhK9ZGom6Tc/5CR7mNjLzMgke68z
Ocn+J/ZBUzJJj/yOfSj/r5ieSfZAp9lCxy87PuL7jXHffNlJP3oxnbyDxrto
Pv/zIracfSKfpO7S7OR9dVE6eQeNd9FMoaQHRy9+MZP0vu9zkn1h7A/nZJI9
3wX2kuNxjrc6r6frfeXzbexT9gexi5V1jy3sY3khsZ3dyTazI/JssZndHnsS
9om8iNjJ7mZb2VF5YbGD3ZWdvBfH+/HkTLJfPJWT7FFjrzozk+xxz+Yk++XY
N8/OJHvc8znJnjf2vrMyyd76HNvo+APHl4qN7nFr7BGzkzEbY/cUnyX/FX8d
TRA=
             "]]},
           Annotation[#, "Charting`Private`Tag$47211#3"]& ]],
         Lighting->{{"Ambient", 
            RGBColor[0.1830429875, 0.21424763749999998`, 0.0962851875]}, {
           "Directional", 
            RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
            ImageScaled[{0, 2, 2}]}, {"Directional", 
            RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
            ImageScaled[{2, 2, 2}]}, {"Directional", 
            RGBColor[0.14004525, 0.17289224999999997`, 0.048721249999999994`], 
            ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}, {}, {}}, {
       {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0ckuX2EYwOGXv7mmuADTnvQCKi6AWFgSGzsibImVhJBeQMUFVOzMQ2vJ
FZjnISJiiqhqSSP6fInk/PKcnMWb7z1fTWdfa29WRAzpj9L7L13oOT+inJmC
iCpWsJ41bOBnNrOR7WxhNzs4wB6OcZDj/MpJTnCRU1xnbWHEFV+0qd+603Qm
Yosz3OYsdzjHXc5zjwvc5yIPuMRDLvOIKzzmD57wJ0+5yjMO50Rc81XnaW/d
a835NtJcrnGSCxznd47xGwc4ym72s51dbGYbG9jEen5hFetYzkpW2/+Sf1Wm
J90q1/lK0/9nSbobFvM9O+IT31jEfyxM52dBmsP8tAfz0jzm8pFWjQdm0o70
xIiPNx/3/x93XEp7
         "]]}, 
       {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0ktL1FEYwOEzNl7GL1BbF9oHEN3oQiLX4QXS1MwZtznoOkQXIiKpYSAS
Ke6MqLVErSO8a46jhIh5WXgXV+bt+dPix/PuznsOpyiZru2IhRD6dGq44iH/
qDgRQoKlfMQnfMwalvMVq5lmPbuZ4hCH1WX+zF5+4wh/cZJZfuUBfzBZGMI2
zzWnY+3peW4I82zgAhu5yBdcYhOX2cwVtnCVL9mq39GeXGMbM9FZXGeKWbZz
gxV5IezwQps60b5y7DbLS7t+j/biF2Y4wZ/RfTnDHn7itDrNg0zyDev4mk+j
/VjGZyxhFR+y1VlbPFOBjrSrqXgI+ZxkHj8ylx8Y5zgfcIw5fM9RxczvGDjM
O+Nb3nKQNxzgNfv5j5Xe4W/s/3+4BwDCTkg=
         "]]}, 
       {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0jssnlEcwOHjG0hJXOpWDBjExtKViIg0bUnzRaQJk8RCwmBiEomkJjEx
IQYm6aRT04miX+vWiIjb4m5zv7aeL4Zfnv+7nPec97zFLZ3RjoQQQr+OIyFc
eNjnulqTQ4iwixnsYxGHWM5xVvIr6/iDzVzistrNZ+zhPQf4KiWEEb7hFEv5
jRPc5KnmdKhdpSaF8JNpnGc6F5jBRb7mL2Yyxiz+ZjZz9Mecy6X4O7nMPK4w
n6ss4BrPuRXfs/7qSHuqtrdZvuUMSzjJHA4ziV9464zdPOGx2swxNvE7P3Ka
FRxlGQdZyF6mc8xaG/E1lKAD7ehzogtiI/+7owb+Y5RP/MRH1vOBH/he9+Z3
vGMtb1nDG1bzmlW8YiUveeE7bEde/odnYzFN3A==
         "]]}, 
       {GrayLevel[0.2], 
        Line3DBox[{2037, 2335, 956, 2036, 3278, 2244, 2038, 3279, 2245, 2039, 
         3280, 2246, 2040, 3281, 2247, 2041, 3282, 2248, 2042, 3283, 2249, 
         2043, 2980, 3368, 2044, 3284, 2250, 2045, 3285, 2251, 2046, 3286, 
         2252, 2047, 3287, 2253, 2048, 3288, 2254, 2049, 1152, 2255, 2336}], 
        Line3DBox[{2051, 2981, 3369, 2050, 970, 2052, 3289, 2256, 2053, 3290, 
         2257, 2054, 3291, 2258, 2055, 3292, 2259, 2056, 3293, 2260, 2057, 
         2982, 3370, 2058, 2983, 3371, 2059, 3294, 2261, 2060, 3295, 2262, 
         2061, 3296, 2263, 2062, 3297, 2264, 2063, 3298, 2265, 2064}], 
        Line3DBox[{2066, 2984, 3372, 2065, 2985, 3373, 2067, 985, 2068, 3299, 
         2266, 2069, 3300, 2267, 2070, 3301, 2268, 2071, 3302, 2269, 2072, 
         2986, 3374, 2073, 2987, 3375, 2074, 2988, 3376, 2075, 3303, 2270, 
         2076, 3304, 2271, 2077, 3305, 2272, 2078, 3306, 2273, 2079}], 
        Line3DBox[{2081, 2989, 3377, 2080, 2990, 3378, 2082, 2991, 3379, 2083,
          1000, 2084, 3307, 2274, 2085, 3308, 2275, 2086, 3309, 2276, 2087, 
         2992, 3380, 2088, 2993, 3381, 2089, 2994, 3382, 2090, 2995, 3383, 
         2091, 3310, 2277, 2092, 3311, 2278, 2093, 3312, 2279, 2094}], 
        Line3DBox[{2096, 2996, 3384, 2095, 2997, 3385, 2097, 2998, 3386, 2098,
          2999, 3387, 2099, 1015, 2100, 3313, 2280, 2101, 3314, 2281, 2102, 
         3000, 3388, 2103, 3001, 3389, 2104, 3002, 3390, 2105, 3003, 3391, 
         2106, 3004, 3392, 2107, 3315, 2282, 2108, 3316, 2283, 2109}], 
        Line3DBox[{2111, 3005, 3393, 2110, 3006, 3394, 2112, 3007, 3395, 2113,
          3008, 3396, 2114, 3009, 3397, 2115, 1030, 2116, 3317, 2284, 2117, 
         3010, 3398, 2118, 3011, 3399, 2119, 3012, 3400, 2120, 3013, 3401, 
         2121, 3014, 3402, 2122, 3015, 3403, 2123, 3318, 2285, 2124}], 
        Line3DBox[{106, 845, 107, 846, 108, 847, 109, 848, 110, 849, 111, 850,
          112, 851, 113, 852, 114, 853, 115, 854, 116, 855, 117, 856, 118, 
         857, 119, 858, 120}], 
        Line3DBox[{2126, 3016, 3404, 2125, 3017, 3405, 2127, 3018, 3406, 2128,
          3019, 3407, 2129, 3020, 3408, 2130, 3021, 3409, 2131, 1045, 2132, 
         3022, 3410, 2133, 3023, 3411, 2134, 3024, 3412, 2135, 3025, 3413, 
         2136, 3026, 3414, 2137, 3027, 3415, 2138, 3028, 3416, 2139}], 
        Line3DBox[{2141, 3319, 2286, 2140, 3320, 2287, 2142, 3321, 2288, 2143,
          3322, 2289, 2144, 3323, 2290, 2145, 3324, 2291, 2146, 3325, 2292, 
         2147, 1060, 2148, 3326, 2293, 2149, 3327, 2294, 2150, 3328, 2295, 
         2151, 3329, 2296, 2152, 3330, 2297, 2153, 3331, 2298, 2154}], 
        Line3DBox[{2156, 3029, 3417, 2155, 3332, 2299, 2157, 3333, 2300, 2158,
          3334, 2301, 2159, 3335, 2302, 2160, 3336, 2303, 2161, 3337, 2304, 
         2162, 3030, 3418, 2163, 1075, 2164, 3338, 2305, 2165, 3339, 2306, 
         2166, 3340, 2307, 2167, 3341, 2308, 2168, 3342, 2309, 2169}], 
        Line3DBox[{2171, 3031, 3419, 2170, 3032, 3420, 2172, 3343, 2310, 2173,
          3344, 2311, 2174, 3345, 2312, 2175, 3346, 2313, 2176, 3347, 2314, 
         2177, 3033, 3421, 2178, 3034, 3422, 2179, 1090, 2180, 3348, 2315, 
         2181, 3349, 2316, 2182, 3350, 2317, 2183, 3351, 2318, 2184}], 
        Line3DBox[{2186, 3035, 3423, 2185, 3036, 3424, 2187, 3037, 3425, 2188,
          3352, 2319, 2189, 3353, 2320, 2190, 3354, 2321, 2191, 3355, 2322, 
         2192, 3038, 3426, 2193, 3039, 3427, 2194, 3040, 3428, 2195, 1105, 
         2196, 3356, 2323, 2197, 3357, 2324, 2198, 3358, 2325, 2199}], 
        Line3DBox[{2201, 3041, 3429, 2200, 3042, 3430, 2202, 3043, 3431, 2203,
          3044, 3432, 2204, 3359, 2326, 2205, 3360, 2327, 2206, 3361, 2328, 
         2207, 3045, 3433, 2208, 3046, 3434, 2209, 3047, 3435, 2210, 3048, 
         3436, 2211, 1120, 2212, 3362, 2329, 2213, 3363, 2330, 2214}], 
        Line3DBox[{2216, 3049, 3437, 2215, 3050, 3438, 2217, 3051, 3439, 2218,
          3052, 3440, 2219, 3053, 3441, 2220, 3364, 2331, 2221, 3365, 2332, 
         2222, 3054, 3442, 2223, 3055, 3443, 2224, 3056, 3444, 2225, 3057, 
         3445, 2226, 3058, 3446, 2227, 1135, 2228, 3366, 2333, 2229}], 
        Line3DBox[{2243, 2339, 1154, 2242, 3457, 3069, 2241, 3456, 3068, 2240,
          3455, 3067, 2239, 3454, 3066, 2238, 3453, 3065, 2237, 3452, 3064, 
         2236, 2334, 3367, 2235, 3451, 3063, 2234, 3450, 3062, 2233, 3449, 
         3061, 2232, 3448, 3060, 2231, 3447, 3059, 2230, 1153, 2337, 2338}], 
        Line3DBox[{2341, 2654, 1381, 2340, 3563, 2563, 2342, 3564, 2564, 2343,
          3565, 2565, 2344, 3566, 2566, 2345, 3567, 2567, 2346, 3568, 2568, 
         2347, 3569, 3070, 3458, 2348, 3570, 2569, 2349, 3571, 2570, 2350, 
         3572, 2571, 2351, 3573, 2572, 2352, 3574, 2573, 2353, 3173, 3667, 
         2574, 2655}], 
        Line3DBox[{2355, 3071, 3459, 2354, 1396, 2356, 3575, 2575, 2357, 3576,
          2576, 2358, 3577, 2577, 2359, 3578, 2578, 2360, 3579, 2579, 2361, 
         3580, 3072, 3460, 2362, 3073, 3461, 2363, 3581, 2580, 2364, 3582, 
         2581, 2365, 3583, 2582, 2366, 3584, 2583, 2367, 3585, 2584, 2368}], 
        Line3DBox[{2370, 3074, 3462, 2369, 3075, 3463, 2371, 1412, 2372, 3586,
          2585, 2373, 3587, 2586, 2374, 3588, 2587, 2375, 3589, 2588, 2376, 
         3590, 3076, 3464, 2377, 3077, 3465, 2378, 3078, 3466, 2379, 3591, 
         2589, 2380, 3592, 2590, 2381, 3593, 2591, 2382, 3594, 2592, 2383}], 
        Line3DBox[{2385, 3079, 3467, 2384, 3080, 3468, 2386, 3081, 3469, 2387,
          1428, 2388, 3595, 2593, 2389, 3596, 2594, 2390, 3597, 2595, 2391, 
         3598, 3082, 3470, 2392, 3083, 3471, 2393, 3084, 3472, 2394, 3085, 
         3473, 2395, 3599, 2596, 2396, 3600, 2597, 2397, 3601, 2598, 2398}], 
        Line3DBox[{2400, 3086, 3474, 2399, 3087, 3475, 2401, 3088, 3476, 2402,
          3089, 3477, 2403, 1444, 2404, 3602, 2599, 2405, 3603, 2600, 2406, 
         3604, 3090, 3478, 2407, 3091, 3479, 2408, 3092, 3480, 2409, 3093, 
         3481, 2410, 3094, 3482, 2411, 3605, 2601, 2412, 3606, 2602, 2413}], 
        Line3DBox[{2415, 3095, 3483, 2414, 3096, 3484, 2416, 3097, 3485, 2417,
          3098, 3486, 2418, 3099, 3487, 2419, 1460, 2420, 3607, 2603, 2421, 
         3608, 3100, 3488, 2422, 3101, 3489, 2423, 3102, 3490, 2424, 3103, 
         3491, 2425, 3104, 3492, 2426, 3105, 3493, 2427, 3609, 2604, 2428}], 
        Line3DBox[{2430, 3106, 3494, 2429, 3107, 3495, 2431, 3108, 3496, 2432,
          3109, 3497, 2433, 3110, 3498, 2434, 3111, 3499, 2435, 1476, 2436, 
         3610, 3112, 3500, 2437, 3113, 3501, 2438, 3114, 3502, 2439, 3115, 
         3503, 2440, 3116, 3504, 2441, 3117, 3505, 2442, 3118, 3506, 2443}], 
        Line3DBox[{2447, 3611, 2605, 2445, 3612, 2606, 2449, 3613, 2607, 2451,
          3614, 2608, 2453, 3615, 2609, 2455, 3616, 2610, 2457, 3617, 2611, 
         2459, 3618, 1493, 2461, 3619, 2612, 2463, 3620, 2613, 2465, 3621, 
         2614, 2467, 3622, 2615, 2469, 3623, 2616, 2471, 3624, 2617, 2473}], 
        Line3DBox[{2472, 3520, 3131, 2470, 3519, 3130, 2468, 3518, 3129, 2466,
          3517, 3128, 2464, 3516, 3127, 2462, 3515, 3126, 2460, 3514, 1492, 
         2458, 3513, 3125, 2456, 3512, 3124, 2454, 3511, 3123, 2452, 3510, 
         3122, 2450, 3509, 3121, 2448, 3508, 3120, 2444, 3507, 3119, 2446}], 
        Line3DBox[{2475, 3132, 3521, 2474, 3625, 2618, 2476, 3626, 2619, 2477,
          3627, 2620, 2478, 3628, 2621, 2479, 3629, 2622, 2480, 3630, 2623, 
         2481, 3631, 3133, 3522, 2482, 1509, 2483, 3632, 2624, 2484, 3633, 
         2625, 2485, 3634, 2626, 2486, 3635, 2627, 2487, 3636, 2628, 2488}], 
        Line3DBox[{2490, 3134, 3523, 2489, 3135, 3524, 2491, 3637, 2629, 2492,
          3638, 2630, 2493, 3639, 2631, 2494, 3640, 2632, 2495, 3641, 2633, 
         2496, 3642, 3136, 3525, 2497, 3137, 3526, 2498, 1525, 2499, 3643, 
         2634, 2500, 3644, 2635, 2501, 3645, 2636, 2502, 3646, 2637, 2503}], 
        Line3DBox[{2505, 3138, 3527, 2504, 3139, 3528, 2506, 3140, 3529, 2507,
          3647, 2638, 2508, 3648, 2639, 2509, 3649, 2640, 2510, 3650, 2641, 
         2511, 3651, 3141, 3530, 2512, 3142, 3531, 2513, 3143, 3532, 2514, 
         1541, 2515, 3652, 2642, 2516, 3653, 2643, 2517, 3654, 2644, 2518}], 
        Line3DBox[{2520, 3144, 3533, 2519, 3145, 3534, 2521, 3146, 3535, 2522,
          3147, 3536, 2523, 3655, 2645, 2524, 3656, 2646, 2525, 3657, 2647, 
         2526, 3658, 3148, 3537, 2527, 3149, 3538, 2528, 3150, 3539, 2529, 
         3151, 3540, 2530, 1557, 2531, 3659, 2648, 2532, 3660, 2649, 2533}], 
        Line3DBox[{2535, 3152, 3541, 2534, 3153, 3542, 2536, 3154, 3543, 2537,
          3155, 3544, 2538, 3156, 3545, 2539, 3661, 2650, 2540, 3662, 2651, 
         2541, 3663, 3157, 3546, 2542, 3158, 3547, 2543, 3159, 3548, 2544, 
         3160, 3549, 2545, 3161, 3550, 2546, 1573, 2547, 3664, 2652, 2548}], 
        Line3DBox[{2562, 2659, 1593, 2561, 3562, 3172, 2560, 3561, 3171, 2559,
          3560, 3170, 2558, 3559, 3169, 2557, 3558, 3168, 2556, 3557, 3167, 
         3666, 2555, 2653, 3665, 2554, 3556, 3166, 2553, 3555, 3165, 2552, 
         3554, 3164, 2551, 3553, 3163, 2550, 3552, 3162, 2549, 3551, 2657, 
         2656, 2658}], 
        Line3DBox[{2661, 2974, 1820, 2660, 3773, 2883, 2662, 3774, 2884, 2663,
          3775, 2885, 2664, 3776, 2886, 2665, 3777, 2887, 2666, 3778, 2888, 
         2667, 3779, 3174, 3668, 2668, 3780, 2889, 2669, 3781, 2890, 2670, 
         3782, 2891, 2671, 3783, 2892, 2672, 3784, 2893, 2673, 3277, 3877, 
         2894, 2975}], 
        Line3DBox[{2675, 3175, 3669, 2674, 1835, 2676, 3785, 2895, 2677, 3786,
          2896, 2678, 3787, 2897, 2679, 3788, 2898, 2680, 3789, 2899, 2681, 
         3790, 3176, 3670, 2682, 3177, 3671, 2683, 3791, 2900, 2684, 3792, 
         2901, 2685, 3793, 2902, 2686, 3794, 2903, 2687, 3795, 2904, 2688}], 
        Line3DBox[{2690, 3178, 3672, 2689, 3179, 3673, 2691, 1851, 2692, 3796,
          2905, 2693, 3797, 2906, 2694, 3798, 2907, 2695, 3799, 2908, 2696, 
         3800, 3180, 3674, 2697, 3181, 3675, 2698, 3182, 3676, 2699, 3801, 
         2909, 2700, 3802, 2910, 2701, 3803, 2911, 2702, 3804, 2912, 2703}], 
        Line3DBox[{2705, 3183, 3677, 2704, 3184, 3678, 2706, 3185, 3679, 2707,
          1867, 2708, 3805, 2913, 2709, 3806, 2914, 2710, 3807, 2915, 2711, 
         3808, 3186, 3680, 2712, 3187, 3681, 2713, 3188, 3682, 2714, 3189, 
         3683, 2715, 3809, 2916, 2716, 3810, 2917, 2717, 3811, 2918, 2718}], 
        Line3DBox[{2720, 3190, 3684, 2719, 3191, 3685, 2721, 3192, 3686, 2722,
          3193, 3687, 2723, 1883, 2724, 3812, 2919, 2725, 3813, 2920, 2726, 
         3814, 3194, 3688, 2727, 3195, 3689, 2728, 3196, 3690, 2729, 3197, 
         3691, 2730, 3198, 3692, 2731, 3815, 2921, 2732, 3816, 2922, 2733}], 
        Line3DBox[{2735, 3199, 3693, 2734, 3200, 3694, 2736, 3201, 3695, 2737,
          3202, 3696, 2738, 3203, 3697, 2739, 1899, 2740, 3817, 2923, 2741, 
         3818, 3204, 3698, 2742, 3205, 3699, 2743, 3206, 3700, 2744, 3207, 
         3701, 2745, 3208, 3702, 2746, 3209, 3703, 2747, 3819, 2924, 2748}], 
        Line3DBox[{2750, 3210, 3704, 2749, 3211, 3705, 2751, 3212, 3706, 2752,
          3213, 3707, 2753, 3214, 3708, 2754, 3215, 3709, 2755, 1915, 2756, 
         3820, 3216, 3710, 2757, 3217, 3711, 2758, 3218, 3712, 2759, 3219, 
         3713, 2760, 3220, 3714, 2761, 3221, 3715, 2762, 3222, 3716, 2763}], 
        Line3DBox[{2767, 3821, 2925, 2765, 3822, 2926, 2769, 3823, 2927, 2771,
          3824, 2928, 2773, 3825, 2929, 2775, 3826, 2930, 2777, 3827, 2931, 
         2779, 3828, 1932, 2781, 3829, 2932, 2783, 3830, 2933, 2785, 3831, 
         2934, 2787, 3832, 2935, 2789, 3833, 2936, 2791, 3834, 2937, 2793}], 
        Line3DBox[{2792, 3730, 3235, 2790, 3729, 3234, 2788, 3728, 3233, 2786,
          3727, 3232, 2784, 3726, 3231, 2782, 3725, 3230, 2780, 3724, 1931, 
         2778, 3723, 3229, 2776, 3722, 3228, 2774, 3721, 3227, 2772, 3720, 
         3226, 2770, 3719, 3225, 2768, 3718, 3224, 2764, 3717, 3223, 2766}], 
        Line3DBox[{2795, 3236, 3731, 2794, 3835, 2938, 2796, 3836, 2939, 2797,
          3837, 2940, 2798, 3838, 2941, 2799, 3839, 2942, 2800, 3840, 2943, 
         2801, 3841, 3237, 3732, 2802, 1948, 2803, 3842, 2944, 2804, 3843, 
         2945, 2805, 3844, 2946, 2806, 3845, 2947, 2807, 3846, 2948, 2808}], 
        Line3DBox[{2810, 3238, 3733, 2809, 3239, 3734, 2811, 3847, 2949, 2812,
          3848, 2950, 2813, 3849, 2951, 2814, 3850, 2952, 2815, 3851, 2953, 
         2816, 3852, 3240, 3735, 2817, 3241, 3736, 2818, 1964, 2819, 3853, 
         2954, 2820, 3854, 2955, 2821, 3855, 2956, 2822, 3856, 2957, 2823}], 
        Line3DBox[{2825, 3242, 3737, 2824, 3243, 3738, 2826, 3244, 3739, 2827,
          3857, 2958, 2828, 3858, 2959, 2829, 3859, 2960, 2830, 3860, 2961, 
         2831, 3861, 3245, 3740, 2832, 3246, 3741, 2833, 3247, 3742, 2834, 
         1980, 2835, 3862, 2962, 2836, 3863, 2963, 2837, 3864, 2964, 2838}], 
        Line3DBox[{2840, 3248, 3743, 2839, 3249, 3744, 2841, 3250, 3745, 2842,
          3251, 3746, 2843, 3865, 2965, 2844, 3866, 2966, 2845, 3867, 2967, 
         2846, 3868, 3252, 3747, 2847, 3253, 3748, 2848, 3254, 3749, 2849, 
         3255, 3750, 2850, 1996, 2851, 3869, 2968, 2852, 3870, 2969, 2853}], 
        Line3DBox[{2855, 3256, 3751, 2854, 3257, 3752, 2856, 3258, 3753, 2857,
          3259, 3754, 2858, 3260, 3755, 2859, 3871, 2970, 2860, 3872, 2971, 
         2861, 3873, 3261, 3756, 2862, 3262, 3757, 2863, 3263, 3758, 2864, 
         3264, 3759, 2865, 3265, 3760, 2866, 2012, 2867, 3874, 2972, 2868}], 
        Line3DBox[{2882, 2979, 2032, 2881, 3772, 3276, 2880, 3771, 3275, 2879,
          3770, 3274, 2878, 3769, 3273, 2877, 3768, 3272, 2876, 3767, 3271, 
         3876, 2875, 2973, 3875, 2874, 3766, 3270, 2873, 3765, 3269, 2872, 
         3764, 3268, 2871, 3763, 3267, 2870, 3762, 3266, 2869, 3761, 2977, 
         2976, 2978}]}, 
       {GrayLevel[0.2], 
        Line3DBox[{749, 957, 3278, 750, 970, 776, 3373, 984, 790, 3378, 998, 
         804, 3385, 1012, 818, 3394, 1026, 832, 3405, 1040, 846, 1054, 3320, 
         860, 1068, 3332, 874, 3420, 1082, 888, 3424, 1096, 902, 3430, 1110, 
         916, 3438, 1124, 930, 3447, 1138, 944}], 
        Line3DBox[{751, 958, 3279, 752, 971, 3289, 777, 985, 791, 3379, 999, 
         805, 3386, 1013, 819, 3395, 1027, 833, 3406, 1041, 847, 1055, 3321, 
         861, 1069, 3333, 875, 1083, 3343, 889, 3425, 1097, 903, 3431, 1111, 
         917, 3439, 1125, 931, 3448, 1139, 945}], 
        Line3DBox[{753, 959, 3280, 754, 972, 3290, 778, 986, 3299, 792, 1000, 
         806, 3387, 1014, 820, 3396, 1028, 834, 3407, 1042, 848, 1056, 3322, 
         862, 1070, 3334, 876, 1084, 3344, 890, 1098, 3352, 904, 3432, 1112, 
         918, 3440, 1126, 932, 3449, 1140, 946}], 
        Line3DBox[{755, 960, 3281, 756, 973, 3291, 779, 987, 3300, 793, 1001, 
         3307, 807, 1015, 821, 3397, 1029, 835, 3408, 1043, 849, 1057, 3323, 
         863, 1071, 3335, 877, 1085, 3345, 891, 1099, 3353, 905, 1113, 3359, 
         919, 3441, 1127, 933, 3450, 1141, 947}], 
        Line3DBox[{757, 961, 3282, 758, 974, 3292, 780, 988, 3301, 794, 1002, 
         3308, 808, 1016, 3313, 822, 1030, 836, 3409, 1044, 850, 1058, 3324, 
         864, 1072, 3336, 878, 1086, 3346, 892, 1100, 3354, 906, 1114, 3360, 
         920, 1128, 3364, 934, 3451, 1142, 948}], 
        Line3DBox[{759, 962, 3283, 760, 975, 3293, 781, 989, 3302, 795, 1003, 
         3309, 809, 1017, 3314, 823, 1031, 3317, 837, 1045, 851, 1059, 3325, 
         865, 1073, 3337, 879, 1087, 3347, 893, 1101, 3355, 907, 1115, 3361, 
         921, 1129, 3365, 935, 1143, 3367, 949}], 
        Line3DBox[{8, 2043, 23, 2057, 38, 2072, 53, 2087, 68, 2102, 83, 2117, 
         98, 2132, 113, 2147, 128, 2162, 143, 2177, 158, 2192, 173, 2207, 188,
          2222, 203, 2236, 218}], 
        Line3DBox[{761, 3368, 963, 762, 3370, 976, 782, 3374, 990, 796, 3380, 
         1004, 810, 3388, 1018, 824, 3398, 1032, 838, 3410, 1046, 852, 1060, 
         866, 3418, 1074, 880, 3421, 1088, 894, 3426, 1102, 908, 3433, 1116, 
         922, 3442, 1130, 936, 3452, 1144, 950}], 
        Line3DBox[{763, 964, 3284, 764, 3371, 977, 783, 3375, 991, 797, 3381, 
         1005, 811, 3389, 1019, 825, 3399, 1033, 839, 3411, 1047, 853, 1061, 
         3326, 867, 1075, 881, 3422, 1089, 895, 3427, 1103, 909, 3434, 1117, 
         923, 3443, 1131, 937, 3453, 1145, 951}], 
        Line3DBox[{765, 965, 3285, 766, 978, 3294, 784, 3376, 992, 798, 3382, 
         1006, 812, 3390, 1020, 826, 3400, 1034, 840, 3412, 1048, 854, 1062, 
         3327, 868, 1076, 3338, 882, 1090, 896, 3428, 1104, 910, 3435, 1118, 
         924, 3444, 1132, 938, 3454, 1146, 952}], 
        Line3DBox[{767, 966, 3286, 768, 979, 3295, 785, 993, 3303, 799, 3383, 
         1007, 813, 3391, 1021, 827, 3401, 1035, 841, 3413, 1049, 855, 1063, 
         3328, 869, 1077, 3339, 883, 1091, 3348, 897, 1105, 911, 3436, 1119, 
         925, 3445, 1133, 939, 3455, 1147, 953}], 
        Line3DBox[{769, 967, 3287, 770, 980, 3296, 786, 994, 3304, 800, 1008, 
         3310, 814, 3392, 1022, 828, 3402, 1036, 842, 3414, 1050, 856, 1064, 
         3329, 870, 1078, 3340, 884, 1092, 3349, 898, 1106, 3356, 912, 1120, 
         926, 3446, 1134, 940, 3456, 1148, 954}], 
        Line3DBox[{771, 968, 3288, 772, 981, 3297, 787, 995, 3305, 801, 1009, 
         3311, 815, 1023, 3315, 829, 3403, 1037, 843, 3415, 1051, 857, 1065, 
         3330, 871, 1079, 3341, 885, 1093, 3350, 899, 1107, 3357, 913, 1121, 
         3362, 927, 1135, 941, 3457, 1149, 955}], 
        Line3DBox[{773, 1151, 1152, 774, 982, 3298, 788, 996, 3306, 802, 1010,
          3312, 816, 1024, 3316, 830, 1038, 3318, 844, 3416, 1052, 858, 1066, 
         3331, 872, 1080, 3342, 886, 1094, 3351, 900, 1108, 3358, 914, 1122, 
         3363, 928, 1136, 3366, 942, 1154, 1155, 1156}], 
        Line3DBox[{943, 1137, 1153, 929, 1123, 3437, 915, 1109, 3429, 901, 
         1095, 3423, 887, 1081, 3419, 873, 1067, 3417, 859, 3319, 1053, 845, 
         1039, 3404, 831, 1025, 3393, 817, 1011, 3384, 803, 997, 3377, 789, 
         983, 3372, 775, 969, 3369, 748, 956, 1150, 1157}], 
        Line3DBox[{1159, 1382, 3563, 1160, 1396, 1188, 3463, 1411, 1203, 3468,
          1426, 1218, 3475, 1441, 1233, 3484, 1456, 1248, 3495, 1471, 1263, 
         3508, 1486, 3612, 1278, 1501, 3625, 1293, 3524, 1516, 1308, 3528, 
         1531, 1323, 3534, 1546, 1338, 3542, 1561, 1353, 3552, 1576, 1368}], 
        Line3DBox[{1161, 1383, 3564, 1162, 1397, 3575, 1189, 1412, 1204, 3469,
          1427, 1219, 3476, 1442, 1234, 3485, 1457, 1249, 3496, 1472, 1264, 
         3509, 1487, 3613, 1279, 1502, 3626, 1294, 1517, 3637, 1309, 3529, 
         1532, 1324, 3535, 1547, 1339, 3543, 1562, 1354, 3553, 1577, 1369}], 
        Line3DBox[{1163, 1384, 3565, 1164, 1398, 3576, 1190, 1413, 3586, 1205,
          1428, 1220, 3477, 1443, 1235, 3486, 1458, 1250, 3497, 1473, 1265, 
         3510, 1488, 3614, 1280, 1503, 3627, 1295, 1518, 3638, 1310, 1533, 
         3647, 1325, 3536, 1548, 1340, 3544, 1563, 1355, 3554, 1578, 1370}], 
        Line3DBox[{1165, 1385, 3566, 1166, 1399, 3577, 1191, 1414, 3587, 1206,
          1429, 3595, 1221, 1444, 1236, 3487, 1459, 1251, 3498, 1474, 1266, 
         3511, 1489, 3615, 1281, 1504, 3628, 1296, 1519, 3639, 1311, 1534, 
         3648, 1326, 1549, 3655, 1341, 3545, 1564, 1356, 3555, 1579, 1371}], 
        Line3DBox[{1167, 1386, 3567, 1168, 1400, 3578, 1192, 1415, 3588, 1207,
          1430, 3596, 1222, 1445, 3602, 1237, 1460, 1252, 3499, 1475, 1267, 
         3512, 1490, 3616, 1282, 1505, 3629, 1297, 1520, 3640, 1312, 1535, 
         3649, 1327, 1550, 3656, 1342, 1565, 3661, 1357, 3556, 1580, 1372}], 
        Line3DBox[{1169, 1387, 3568, 1170, 1401, 3579, 1193, 1416, 3589, 1208,
          1431, 3597, 1223, 1446, 3603, 1238, 1461, 3607, 1253, 1476, 1268, 
         3513, 1491, 3617, 1283, 1506, 3630, 1298, 1521, 3641, 1313, 1536, 
         3650, 1328, 1551, 3657, 1343, 1566, 3662, 1358, 1581, 3665, 1373}], 
        Line3DBox[{1171, 1388, 3569, 1173, 1402, 3580, 1194, 1417, 3590, 1209,
          1432, 3598, 1224, 1447, 3604, 1239, 1462, 3608, 1254, 1477, 3610, 
         1269, 1492, 3618, 1284, 1507, 3631, 1299, 1522, 3642, 1314, 1537, 
         3651, 1329, 1552, 3658, 1344, 1567, 3663, 1359, 1582, 3666, 1374}], 
        Line3DBox[{1175, 1390, 3570, 1176, 3461, 1404, 1196, 3465, 1419, 1211,
          3471, 1434, 1226, 3479, 1449, 1241, 3489, 1464, 1256, 3501, 1479, 
         1271, 3515, 1494, 3619, 1286, 1509, 1301, 3526, 1524, 1316, 3531, 
         1539, 1331, 3538, 1554, 1346, 3547, 1569, 1361, 3558, 1584, 1376}], 
        Line3DBox[{1177, 1391, 3571, 1178, 1405, 3581, 1197, 3466, 1420, 1212,
          3472, 1435, 1227, 3480, 1450, 1242, 3490, 1465, 1257, 3502, 1480, 
         1272, 3516, 1495, 3620, 1287, 1510, 3632, 1302, 1525, 1317, 3532, 
         1540, 1332, 3539, 1555, 1347, 3548, 1570, 1362, 3559, 1585, 1377}], 
        Line3DBox[{1179, 1392, 3572, 1180, 1406, 3582, 1198, 1421, 3591, 1213,
          3473, 1436, 1228, 3481, 1451, 1243, 3491, 1466, 1258, 3503, 1481, 
         1273, 3517, 1496, 3621, 1288, 1511, 3633, 1303, 1526, 3643, 1318, 
         1541, 1333, 3540, 1556, 1348, 3549, 1571, 1363, 3560, 1586, 1378}], 
        Line3DBox[{1181, 1393, 3573, 1182, 1407, 3583, 1199, 1422, 3592, 1214,
          1437, 3599, 1229, 3482, 1452, 1244, 3492, 1467, 1259, 3504, 1482, 
         1274, 3518, 1497, 3622, 1289, 1512, 3634, 1304, 1527, 3644, 1319, 
         1542, 3652, 1334, 1557, 1349, 3550, 1572, 1364, 3561, 1587, 1379}], 
        Line3DBox[{1183, 1394, 3574, 1184, 1408, 3584, 1200, 1423, 3593, 1215,
          1438, 3600, 1230, 1453, 3605, 1245, 3493, 1468, 1260, 3505, 1483, 
         1275, 3519, 1498, 3623, 1290, 1513, 3635, 1305, 1528, 3645, 1320, 
         1543, 3653, 1335, 1558, 3659, 1350, 1573, 1365, 3562, 1588, 1380}], 
        Line3DBox[{1185, 1590, 1591, 3667, 1186, 1409, 3585, 1201, 1424, 3594,
          1216, 1439, 3601, 1231, 1454, 3606, 1246, 1469, 3609, 1261, 3506, 
         1484, 1276, 3520, 1499, 3624, 1291, 1514, 3636, 1306, 1529, 3646, 
         1321, 1544, 3654, 1336, 1559, 3660, 1351, 1574, 3664, 1366, 1593, 
         1594, 1595}], 
        Line3DBox[{1367, 1575, 3551, 1592, 1352, 1560, 3541, 1337, 1545, 3533,
          1322, 1530, 3527, 1307, 1515, 3523, 1292, 1500, 3521, 1277, 3611, 
         1485, 3507, 1262, 1470, 3494, 1247, 1455, 3483, 1232, 1440, 3474, 
         1217, 1425, 3467, 1202, 1410, 3462, 1187, 1395, 3459, 1158, 1381, 
         1589, 1596}], 
        Line3DBox[{1375, 1583, 3557, 1360, 1568, 3546, 1345, 1553, 3537, 1330,
          1538, 3530, 1315, 1523, 3525, 1300, 1508, 3522, 1285, 1493, 3514, 
         1270, 1478, 3500, 1255, 1463, 3488, 1240, 1448, 3478, 1225, 1433, 
         3470, 1210, 1418, 3464, 1195, 1403, 3460, 1174, 1389, 3458, 1172}], 
        Line3DBox[{1598, 1821, 3773, 1599, 1835, 1627, 3673, 1850, 1642, 3678,
          1865, 1657, 3685, 1880, 1672, 3694, 1895, 1687, 3705, 1910, 1702, 
         3718, 1925, 3822, 1717, 1940, 3835, 1732, 3734, 1955, 1747, 3738, 
         1970, 1762, 3744, 1985, 1777, 3752, 2000, 1792, 3762, 2015, 1807}], 
        Line3DBox[{1600, 1822, 3774, 1601, 1836, 3785, 1628, 1851, 1643, 3679,
          1866, 1658, 3686, 1881, 1673, 3695, 1896, 1688, 3706, 1911, 1703, 
         3719, 1926, 3823, 1718, 1941, 3836, 1733, 1956, 3847, 1748, 3739, 
         1971, 1763, 3745, 1986, 1778, 3753, 2001, 1793, 3763, 2016, 1808}], 
        Line3DBox[{1602, 1823, 3775, 1603, 1837, 3786, 1629, 1852, 3796, 1644,
          1867, 1659, 3687, 1882, 1674, 3696, 1897, 1689, 3707, 1912, 1704, 
         3720, 1927, 3824, 1719, 1942, 3837, 1734, 1957, 3848, 1749, 1972, 
         3857, 1764, 3746, 1987, 1779, 3754, 2002, 1794, 3764, 2017, 1809}], 
        Line3DBox[{1604, 1824, 3776, 1605, 1838, 3787, 1630, 1853, 3797, 1645,
          1868, 3805, 1660, 1883, 1675, 3697, 1898, 1690, 3708, 1913, 1705, 
         3721, 1928, 3825, 1720, 1943, 3838, 1735, 1958, 3849, 1750, 1973, 
         3858, 1765, 1988, 3865, 1780, 3755, 2003, 1795, 3765, 2018, 1810}], 
        Line3DBox[{1606, 1825, 3777, 1607, 1839, 3788, 1631, 1854, 3798, 1646,
          1869, 3806, 1661, 1884, 3812, 1676, 1899, 1691, 3709, 1914, 1706, 
         3722, 1929, 3826, 1721, 1944, 3839, 1736, 1959, 3850, 1751, 1974, 
         3859, 1766, 1989, 3866, 1781, 2004, 3871, 1796, 3766, 2019, 1811}], 
        Line3DBox[{1608, 1826, 3778, 1609, 1840, 3789, 1632, 1855, 3799, 1647,
          1870, 3807, 1662, 1885, 3813, 1677, 1900, 3817, 1692, 1915, 1707, 
         3723, 1930, 3827, 1722, 1945, 3840, 1737, 1960, 3851, 1752, 1975, 
         3860, 1767, 1990, 3867, 1782, 2005, 3872, 1797, 2020, 3875, 1812}], 
        Line3DBox[{1610, 1827, 3779, 1612, 1841, 3790, 1633, 1856, 3800, 1648,
          1871, 3808, 1663, 1886, 3814, 1678, 1901, 3818, 1693, 1916, 3820, 
         1708, 1931, 3828, 1723, 1946, 3841, 1738, 1961, 3852, 1753, 1976, 
         3861, 1768, 1991, 3868, 1783, 2006, 3873, 1798, 2021, 3876, 1813}], 
        Line3DBox[{1614, 1829, 3780, 1615, 3671, 1843, 1635, 3675, 1858, 1650,
          3681, 1873, 1665, 3689, 1888, 1680, 3699, 1903, 1695, 3711, 1918, 
         1710, 3725, 1933, 3829, 1725, 1948, 1740, 3736, 1963, 1755, 3741, 
         1978, 1770, 3748, 1993, 1785, 3757, 2008, 1800, 3768, 2023, 1815}], 
        Line3DBox[{1616, 1830, 3781, 1617, 1844, 3791, 1636, 3676, 1859, 1651,
          3682, 1874, 1666, 3690, 1889, 1681, 3700, 1904, 1696, 3712, 1919, 
         1711, 3726, 1934, 3830, 1726, 1949, 3842, 1741, 1964, 1756, 3742, 
         1979, 1771, 3749, 1994, 1786, 3758, 2009, 1801, 3769, 2024, 1816}], 
        Line3DBox[{1618, 1831, 3782, 1619, 1845, 3792, 1637, 1860, 3801, 1652,
          3683, 1875, 1667, 3691, 1890, 1682, 3701, 1905, 1697, 3713, 1920, 
         1712, 3727, 1935, 3831, 1727, 1950, 3843, 1742, 1965, 3853, 1757, 
         1980, 1772, 3750, 1995, 1787, 3759, 2010, 1802, 3770, 2025, 1817}], 
        Line3DBox[{1620, 1832, 3783, 1621, 1846, 3793, 1638, 1861, 3802, 1653,
          1876, 3809, 1668, 3692, 1891, 1683, 3702, 1906, 1698, 3714, 1921, 
         1713, 3728, 1936, 3832, 1728, 1951, 3844, 1743, 1966, 3854, 1758, 
         1981, 3862, 1773, 1996, 1788, 3760, 2011, 1803, 3771, 2026, 1818}], 
        Line3DBox[{1622, 1833, 3784, 1623, 1847, 3794, 1639, 1862, 3803, 1654,
          1877, 3810, 1669, 1892, 3815, 1684, 3703, 1907, 1699, 3715, 1922, 
         1714, 3729, 1937, 3833, 1729, 1952, 3845, 1744, 1967, 3855, 1759, 
         1982, 3863, 1774, 1997, 3869, 1789, 2012, 1804, 3772, 2027, 1819}], 
        Line3DBox[{1624, 2029, 2030, 3877, 1625, 1848, 3795, 1640, 1863, 3804,
          1655, 1878, 3811, 1670, 1893, 3816, 1685, 1908, 3819, 1700, 3716, 
         1923, 1715, 3730, 1938, 3834, 1730, 1953, 3846, 1745, 1968, 3856, 
         1760, 1983, 3864, 1775, 1998, 3870, 1790, 2013, 3874, 1805, 2032, 
         2033, 2034}], 
        Line3DBox[{1806, 2014, 3761, 2031, 1791, 1999, 3751, 1776, 1984, 3743,
          1761, 1969, 3737, 1746, 1954, 3733, 1731, 1939, 3731, 1716, 3821, 
         1924, 3717, 1701, 1909, 3704, 1686, 1894, 3693, 1671, 1879, 3684, 
         1656, 1864, 3677, 1641, 1849, 3672, 1626, 1834, 3669, 1597, 1820, 
         2028, 2035}], 
        Line3DBox[{1814, 2022, 3767, 1799, 2007, 3756, 1784, 1992, 3747, 1769,
          1977, 3740, 1754, 1962, 3735, 1739, 1947, 3732, 1724, 1932, 3724, 
         1709, 1917, 3710, 1694, 1902, 3698, 1679, 1887, 3688, 1664, 1872, 
         3680, 1649, 1857, 3674, 1634, 1842, 3670, 1613, 1828, 3668, 
         1611}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}},
     VertexNormals->CompressedData["
1:eJztyKENgwAQAMAPaMIGJRVY0g3wlYzQUN0xarEwQZMu0GBwaDbBg4ExKk5d
ctfHq3kmEVHmEelp/70V832YuksW+2+cqk+7vZe19t5777333nvvvffee++9
995777333nvvvffee++9995777333nvvvffee++9995777333nvvvffee++9
995777333nvvvffee++9995777333nvvvffee++9995777333nvvvffee++9
995777333nvvvffee++9995777333nvvvffee++9995777333nvvvffee++9
995777333nvvvffee++9995777333nvvvffee++9995777333nvvvffee++9
995777333nvvvffee++9995777333nvvvffee++9/7c/AM+BA6A=
      "]], {}}},
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{444.14580539305246`, 189.29866908279013`},
  ImageSizeRaw->Automatic,
  Lighting->{{"Ambient", 
     GrayLevel[0.5]}, {"Directional", 
     GrayLevel[0.5], 
     ImageScaled[{0, 2, 2}]}, {"Directional", 
     GrayLevel[0.5], 
     ImageScaled[{2, 2, 2}]}, {"Directional", 
     GrayLevel[0.5], 
     ImageScaled[{2, 0, 2}]}},
  PlotRange->All,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-0.19486405013690442`, -3.3687163769711317`, 
   0.25254301314970695`},
  ViewVertical->{-0.01589435442446188, -0.241547954158412, 
   0.9702587053664168}]], "Output",
 CellChangeTimes->{{3.8229845798134108`*^9, 3.822984626133574*^9}, {
   3.8229846697773657`*^9, 3.822984703867783*^9}, 3.822984757707753*^9, {
   3.822984834350871*^9, 3.822984863461046*^9}, {3.822998053228525*^9, 
   3.822998093835836*^9}, 3.8229981494403687`*^9},
 CellLabel->
  "Out[328]=",ExpressionUUID->"b6bc2920-fa36-45f6-ac38-f30139432699"]
}, Open  ]],

Cell["We can also draw them on the original plot", "Text",
 CellChangeTimes->{{3.82299711180614*^9, 
  3.8229971191969137`*^9}},ExpressionUUID->"5f1c4167-382c-42bf-83ff-\
ef71614c9388"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decisionr", "=", 
  RowBox[{"r", "/.", 
   RowBox[{
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2"}], "}"}], ".", 
          RowBox[{"{", 
           RowBox[{"r", ",", "\[Theta]"}], "}"}]}], "+", "b"}], "\[Equal]", 
        "fx"}], "/.", 
       RowBox[{"Join", "[", 
        RowBox[{"wsol\[Lambda]", ",", "bsol\[Lambda]"}], "]"}]}], ",", "r"}], 
     "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.822997263298644*^9, 3.822997303650529*^9}},
 CellLabel->
  "In[301]:=",ExpressionUUID->"a9f7f073-5780-4f58-bad6-d3d68a1af1b6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "0.5209390826753817`"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "2.5235048826932087`"}], "+", 
    RowBox[{"1.`", " ", "fx"}], "+", 
    RowBox[{"0.025164629891823775`", " ", "\[Theta]"}]}], ")"}]}]], "Output",
 CellChangeTimes->{{3.822997249842276*^9, 3.822997304574511*^9}, 
   3.822997512527205*^9, 3.8229978511952267`*^9},
 CellLabel->
  "Out[301]=",ExpressionUUID->"2ac18cec-4ec6-4e1f-b0f3-2b1e43b0cd0d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "nonsepdata", "]"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Keys", "[", "nonsepdata", "]"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"supportVectors3D", ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"PolarPlot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"decisionr", "/.", 
       RowBox[{"fx", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", 
       RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}]}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822982966741523*^9, 3.822983017155324*^9}, {
  3.8229841909463043`*^9, 3.822984249421977*^9}, {3.8229971304059*^9, 
  3.822997135497827*^9}, {3.822997309219988*^9, 3.822997326903941*^9}, {
  3.8229981368272343`*^9, 
  3.8229981372088337`*^9}},ExpressionUUID->"ab3cf337-017d-448e-9003-\
29731fe45794"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.0009402659049429163, 0.11141564362630568`}, {
          0.6985681983270928, -0.36790456437588814`}, {-0.00295604144687557, \
-0.18777988106197538`}, {-0.23888242209918228`, 
          0.034500797441814446`}, {-0.02990472311744523, 
          0.05854307847237184}, {-0.4835702248162677, 0.24533902079622932`}, {
          0.20390719257284282`, 0.10887728322031986`}, {
          0.10538241515767546`, -0.38172681750042337`}, {-0.1824956607100494, \
-0.6762831160175996}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{
          2.041251388907825, -0.35539451182767}, {-0.729497294004517, 
          1.9430725958833286`}, {-1.9582099623680669`, \
-0.14589014711693948`}, {
          0.7549130603093653, -1.6895760872115724`}, {-0.5094375357680065, 
          1.9943197246955076`}, {-1.8706064275341703`, \
-0.14104829949370085`}, {1.4543618707479875`, -1.18363578035018}, {
          1.853565067751745, -0.4895674667312021}, {
          1.9874646392084663`, -0.5256987415568544}, {0.2956806496520435, 
          2.0791324971956673`}}]}}}, {{}, {}}}, {{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          GrayLevel[0]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.7549130603093653, -1.6895760872115724`}, {-1.8706064275341703`, \
-0.14104829949370085`}}]}}}, {{}, {}}}, {{{{}, {}}, {}, {{{}, {}, 
         TagBox[{
           Hue[0.67, 0.6, 0.6], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1:eJwV13c81e8XAPBKZihJQ5EVqUihpHJUKq1vJUlKKFHKKCKU0EAyk5W9k72J
DrI32fu683NTESVZv8/vL6/363PvfXye55zznCN501rn9oply5Y5cCxb9v+/
fxY4rs4XsPGuob9xt0NkKf3UffEq0unUiyusrhmg3PP3t16StlDk9tx3zQKl
C0u2a5K+4NWTebjKFnd7TltO57PxzUKyfIWBE7oqPFKOI612zGdV4GNXXGdr
4XiK9LFnk1Y5X57j2z8PPF7ksTHZ9mRt6dXX2JvLPL+R9LzTWqnEBB/8uTos
LDGXjSIYGV7q4I/xKz2y03LYeHVBP8Wm8i2Klyu7ypKG3jcjxebvcMlovi0s
m42bxPmuzvCHYNJEx+z9LDaG3tzpeO5KOF5MNOxoymTjg7XLLt2ef49L1QsK
sqRtK551WcdGoruCl3V1OhtzlntHpj+KwcDuhcurSPfNVaSIacfiRGZ4+ek0
Nnb9TDz4SjQOHwk+kC5IZSPHG9ZOTYxHnQDNLWMf2PivgVs6ICABc8A0nJu0
7OnLXX23EjH1Pl0OktlY/1k0+iJPMqac6PQ3jmfj0poLe7oupOKXG1CmH8fG
psCWe8NSHzFXJu7B6Vg2TmZz1w9Nf8Tsq59tRaPZ6P4hdevn0HQk8gqY98PJ
95lX61qyzkIRzwM39oSxcdl4gXJ/bxYGbiw1+hnCxr8+n3syjmSj84mbnPrv
2DgnGff6hHAOht2cYQz4sTFCMOHrroJcXJ67p+K+Lxuji84Gd4vnYapkr/zM
GzaWCYh/dfTIQxOtwyl/vdi4gZlxOU0/H0s8vc0ynrMx+Mr2os//CnDFWasr
9EfkeW82rHE/XIJ/5L1dmLZsPOezmuqcUYJNU8Zbxh6Qv//L0v7e1k+YWbkK
yy3ZqHDK1VVheSkychLzpG+zkaX9K/JAVRkaXFXgc9Nh40q67/SOhHKUiFf8
w3eBjdo3o7IvDZZjjpjybZ9zbFSRePDBfl0F8s3GtTprs/HtT2fejy8qUKJB
6sfiYTYOWV9uajStRLZo+cZoOTZq7t5uOSJdhfWbzkRly7ARqQ2GCdeq0Jrv
eH6pJBsPrnj9+ubbKkztsnhfupmNs9ML+g0rqvF+637TW6vJ+DWNFDxBqcZf
F32bzv0m0NhHe9VoRC0q/uR7E/mJwN1P5g4pCTbiOl6XFs4iAs0orJzrRxrx
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

            "]]}, Annotation[#, "Charting`Private`Tag$43712#1"]& ], 
         TagBox[{
           Hue[0.9060679774997897, 0.6, 0.6], 
           Directive[
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1: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
D0PzoE8oBxu1B6Yqjn3CYfD/5GdeM8DE84etj6qGjFD9R0vnSmDiYdtPQVuv
j4GFx51C5nEm8q8YTCt8PAZDUfXfJQ8zca+55YqbbmOwR9xP7dJ+JroxA+Xe
FowBlo6j93YmKnPGCr7YPQ6ny+/1lXMxceWtrPj1s+PQd6dUj6+agXEbovhH
3kzCsb/MizR9BiaYu+v++DoJMwY/VW+dZ+C3/64KGqZMgseT0F0lmgyMluDs
SBmYBFHMaX+lyED2OInFFRr/INfQWzxChIGfK7/IBnBOQe7y4D+Nf+nIceng
p/qiKRD6fu1cyVU6npIS90qtmwLi2etj+efpGPPxSo5nF+VhmStJGnQ08VGz
OM6YAjMdD6k3h+iodPZe/1XpaXhUJfWqZi215zGFucM9pmGsQm6vZAkN01XS
Ht7Wn4HV3IIZ/dI09GRKbg03mYE/JyUquLfTcFrw1puuBzOgJL789k5hGjoP
3710wmUG2pQ/H9bmpGH00afVVZkz0GEo+1OnYwF35VyU6hCehSd1ikbbPy7g
a8WsTU2Ns/BiTMFScGAeO6ZFckO6qddHYosl2ufxuY/ZbdOxWfi81rtqX+08
Jo6dyu1lm4OgoKQp+dx5lB7iUQmWmoPLa8/WLfOZx3E2oUs77OfgUvXqw6Fq
8/jsD6344o55wEu0Z8sC5/Cj4kGpF/vm4Zxk+kcLzzmsPDyr9vXIPPzaKh5a
7zyHu4a3uVSdnYdaW9cmd6s5rL6YuXnm8TyULqjkVZ+aQ52F8HNHiuahWqOt
xWh6FjWdrER/3lgAj92zh0aVZzEVafnTdxdgp17umoqDs7jC27BBxnoBvLZO
WkXsnsV+Beljnu8WQKsCO8+smUWpuMQ83sQFuCm2NUO/awYNTgnxIRsNdhYX
+N63nUHeD+HbBb7SwDX98IvkpGnUK7qx49V3GhjsK7o1Hj6Nkiz3Y71xNLij
aaOx9cs0Vr9KCPHJp4HktOGm53bTGOySNx85QAPt9TIq/05P4+aer+/s9tJh
49Tv4am+KaQJP7nblkWHnDGWrsmaKXyWxGV0tJAOOsq+YaocU2h+88sNnwo6
vO48KHZk/B9u4gkzO/iXDlekjTKd0v9hySbmvS0kHbTL+XWzzv5Ddqg6FqLE
gEGNxHSXZ5NoXpzTcTqTAXdbgyvIknGUFMp6WJbPgBm2bNXE2HHUK44ugVIG
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
jyqKx/w89j9WdXWn
            "]]}, 
          Annotation[#, "Charting`Private`Tag$43712#2"]& ], 
         TagBox[{
           Hue[0.1421359549995791, 0.6, 0.6], 
           Directive[
            RGBColor[0.560181, 0.691569, 0.194885], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1:eJwV13c8VX8YB3AlkpJQEUkSWUlLIh4VDRIpZUVGWjZJmWWUUhQlDVFmZiK7
x57Ze++97ji3jOR3fn/d1/t1zr33nO94vs9H2MxW5/pqJiYmd2Ympv8/08t/
WJz4xsC0W1ssw2Zi89LUyk6Kkv5ZXlK0aHkd30jYda0mTfnkwNJreRcjMyul
ulIZuF+yPI6TwwsZbhOHkkm3vQjS/WTpi/e1xn67ki5535i7veApdmt226uS
Llwrcbp4QxAG9A1GryU9XDOD1tmvMCZ9a3BpCgOf8H0W5rB8jdTSkKMepOcS
0ksjuN9iwyXXsP2kG3++ZRHHd1hiuMrvSTID874bmazdEIF6hUPc0qRfrHtw
V84sEh080/WrkhjoYeSxwTjrM/75m77lTyL5fe3Ldq8topF/Zv8zX9KTlPw3
UTkxuC30SO5G0kvfD1G/borDHyG+GlwJDJw3CmW8z/uKyQaiiU+/MvBCvsyC
L3ci7sC/5f/iyfuvSg9fv5mEptc4D7TFMbBJbZKLmT0VH2gleimSXqOxa2Iw
PRVdjqs+exfLwN+rmjjyTb7hnTi5ljMxDLQ1uBdmkpGGvr57Tlh+YeC2duF9
+tcyUOvta+eIzwzsv3JrjHX9D2QaK7rZEsnAwboNkUkZPzA/QvfxvggGNrzw
dBhhz8KCWdf0qA8MVAs8zLKYnoMll5d60t8zUO6rLdwxycWhVdrl+I6B8Xq2
+5rX5SGn5YfO0rcMfO++81mAcT7Kp66sDw5h4AcrZd1K5gLcE2B87H4wA4G6
2q9XrwBb9BdlDF4xMExdeno2qQD3tx4y2hBEXv+4lnWVXiF+GtvUv/8ZA71O
xOwdTyhC99/W3Q+9GLirwwNSdUpxs+97Y4YHA+3vMicHJpdi5Z/wn2buDHzq
z8+4wV6GsUJH+KUeMJCNsS9qdVEZ8j5yPe/gyMDDC9VxPbIVGLX8eE+XBbke
O3xu83BUY4yRb8W0GQMjJXt3ON2sxhBfU+35a+T4bPq67ldxNcrcPsy7bMTA
BVkbftMHv3BcYU9w/iUGdhBbtQXHalCCo6id/yQDAwYfxZmb1OOOJSm5ahUG
dlbkhZcH1GPLNwXfu8oMXL7tc00spx43+hxayjzKwBBTNp7mzQ346oWbIbGP
gRJbtatmKxvw+x3+dxoCDGTZ1KGw9WATKle41N2fIfB3392zTUyt6Pkve2P4
JIG7i+lfHkm2YkWfn2D+GIEDH2s5pS+1Ykh2W+LUAIEbWNRoVrGtuN1SMo69
lUD9ogOF0ZptWGduU6KdT6DhOWOfybftyDVmbM38hMCxklNDLpJdeMCU6ZC3
D4FDVdzely924elppZFlLwJPBhZPS7t14e2TquuH7xMomWHEKK7pwsySUk/H
OwQuu78rCLPrRpdz8/2fNAlkZG2y7Urvwf16fi6HN5LPa9nnnyXQj6ezREGC
ncCnTvzCp/b1I4aWHOdjJTCb4RVbd6IfJfK3rowt01GBpmjbeqsfm3RHnM/P
0JGvLuRmWmY/fhmMUpOvpmPUUMifTzoDqPFJb9bPm47c1vMW+30HkWt3seqw
Bx2PSaUzDr4dxC2tKwvHHtBRddeqof0JgyjmHuLbb0fHJ0tqhUINgzh0feI4
5SodE854bizePoRHfX7pHTxCx7MWiSsi34ewdEOLj/YoDXf/IwRku4dx8Ifk
yNd+Gl6f3+y3mzKMxUdlVjF10ZDL0LGJe80Ixur2OLyro6GzTcqqHqkR9Kry
vhOURd7fNbJpj+sIKmYuSj3yp+Fk3mmx53yjmKjQyuK/h4YbxyZmHpwfQ7U/
otLKwjQMvmUvGGk6hkesO9Vm+Wk4f6v3YYHTGNr/LjeAjTRcPynYPPluDJ/y
mipHE1RcL/p63czoGE6cdnvxsICKxBE2/i/u4/iDcvOr/yXyuv/Ws9+iJ3B0
Q80W3vNUnFNcK5v3YwIXGXHaEaepePlwwPuC8gn8vVtTMUaBipW3OucyJibw
uOYubq+dVHJeQvl19k5i89k98tZTFExseTh67vskbru+XeqoBwV95N2EZHOm
MOxIecHJexT84Mfy07xqCs39/hiq21FQ1DLoWlDnFFLapuI1zCi479H6z82L
UygVZduy4xQFuZzC49kUp7FO33KejYOCUpInbwnkTKOvED8vbd8cJvDtX6hP
m8Er52UP1wvNYatLouL14hkc6dTxjuacQ3kBwVxK0wyKdJYXHZ6bxSTabuMZ
YgaFBM5cmkmaRWsXrTQ3uVncx2EznycxixeeRjyey5zFHWmXXJkEZrDDUmQL
a/ochq2xWV27bgbPHeLder94Do+te345eH4aLcOOFQ82zuGUCv8DltZpHGrK
3PSOOodvV6KOPQmaRvXS6BUNXgpGfX8jvmHNNG6zuZ1heZGCW/ryOvePTOLy
YLofUwUF38puo15pmsRA8VV3V2opmBdxr8C5cBKvKPJFLbRQMP6TTXj4x0ks
fLM1v2+Igq6nBUdCdSfxD2dytMMKBQM+fuI+XDKBsUO+qd8OU9HurfeS0odx
PGWoM/s4nIqPNd4I+fqP4+y/wutTUVS8rj8TWepMOoxn+GwCFU9mBLQeuDCO
iYpus38yqbjJhBr8k2Ucb/u+YOdroGLh2E62COsx9P+XNmK5moYBkpvupcqP
YmCq++eDpjQ04Nv42V1sFB1O3Rh+aUlDsT3PP6ptHsUPtD3RU3doGOExyls2
N4L+1XvDXzrTsMNMNtQ/ZgRvcPpoxD6j4XY9w6QdPCPIdK/Iaz6dhvEt870R
40P4S+fCksQaOjZJ9DfXtwyhvHphAYONjjtTQPpv0RD6m+3qy+Ogo82OBi61
j0MolnpqlxIvHZFy9WjEhSFUj1T+wiJJxyW716xe2YOocWfwQ8Z5OrqnTh1g
9RvAlLV/uJ+G0PFSTZrkOvsBDDt/wmdbGB3jfJbN1xoN4LqNhbpfPtLRZVDx
O2P/AIowWW2OiaFj4ytn63c9/XjC9UrvjSw6coU2fFx3qB/V7zS/7eqkY3Ls
XsmLuT1Y5W0S4SpA4Ic8TdbjQT2ou7i6+ZIQgdeyGVNi13vQ/1PASXERAof5
T7F0bezBlUy5xnxJAkM9FKtGTLtxLNjr5ZejBB442O4cxNqFAn9lcvQuE3h3
tOT5S/V2zB6zFzR/RmDi169dPsLteLbjNrvmCwLtbdaHOMy34fuCbW37X5Ln
QLectVJMG7qOzG6YfkNgaaB6/8tVbXjcdHP7rs8E3jMXKFPObMH2Y7ZXwzIJ
tFCyedbzvAXPCjrMy+YQ+JM32eSeRQvOOm65VZxHYIO5gvEHrhZ8yD9S0V5I
YIf+1+bEO804E+TrUFpN4CuF198pO5oQaiiU6F4CU55vV1FjNOLdveqfJ/sJ
fLC46+Hr6kbsZXPZKTlEvt/2w+oSLo3Yb6/xMIw8t9YeMxQQamjAeDNq2VEK
gWdSuZvPPapHFPb448nEwEUTsyemevV4QXTXMfvVDDTbnhPqIFOPw+L8p66u
YWDqY+9Bnow65HpxMU6UjYF74xRvCl6vxb1aOu/ucTLwTny+Ep08x9WtF7uE
BMlzfJ39IQP7avy3+E42YwfZV54SuZO7oxpzvItc1HYycLWp75jV/SrM9zMc
vCzCwNPPH6u9kKnEo/QpLiUJBvr12F2v7KrAPY9pC/GSDAw0cDFfeVKBp93X
NXFJM7B0muWs0VA5UuRVrzTKMPB1pdZwV2gZhpw8ELH1EANv3b8iRFEtw6GK
eTbDwwwc6+xtXaGWooNTzLV3cgwc4kxh5z5Xiisfs7vWkX0Ci6luKjNTCfLH
8iwmKJH3h+ic33ujEEcfHYz5q8ZArsyyD6s3F6LK28ODc6fIvuTyjujmggI8
0Zm+rvc02bfWjh+w5S/AsqYH/AlnGSidpNTL9D4fFbe9VWbTZODaH/n2rkQe
9ryabWj832ZDPyiaeZj35aHW2/MMPKkhzKhmykUBrWa2zdoMrDGMeHfWMgtn
hVPsanUY+JnZa3M4ZqK49HUdu4sMFA7Z7jHLl4lBIxaCHGSf5Fschd7VGXib
uc/miC7Zdw0JjlXszsBikGKUkL7abfOR3SMdd3ZZWGheZqCbQ5auj+x3vK5w
Yfn8FQZybz0Rm+efhuef94lVkN79rFSMNvgNFa9yHz2mx0BP677zuq9Tcces
BO8WfQaW3eF+wdqTgroM+uB90lKjMXzGgcm4jXVvaAfp3JQhhVVEArZLl2T5
GzBwtM3Bac7/K+5l2lPQT3rjVbuVDqF4dB8rrdhvSF43fnS8MCMW5ba9a3Qj
Hd55PiJaIwZjHoT3FJJuf+H68PFAFBKf6iaYyD6xrDdJ/ca9L8j7S+rPUdL6
GU9N1Tg+Yx8ljcWa9J5bP6R2fYnAgWTLLe9Iv4Z4wb/24eiuqy5WSPqr2aaB
tI/vsXPQTH6QtDfvqNWtyrdYz5yp8X8f+kXaKmAn4zX+4dG6xn2Vgf8kB9k7
dgZjqOBhZ2HSqtt9vwefC8I3HU7PJUk7f97x5TPlKfqkCMTsJX31ot010TO+
6JMhX/D/9RtWdbfNwBPVU7u7/v/+i95fdoGzjsjFw7/w/++XxQmsxCua4ouV
NXz/yP8PCDg+qPlGDSbVvssPkR5vBOlgVitItzhmWEQ6R+yuaezF+9D9JNvz
PWnD/sn5uQuP4ONztRgb0ieP2nPMLzwG179/axVJi/bv0ZuMfA6HOf4trCad
/eN+5GDUS0iKvrmnhBzfhYiB98UuITCjb3zFk3T03zPaoedCYb3V6qeHSI9N
p9GNdr6D7b/u4xA5f8NfxHN5iA+wj2/qTwDpd+NKpXGakTB2wdihhpz/nCU1
jzuZn6GtPyPdgvTBLr+DosJRoBietsgg19P2KxuWXYkYuHZV/xUr6ZMLfqf4
jOPAxdpy2Jdcf50JMb/jy+PheUWvwgq5Xv+2WzES3iVC0twEo49cz+Eht+4L
rEmGhkMzBqdJ1wlk1XpYp8CfH8dK48j9QMnnSeTc+Q3Mmr9/1Sf3i/291FvG
tO9whra2wJHcXx/u2o71xaTD6UHLywla5PUFWpa+YQZsNdlNdJP7MYqV9fnh
kh9QSgydkiH3663YvQ5PXmdD8gz1gj+5v0uH61jLz+bAh8kMqZdnyN8rXTb4
u5wDZ9p0OYPJetDGsc1F3TIPUuYeM3zI+uG8qprJVg5hV2TsaeHj5Pwmjm26
1IugoUF14iBzzLEezS7ekwXw4eBqJ4LMMVVNLzhHJgvAbE/heNoxBvpP/7h7
UqEIWMRnM6hHGMh657fev7YS0Dz2V/reXrJePPq08F6qFF4FpX/aRNZHY7Xr
4Qc9S6GAdXgiiqyfut0Nn7XFymDMRIX15x4Gys4ZXgWncnDSuHo7TZgcr28m
9T0bq2DzUjZEbWagzHCeJLdZFSyfP280xU3m0FRZVciogu1XNa7s5WIgOxiZ
extWw7GeG5ORHAwU+XZo+7fYX/CvsvKVJisDvykerwpSroNAl5NXU34TKPo+
ZePkgUYQShz5HNFEYEkgi6qtSSMolop+5GogMP2MXO7ss0Yw78qJcqsl8HjR
+WPdw40QP7y9T6WSwLPG9aJ2b5pgsiiJ99FPAjmFGz3t5pshPvrvpfFYMmd5
yQ4E726Bh33ZTxajCASiOztVuwVYdju1sZLncUh3QXhrXAtwj/pUcnwgz88t
Aa0Neq0wKriwrSWQzGXCBcyumW1QiLkq6s4ECmrv/LNvqA1y5gVe/3MgkLZT
NaxnYzsE8NfzJNkSmNy6krnLsh2mT6mGzN8k8Ijh6OqLmztA/YPkz7OGBCZQ
GDQV204QY2+KbFEmUGCwumdpRw9g1hXj96sIlN9NGx490wMRy0xz8WQO2yDG
Y17p0AP2JndXf1+g45qy02+cynrAzN74RzqVjpW6fKFm1r3A1NTr4DxAxyuh
oSuvsvvg0uD0GQLp2DnRNvdAdABcxA6wD7rQUfgET3v30QH4ZOOledKJjuoH
L5UdPT8AHtG3FD/Z0vEgLTh82HkAFmpubT9tSceLN3k/L5cPQK3aMt+Vi3T8
OmDKL39rEFKU+GTvS9Mxxu7xmbjYIbh/VRbrOmlonRyosCFnCPwemikMt9Aw
4xqzyp1fQzASSXZX9TQkxFId+alDwLf2eCVrOQ1T/ReYlRSGof9irNbvNBrK
LcotvageBr7WEG6mpzQMzAzecWZyBHxNOhzLD9Hw0BddQda/I9CufmL8/D4a
du1ii/nJMQoKI3vZGyVoaB9+Q1Vo/yjwa68yqt5BwzjBBxB+bxTuua1cfcpG
w9Nm+X6BzGOgJjrKpdhF9uvzP0x38Y7D3pGhXfbuVHwSLLbtncQ4pK9Yts06
U7H61MEK9mPjsKtkTeINOyqunAiab702DhN3JPPVzano21bIzf91HDI3Rqa3
nqFinfD2zFOKE/DEH+PW8lDJPm2P51a9STiiumTb9YWCFoGHDb7cmgShwua5
gg8U/HftdIC46yScqBSti3xNwe13iAGB8Em4smifrvuYgocem1VHD5H3Kzdd
9LtNQeuLZldPWE+Bpfp0zgZZCrZXgrT7g2lITAyRfmA7h2cMOz2o/tOQMSDI
JGU6h1ei90Qah02DFFOvQrPOHG7NnlYTyZqGj/rOBKfcHMrOs8bpMqZhMOV1
j/TfWSzTTAw2tJmBeMWF7BW/WcQ/+sGNBrPgy8z6XCR0Bt8bTxfr35qFnNx7
t8Yfz6DrVXXtjnuzkMUQ3x3jMoPdz2/bFIbMwt2BiJMbDGZQ1OOb8eHaWdgi
F/vGe/sMRhmarYuHOUizi6MIR0yjhpNY38WNFJCutpmQ/zyFQyN/wr9uoQBd
5YdXRdAUnrBL+Px3OwUCNAPPaXtOIXHc0fqVFAWYTPzfnDGawhzVmVafMxTY
6LXDp3vLFPo8NNvv/ZACVQK/td88nsTNLIEc7XMU+NSZ/cD5+gSyQqRZ8G8K
FExIlmy9OIHPtAXzzi5TwCe0YzJFZQIF/EucYtmpQPAFjfwSmECn68cqxESp
cP7ZQfG0hnG8FLNJ76A+FSycTGJljo1jsbfmnXv5VHCXMhfYumEMaz/HmzsW
U2GDLo+u3MIo/ttEXL5dSQVmRzE97dFRTNUe3HO2hQqR2k119gWjqH9I/1TV
NBX+qh8WuOM0istrWDd38NPgyWVKq2LXCF5KdJPd4UiDrKEnPa5Rw9ielfbI
2YUGLrLluX1Bw6g8tfZTpTsNuG1vcSm7D+MZtSuy157QYDZ81dFJ3WEM7Kt/
fv4jDTbcnty8au0wPlY4viRTRnoxtW/vzSH08EoQY/DQ4dAc54YEsUHcpvbn
10U+OowMe9aX8AwiTWdLadJ2Ogh+vnitk2kQX47nx1wUpcPZ5jRivnMA18Rk
8dyQo4PsnJHDmsABLFHtyEy4Qge3V2PNer/7McUx5WH0Gzo4GuitlfXpw8by
Dd5W78j/U4z0uXm1D19SBbNkwulgKsVUGibXh5VbR7OjoumgUbWSPjrei20/
eNdcSafD3iMmRlKavdj3UOZPUz0dHk1n7ry5uQdnT2dkSrASsN3h7Svax05k
V3fJD1tHQERYe9mKQyeeOHtj1RoOAt5urRxkOdOJCRO7VMp5COB7tZN5mdqB
HnwDnmzCBPxKboe3ah3Y3WWteleBgEcrA17Pp9rQz2+g6IkSAe9fty/LFLTh
Br04+zcqBGxdNS5eFdKG3vfpRhGnCHhnIp47o9SGZx4evWSjQ4DHM6u9U4Gt
KMtSz0e7SUD//r3yVQdakMNhRDnuDgGPvx+137C2BU1O7PTXsyGf56fjzrNd
zdirffhxrCMBa5K+8qR5N6PQQb+tK+4E6B5en3SyuQlTXV9NB78kYOr4pRQ7
p0ace7pmzXQwAbVaU7LXzjTiqMf2w8pvCFhtfoSmvr0RP2p2DNS/I8A+1t2S
u6QBqd0iuilfCDg8O3vvNk8D5nU5i2qnE3DqG29siFkdUh81K4j/IEA0sDS6
krMO7c/NiixlEpASMpn7J68WTY/n2r7MJeBmgN5D4K3FNUTpoGcRAep/NNI9
q3+hyaEjQ+Z1BAjK23Y1H6jC95QO1ol6AgZym1mj+yqxtcFs/mYjAT80NV/b
BlSiUVfvSf0W8n2/P5MhRiqwPazOcamTgLl37G/z35ZjTbLOb7URcvzb1t03
Xy5BGuNV871RAjb9OhEyFF+C3w33uUWNEZCcaGhicrkE37g9FpudICB/3yM9
9ZRiXP6pPnBilgB/e5EdlGtFyBkwz6wxR0BsaeuKFkcRnlNWmNWkELB5QFw+
MbsQa+eS+FRpBLjw8DIZcBci+Y0CKoOAYjmv2/yPEV0bN/DX/ybgXyi3eFTf
TxztF1eI/0PAOquc/j3yPzFScfsvjQXy/yLPTQpO5KHCXLTSlkUCSpJzXgQd
z0Mx6+9OHaSD7NValsNyUWT61wGdvwSEdxbNVajn4I3C19msywS4PVPh3fMl
G63WGbH8IK1Kozz2WsrCaMrNqTUr5Hi9ZZsWTczE2M2+s+arGGAus+kCcGQg
+8LvmSnSIXMZueU30zFL//uIzWoGLLxi6jtX8h09IgvzrzMz4DJtw4ymaxrK
hVA/dpAeKgsWq2r9hk784s5n1jBg7v3ZHycPfMO38g4beVkYkLTu05RxYwqO
eFjXOpM+a18zftI/GQMylP0aSK8+5FyzWyUJP/7oPryHlQF+Qqbjq/4k4JMg
6LlHmk/08pOupK+4we+aWzHp2FOCf79ZxKPaRgUe9rUMWPH2eOUrEIf9Wazi
T0irtMiYifpHI2cdEY2klQ5xHKVBFD43eSlAI31PKMo6//dnZB7rfiLExoDt
9jnnHydFosnWjpnTpDmDtkppW0Rga+MT9Tuk9+b8/SwrF44dhynh/qT/gI1w
wZf3uO355qnPpG0n2G21uMLQy+CvTCZpCXsDiT6PNyhxKeV2Gemc2cEZ2+lg
NLWQC68n/TdV3GC1wUsMjX9f2UK6RNaIVybwOd5ynpz+3xGDo3D19hN8emEf
WwPpug8zN4PVvLGGcU+gnLTTs7p3X467IZdOk1gWaTnHQO2D8/ao6n9BMoq0
5kLTF9NcY7xCYxZ7Rjpb8cl+3SZVUOBb3mZN2koXasXKb0FLtjarOulRy50W
n6TvwXwlz5Qwac/eEp6yHC8wtzWqIMjxWj/S91Gqzxfi1pwILyJNsXm3xZP5
GSjy9Vg9I33Bhz+ijycIdKxOH9IiLf/H1Z4R/Qoov98THKT7E8JMmeRfQ9XA
76Rycv4kBoSaVipD4ezTu9fcSP/YgeJ0w3fg/lBugzTpdwbSpR0zH4AzQP9b
K7k+encIr//u+QmUP69ouZF+1ZYkg2yRwGgyfpBFrreJgQ49p3df4MaACasW
6YFr34+dHIoCuV7HgH5yff61UJteJx0D7T/tHxPkem6ZV3Nyz48DvX1Jf51J
awu8TpFg/QrWceFWBLn+JziM3X6dT4BopktK/UwMaFCDIKIvCd6yOIafJ/3h
nLbCffEUiDX+t5hJ7qeV66Mf78ungq6/YKzrPwKWWl+wDHl9g5mT2xrKlsj6
+F5RxJYrHThC72xZJvfvhcAjOjbFZE6MHnDcS/p30K2y63cz4KmZhZfbPAHw
T/fHsY4fYKRwob+JIODg8tFjvhHZcD/qxL9OOllfNfK3H9fJgcbcDvlust4M
sr5IozPnguA1fZYash4dWTKSO3YjD75uD2e5OU2eX34aErp7EeTnU7lVpgjo
0ULlQjInJuvpAvckAaVhskpcZwpA9c/Y/P/1cCLXrtZ0oQBeyMfMew8SkLqi
8iLfsAjmM1yfibcR8GTjgYKzQqXwfjCw5DNZfwdUinU+3isFmd9nd/M2E3BG
PG1yoq4UXNyS9WfJ+i0i7FNu7VUGl4Kefb1cRYBR211PwYFy2PjjqRFnHgHV
RqC6NrIKnnMpgHQOWc/qDgb3zVfBbbYzF05mEWQ9YjVK0a4GQ+kxlmv/nzfs
RfOHmH7BnJZp0cVEAsJ87JNajGvIc3Izr+h7Anxm2IukOOrB/6TLwPowAj7E
rRkbOlwP6bpOUTPk+Zbz1iMh1Lgedri5bf38ioCOpENT1JR6eOK7LrfWnwBj
h8x9djoN4NrPFHDkHgGd8o+Fn71phGW9XrFaJwLG+DLfzv9sBNm2VSUmDgQM
ty5tMh1rhKWd39Y6WRMQWq3bs0u+CTKTN5VfMydAriG44WZHE9B/1eRpnCdA
R37xBYO/Bf48kvz1SoMczyPmrhtPtoDF37Tx5jMEZOtVVAvfaYGy1VLn1E+S
v1fuYH8ktwW+GRxuWDhCwB/VjSho2Aq2V1+7Wu0kQDgioLcmrA3Mp53romfo
8GTduIELdyck8ygeZZukA3umrulWpU4oGGqhWIzSYYOjhkXijU4YTmI6z9FH
9mei2/YV5HWCuGZ43zayP7Kfr/H2tewCQZuxayLf6JC1ePWFW1Y3BHe3HGGy
pUPs/OnWct0+eHigITL5Np08T5tYznv2wfhRFa8rlnQolxP/VhVHXufL+vT2
Kh2G1lZpxC71wbqMHS/aNejAx/9nl7N2PxwpsL2svYcOuY8iPGuIfvjhHHxJ
opMGcimW7R+ODpL784CpSgsNzF2StY01B8G1a1JFp54GSgoinvymgxA9aeRp
SfajJRLD44+eDMK2a/d2XkijQZihph5P2yBc/1dyVNafBp0copS9jkPQa39H
dedBGjwUyfq8O3YY1uf7vgzZS4MfTYbuB3KGQbhveYBZnAbjHlnmCjXDkLVg
Fdy0nQY8w3nK8vRhKJDUu36ElQaOrAc/TCmPQFeqxQHudio0sry0km4ZgS3F
O3fudKGCvMqiO+3vKKwqkVM0c6AC50dDg2WOMfjQqSUTYUWFGY4PD1YLjUGQ
wqnPnKZUSAMf5yWVMYiKC53IO0uF54kVk7E+Y9BXHK2ow0+Fj19eq4yxj8O0
x0UthywK/G2jVA5xT0DHcuPJA2kUeF753nyfyATcd2dTmU2gQLTWiSKngxOg
yftL1+ATBb6HsOP0xQl49eLmLmY/CrAfeqf+MoS006eItzoUqDt7Qyt+8ySE
q/fU5DXMQebi7aBFzikQYvI8IVw8B1LRVrTSnVNQoCTS6ZY+B9ES5xz890+B
xOP73ttC58Csgpo1rzMFazK55SYM52DwqmPfvdfk/be/9o8MzYKDZaUvwTcN
9oLjfxxmZmCPbOnl8m0z8LCi6mhJzwx83NX/8rnEDJg+d5fiqJ2BL33Z+hpH
Z0DA+5msX/IMvPcT80jSm4Ff4zrHt9jOQFt+26f1oTMQqm7smzA7DSzC2h5S
3LOgvFfmXMfYFMQ1hI13rZqDtiPeI2rtU9BakRvzknMOutSbihIqpmDm245X
IDgHYiaC+ubxU/DO22bIW558r9pCs0e3p8CTunVzss0c3MxuNfOemgSmgC1N
vh1zwEON35s0PgF9oykyby5RYKaUbbV6+wSk9I0UUAwo0Gsl876/fALU6YVy
p00poLh0XnopZgI6L14oH7OmgN/xn0qjFhOQa3D2wh9yHlgEFwtC+8ZB5s5U
5nlyXqWyrdN868dgr5LDw2ZeKqxED37NxjG4wlZ6/pkgFb7srt4znjwGu4Wq
lpREyBzptg8PPR8Drf74uTcyVDjoxtcacHYMVPVl+HnVqKByl+/IscJR8P7N
pq9lT4WU9Zrv0xNH4IFUd9ybMiqcbZ/cfPz9CNzjqqOXVVPB+NGW0Ar/EbC2
0v1Nq6dCa/xQaYXlCAgQRoLKXVQQP2d28sXOEYg5eakxYo4KVR+f2+8PHobV
y/ub3vDSgNgN9r+dhuD1i5bjShY00OplXjEzHYLtNveOn75FA6zZpFulOQRq
vyLWn7Ohgfrd/Xb+YkMQskt0UY3MpTa1O/5Vkvs2/ocP/9IzGoyKperrk3Wg
/srK8Vvkvp5dabzaPt8Px902qZ1bogHnabdfccP90MRo3Jy0QgOP8luZTvX9
EG35y49tDR2iekb4VmL7ganm57mUDXSoIxy/9l7uh4Ns9ip5gnTQPfCW78ON
Pliw86lqVKbDqA1FR7qlGxYtnFsm3ehQMxY4+yS5G9Day8/Yiw7tmVxzvY+7
weVTn3WNNx0ePM9QvafQDe9tnbs/PKWDjdrncwafuiBCTU5k9Vs6eHsxi9LI
Ohtw1DRxhKyjt8+x+06odIJx3jvLDRlkXZ18ONi5rROK/23RkMmiQ3g+X15C
dQdYav0ONP9Jh81nfH6z7usA7wcRjOAqOlBXxVATiDYIGQh5s36QDknCTvGn
a9qAjTU+cniYDvKnIuZ7otvATljgV9YYHdxVc7wXL7dBy/qnbjrkuYA8tYZE
Viu8NZo6qjFPhwJn3hd01xaIkLf7eIHMuRYFY+wW/xphbbLy36SDZA4bz0lk
a2qEsb/nvmyTI4AtFMziYhshc+XlfU95MmeMqCt0aDfCm4IT346SObcsUvrv
qi8NsF5n37GbZK7VmJLIfnCqHv6wyyklXSHPLctbDq389bAu2DkoV5/MpSmH
OI1662Brfc66EkMCFO9zUiL31QHz3WNWxSZkbvweGlnbUAPDzCxDrjcIuHyB
q6xwczVcdDoi3XSXgH0CxZ5M+VUwGbgl2ps8p12TqN7y16tgHafjMZn7ZN8h
/rU+JKMSrA+zltq7kX3Qm93Kqy5XwKl80wNpjwi4waK5keNfOYjnMYcc9CH7
jIphGndMORRtYuFK8SVAr/SeMcfvMmjvyDAMeUJAnu1Gb3xdCuJvhCT5XhAg
ue9pTrhSKWRvZrp6O5DMaYNF9S4jJZC1LyDuRxABcZ3x/wQPl4B9kPUTJTJn
L5epiu5rLoLoMzvN17wloFnrDe+4axGs3iZ4cQ/ZpzxdVP7+QaQIZM566KuS
uTvI5LfGgkMh/La8HWf1gQBmkZaKR1wFUL4oe8Y5gsyZE0qGM+4IP1GBqh9J
wNrpclpt+09IXByxk/9MQHrcP1mvF/lw89h9+giZ21tXZm0+LeTAY4lTq5hj
CSi8JbrX4FIOue9YDPNJV7lOMW9KyYZpnaNPHeLI64o+EdYWWRCa636zJp7M
rZciBBi1GaCRqi2sRvZdmgqsu59LZMCGqQciraSH8yoChX3SgVdYedE0iYCd
lGY5laPf4cF7BdHbyQQ8utpeUhWcBhfjz90fJc1Sk2CoM/sNHqjFR15NIfsq
JoWz+l9SoZq+yvZYKpmz95qNfFtKgWaxAZ4o0u8eDIQkpibDtERDAOs3Agr2
p9A/X0+CxoqyDnPSrJ1PLr3mT4TD/FmLuaRtRaTZfeq+QrLnh7mNaQQ4Nl6+
YesTD6XRVllGpJWvHjVXmo2Ba0bZpeOk19lYxe78Eg0ueXvZ93wngEdUsHeV
XhSournvuka6x5nNYGDDFyj5GbsxhLQKZdIaCyOhjppYW0S6JtLL6oNzBPDX
vjCbJq20lf0C9XI4SF/RrtpE9q2XNlhOxBW8h2tdDBZZ0nuv+5++JhkGXXSf
LeqkJYpGN/GFvIEXPmsWjEkbL89O1i8Hk+vTLdWG9FkmLtdnN16C4OY/ivdJ
Uw851gR9fg6vtD3ee5B2SY2J2eT8BEy9dtT9789pAb9Cz3oD1/Jw6//364b3
82gpuEHN7f40W9KtcjIXHw3Yg2HWTvP/++ptvaxp+0SMQVAoc0yD9AFKgG6A
xylcLfJD5QBp6Qn2xRjt2+j2ar8ND2kHNmHdTK976O2nbDdHvu+J0W5l92kv
9DCjnyojXbS2SvY5nx+ebr5BCyX9sL7w8FPVZ7itOd3BgvRnwfcPj8oHoX8U
US5FWrRZe49I7St0bzxBmyHngxJabLnK4jXuPpxH/Ur6zoPsd00LoTg841Fm
RtpLcVkwLPAd6t38areFdLuDscYF0Y+oaGBCKSLnnz/7m/tSzie8U4xqd0g7
3NRM5nL8jKetuRwSyfW0eJ9F5lLmF5yQSTU8TfqZUlP2i6UoHLnVe76HXI/s
ge9/TnrHok/VI51Fcr1qz3B/WF8Rh3viz5g/JL2rOOy8yIavuM5RyYOZdFvs
3NLhkESc1r7WNE/uB07ti4ay7Umo9XmMw4o0ls/p7dyegmH62hc7Ewg41sf5
d64hFROf+K7EfiXg5t1tUbf1v2Of0b/BteT+S5h+waGw9B3j/q19cJHcn2N1
7ziZP6bjwNqXgu9iyNwzrnviYX8Gig6wPuOLJp/Hf2K35I0szOVez9pJ1oNd
F15vKWLLxitrXq79R9aL2Pe/buqQHQWrrhevIGmmZqYPhjM5uPp1jPm58P9z
EWNhvWM+Wt+KSrcl68/SX/Nis80/cWFgRdaKrE96Ef3ZqRk/sd97Md+crF+3
tjgF759H/P35H7sqmav+MdebmCoX4vLm3vuVLwlQsxv4wFRUjMEJmfSxxwRo
LV00NuIuwUtZKhGv/QhQmKx8mGZWgk6XM82UyXo72t8QqclcijeFJiUfkvUZ
KHuklVTL0CCOq6marN8eRb8/UkoqkHEusuuuHbmf3vYdSRGoRHuh3MBvNgR8
w5qq6w6VyOql7j1mRT7/LO+DHKEq3By3SerELQIs2fwurtyvRrvLPs/TTAmQ
sQv/MiBdi3rGUaJeF8jcmGZgttm7Fo/mZfNd0yKgPrs6RKmjFg0Y/LoKmgT4
s3TRHXzrUIBik9hD5rTgYZMH323qUea7y3gfEGA6IWmTUtqADPODh5qkCXj/
RbnAmdKA4fq5nHqSBPQprTyVF2jEh5NMKm17CJhOdDJIsGtELcWOyJJdBESO
cr48J9CEohoxXoZ85H7mqxpwsG3G9+fETB6sJkC1juvtEncb0lTvvXnUSIcz
IRFsMgptuMstXOppHZnzWLZdNTBtw8yqr+MBv+iw77zLs4iUNuzYEdrjXUb2
G4O7aQMa7TjFWKk4kkOHxGvHX8h6dyBe/WuYFUGHOxcNgnOmuzD8doTJLjLX
UXfncPPydOPUE63nQWSuS9CqOWV1tBvv/VT9t2BGB1eLT7FMft3Yl5Cb9NOQ
DgfO6J+q39GDEYMHr3JqkrlPPL1htVYvVpW2NdfK0GFE87FkzqV+DP1rxlsz
SwOLCqmmxZv9mDNsYnpukgYL3wx85dz7cXJ5XKVshLTb3rnw6H4U/spXFt9N
g2G5JrmDv/uR3vuKU7aKBtSCxwEWbwYwME+iQyGKzIGsl68UNQ7iYiPzrYuX
aPCUa9tW/dFBPFsqKC6uRYPFOi7xyYVB1M13TvhzlgaJvqf3Le0cwipvYZbH
QIN/EWEy7TZD6GekLXtDkgZqzke23F83jML7v1TJrFDh232D1bIKI2hqwvpw
NIoKpsazH5PPjaBg9QmuA5+ocMR+G98ekxFM1B2ocAkj++/5kWAWnxG0Wt+d
/uc5FSTzXwq41Iygpcrh5FxnKkSx9q7eZzKKL+Xlw6+epsK6YePzhe5jaPfo
mvOWEQqMX41ncwgcwxYZFqXKXgq4azxbvT1yDLO3nDJzaafAyoPvkYYlY+h2
obOuopoCyk0XWf3Zx9Eh6uTt/3Ohn4T84bevx9FLnXFE0oMCGlwqDMuYCWTl
lb6SzU0B/z2bQ7b8mMDEW5eSdDZQwK7Opy6/dALzjPRlx1ko4D2nzbE0PIEz
id/9OGlz8PzGw2PiIpNo/XVbyIGfc5B1f3avevgkXpfve7xRdw4SkuLaXgVO
oWja7V+H3Geh0aV61jp8CneXeqy42M5Cs905mRNJUxgejIwM01m4bqjN11o1
hb6ad47yn5qFHF8euQSWaSwOO+UesHEWbv3BZ2sfTOPW+x5L/OEz8M/KIMTu
6gzWnm3TnM+cBn/H3pOhVjPY7P5gUShuGo4EUy0zXGfQtl48Ht5Ow7j91O+2
sBm8LCkgdMNlGiy9SysyWmbQTGPV3GX5aehmX/+yXmMWV55cO/jzxxTs2Be3
03L/HA7cj7T4lTQJO38pn3GEOeToPW61/GESIuXvmN7TnMMN99M49gRMwtQB
up7FrTlcfefpfovbk2CzqEOpj5hD4voBPz+xSWA2rEmbZ6Ug93damu3HCRBT
uBn0zo6COXvOr/z2HYfZZ79FPzlT0O72iSH7u+Nw6vi+15/cKPj8qXnfqMU4
6CS2LAY/oeA0X5csnhyHVO6vOeoRFNyTm5EksWoclGcf1szWUtBI0zJv4sEY
bLMT91orQUWh1/b9B2+Pwr3ojS99ZKgYvmNofkFvFNy8L2otH6Ri0lTot5zT
o9CFmbUDylQ877pni7ToKNyaNUp3vkRFA6uEHXV9I8Dne2qx1oOK9yXaOfgv
jQBlX+UX2XoqftT2OzAoPwyX7/duY2uh4lLJpgrjPcMg3cF2oquDitsl+HJb
twzDlxCZKKchKu4sflaVRRuC61pEkONvKg7eK2Y5lTgEJ+882RYpQMPCc9Ux
T3YMgRF11u+7GQ3XPbwd/GtlAD5SmWVWLGn4uumiUP7MAHiuybt+6g4Nt6cJ
vIrvGoA7QjLe5Y40nEtNV3LOHICFM8yGIT40tJxW3tNnMwDtQxB/JZqGX101
+ejd/RD5iEfLY4iGHHfuPvOx6oP53exHn43RcKP39x9nVftgx6FdFa+maCjB
J+PPur0P2MGq4SWdhuc6XS7cqO6Fyc/pDlrMdEyJV0kpk+iFRJMHayuE6fhT
JiCadaQbLoYp+cYa0FHxTd62bt1OuHtx//a1xnRc7cdpkyjdCYpxPfKmpnQM
VQvtvMvcCQ5SnStrbtLRwHdUkkjtAL9MzkT2u3S8df3C3Kf1HWRuItfeCzra
H/Y8+RPb4En5TcWZXDoGb6ZfuCnSAixiVw/Y/KSjp+eJUZW/zXC1zvL8ZAEd
p9kP/dzc0gwbd3nSm0rpyCnpZ5Ls1wx5AbcHreroeNS95+7XiSawCNLqTh+g
48PN5ha1yY1gLSk9PDZEx7liIsvkcSNMGOazbR0ln4+1YGrapBE+aXHGmE/S
US66intpUyPw6OzfXUKj4/m1l53HHBpgTN6kImw1gTraZ3nWydVD03M+C481
BF53/dRutLEegpT0txizErj667V9BjV1cD2w7sdGdgLbtJcv+snUAXvtnclD
XAQWSOO155QaOFshjyE7CITwA+E3HKthqIfVV3IngdFrrvvFilSDEJ+FQa4w
gTHTr98NNFWBgabLgdrdBA4mnHyteqgK1MZXBWZJEuhtrzpfTlSAX5RlxqfD
BPK4HvvQ4lQG9yps59cfIVBsdSnFTqAMnAU6OBzkCXxYOfaMtagUPp0xTZZS
JFD/zDlmYc5SyDQqybukQuBaDk5iS3wxLBgr+wceJ/DX5Z4HflrFsPWLo2jJ
CQKbR9hEaIwieGQ+UM2vRuDSMkU190QRzNTNVLifJXCvcXANb3cBCKTqrX+s
TmBhdMNVi0cFsH9ER+CpBoHF5q6TieIF0KnO/MVdk0D2bZdrLCbJXDcnpMF/
gUDW7T+bRLbngZpICZ1KeqQmMfvRzVxw6lW9WaxDYFYas1ZXeg488hRLv3iJ
wD+S580faGaD0rPeRokr5PxsunTA2eMHPG6vaakjzb76fnBcVQaMbLn2xVaP
HN/WSYPWrRlwIoT4+EGfwHamo/O7U75DjBRWSRgQaL/UrnhqKQ3mTPILU0n/
YdIsND+dBky7FzkSDQkUiVC2DulLhYUDm8x3GhG4Zo3PqjipVFDoYXv0gnTg
L31L+7lk2PWp+fZv0nlDig7PHyeBVOd1Qb2rBJqyuIRECSXCTHNq2HfS+RLt
CpmZX4EvN6GPzZjAxRtiTaVa8WDz8fzcFdLXm6Wr68diodw+uCKC9MFrGUHt
njGwnsf5zhBp/h/+L3t4o0HqONEmZEJg3TZHxf6ULyAUybHxMmn30wp/+09/
hv68Yg4/0sbascf7+yLAjJm/LYU0N2M1PW8uHJ5VbLndRFpdeYdIltAHOKD2
s4xCeppLai5NKwy4Q7fPrL1Gjn/0twPJnm+goECxh490UcCRyq8pwRAfLx4q
QtrDCV7E9wUByw4avzhpx6KXOZeFAqCqNu6mGOkbXZ9EzDz9IOaCidcO0nVs
7zbe6/MC6k5Js02k5R80Wsh4OkPMe6GNf8n/37Iti5fL0xI0WfR8Bkiz5wuy
ON6POfYfqedTlw==
            "]]}, 
          Annotation[#, 
           "Charting`Private`Tag$43712#3"]& ]}}, {}, {{{}, {}, {}, {}}, {}}}, \
{}}}, {AspectRatio -> Full, PlotRange -> All, DisplayFunction -> Identity, 
     DisplayFunction -> Identity, AspectRatio -> Full, Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-1.9582099623680669`, 
      2.041251388907825}, {-1.6895760872115724`, 2.0791324971956673`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.822982997598936*^9, 3.822983017704062*^9}, {
   3.822984213126554*^9, 3.822984249870015*^9}, 3.822997138183972*^9, {
   3.822997318125251*^9, 3.822997327303424*^9}, 3.8229973760970783`*^9, 
   3.822997512624506*^9, 3.822997851310142*^9},
 CellLabel->
  "Out[302]=",ExpressionUUID->"9ca71eaa-6a87-4e9b-bbe3-2236b520e355"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "nonsepdata", "]"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Keys", "[", "nonsepdata", "]"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"supportVectors3D", ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"Thread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], ".", 
           RowBox[{"\[Phi]3D", "[", 
            RowBox[{"{", 
             RowBox[{"x0", ",", "y0"}], "}"}], "]"}]}], "+", "b"}], 
         "\[Equal]", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "/.", 
        RowBox[{"Join", "[", 
         RowBox[{"wsol\[Lambda]3D", ",", "bsol\[Lambda]3D"}], "]"}]}], "]"}], 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x0", ",", 
       RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y0", ",", 
       RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822982966741523*^9, 3.822983017155324*^9}, {
  3.8229841909463043`*^9, 3.822984249421977*^9}, {3.822985417871542*^9, 
  3.822985451032961*^9}, {3.822985548774507*^9, 3.822985643280117*^9}, {
  3.822998184182414*^9, 3.822998203300105*^9}},
 CellLabel->
  "In[329]:=",ExpressionUUID->"89813e30-a99b-4f8d-bcfa-70fb7b421378"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.0009402659049429163, 0.11141564362630568`}, {
          0.6985681983270928, -0.36790456437588814`}, {-0.00295604144687557, \
-0.18777988106197538`}, {-0.23888242209918228`, 
          0.034500797441814446`}, {-0.02990472311744523, 
          0.05854307847237184}, {-0.4835702248162677, 0.24533902079622932`}, {
          0.20390719257284282`, 0.10887728322031986`}, {
          0.10538241515767546`, -0.38172681750042337`}, {-0.1824956607100494, \
-0.6762831160175996}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{
          2.041251388907825, -0.35539451182767}, {-0.729497294004517, 
          1.9430725958833286`}, {-1.9582099623680669`, \
-0.14589014711693948`}, {
          0.7549130603093653, -1.6895760872115724`}, {-0.5094375357680065, 
          1.9943197246955076`}, {-1.8706064275341703`, \
-0.14104829949370085`}, {1.4543618707479875`, -1.18363578035018}, {
          1.853565067751745, -0.4895674667312021}, {
          1.9874646392084663`, -0.5256987415568544}, {0.2956806496520435, 
          2.0791324971956673`}}]}}}, {{}, {}}}, {{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          GrayLevel[0]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.7549130603093653, -1.6895760872115724`}, {-1.8706064275341703`, \
-0.14104829949370085`}}]}}}, {{}, {}}}, {
      GraphicsComplexBox[CompressedData["
1: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
8n8AioiMUw==
       "], {{{}, {}, 
         TagBox[
          TooltipBox[{
            Directive[
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[1.6]], 
            
            LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
             17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 
             33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 
             49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 
             65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 
             81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 
             97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 
             110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 
             123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 
             136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 
             149, 150, 151, 152}]}, 
           RowBox[{
             RowBox[{
               RowBox[{"1.5355418817693718`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.018282310588797195`", " ", 
                 TagBox["x0", HoldForm]}], "+", 
               RowBox[{"0.07432662649770455`", " ", 
                 TagBox["y0", HoldForm]}], "-", 
               RowBox[{"0.7079166836448212`", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    SuperscriptBox[
                    TagBox["x0", HoldForm], "2"], "+", 
                    SuperscriptBox[
                    TagBox["y0", HoldForm], "2"]}], ")"}]}]}], "\[Equal]", 
             "1"}]], Annotation[#, 
           1.5355418817693718` + 
            0.018282310588797195` HoldForm[$CellContext`x0] + 
            0.07432662649770455 HoldForm[$CellContext`y0] - 
            0.7079166836448212 (HoldForm[$CellContext`x0]^2 + 
             HoldForm[$CellContext`y0]^2) == 1, "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            Directive[
             RGBColor[0.880722, 0.611041, 0.142051], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJwt0dciFgAAQOHfaEkhoSIrGYUoFa/RI/QAeZ6slhEaGnZWC5UURSlRGohK
tFD5Llx8d+fupJwsPnEqKBAInOM0JZRSRjkVnOHsenOeC1RSRTU1XKSWOuq5
xGWucJUGrnGdG9ykkSaaaaGVNtq5RQeddNFND7e5w13ucZ9e+ujnAQ95xACP
GeQJTxlimGc8Z4RRXvCSMV7xmnHeMMEkb3nHFO/5wEc+Mc0Ms3xmjnm+8JVv
LPCdRZb4wU9+8Zs/LLPCKn/5x38CJgURTAihbGAjm9jMFsLYSjjb2E4EkUSx
g2h2EkMscexiN3uIJ4G9JJJEMimkso809pNOBplkcYCDZJNDLofII5/DHKGA
oxzjOIUUsQaVEFsY
             "]]}, 
           RowBox[{
             RowBox[{
               RowBox[{"1.5355418817693718`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.018282310588797195`", " ", 
                 TagBox["x0", HoldForm]}], "+", 
               RowBox[{"0.07432662649770455`", " ", 
                 TagBox["y0", HoldForm]}], "-", 
               RowBox[{"0.7079166836448212`", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    SuperscriptBox[
                    TagBox["x0", HoldForm], "2"], "+", 
                    SuperscriptBox[
                    TagBox["y0", HoldForm], "2"]}], ")"}]}]}], "\[Equal]", 
             RowBox[{"-", "1"}]}]], 
          Annotation[#, 
           1.5355418817693718` + 
            0.018282310588797195` HoldForm[$CellContext`x0] + 
            0.07432662649770455 HoldForm[$CellContext`y0] - 
            0.7079166836448212 (HoldForm[$CellContext`x0]^2 + 
             HoldForm[$CellContext`y0]^2) == -1, "Tooltip"]& ], 
         TagBox[
          TooltipBox[{
            Directive[
             RGBColor[0.560181, 0.691569, 0.194885], 
             AbsoluteThickness[1.6]], 
            LineBox[CompressedData["
1:eJwVz9c6FgAAgOHfpXQbFUkZyQiVtOiXRENFMkKpCKUITRGJVFpGqChpSEsa
KnQpvR28z/OdfkuCecn7QwKBQDdLxTKWE0oYKwhnJRGsYjWRRBFNDGuIZS1x
xJNAIutIIpkU1rOBjaSyiTQ2s4WtbGM76WSwgyCZ7CSLXWSzmxxy2cNe9vF/
LI8DHOQQ+RRwmEKOUEQxJZRylDLKqeAYx6nkBCc5RRXVnKaGWuo4w1nqOcd5
GmjkAk0008JFLnGZK1zlGq1cp412btBBJzfp4hbd9HCbXu5wl3v0cZ8HPOQR
j+lngEGGeMIwI4zylGc8Z4xxXvCSCV4xyWve8JZ3TPGeaT7wkU985gszfGWW
b3znBz+Z4xe/+cM8Cyzyl38kIl79
             "]]}, 
           RowBox[{
             RowBox[{
               RowBox[{"1.5355418817693718`", "\[VeryThinSpace]"}], "+", 
               RowBox[{"0.018282310588797195`", " ", 
                 TagBox["x0", HoldForm]}], "+", 
               RowBox[{"0.07432662649770455`", " ", 
                 TagBox["y0", HoldForm]}], "-", 
               RowBox[{"0.7079166836448212`", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    SuperscriptBox[
                    TagBox["x0", HoldForm], "2"], "+", 
                    SuperscriptBox[
                    TagBox["y0", HoldForm], "2"]}], ")"}]}]}], "\[Equal]", 
             "0"}]], Annotation[#, 
           1.5355418817693718` + 
            0.018282310588797195` HoldForm[$CellContext`x0] + 
            0.07432662649770455 HoldForm[$CellContext`y0] - 
            0.7079166836448212 (HoldForm[$CellContext`x0]^2 + 
             HoldForm[$CellContext`y0]^2) == 0, "Tooltip"]& ]}}], {}}}, {
    AspectRatio -> Full, PlotRange -> All, DisplayFunction -> Identity, 
     DisplayFunction -> Identity, AspectRatio -> Full, Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-1.9582099623680669`, 
      2.041251388907825}, {-1.6895760872115724`, 2.0791324971956673`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{{3.822982997598936*^9, 3.822983017704062*^9}, {
   3.822984213126554*^9, 3.822984249870015*^9}, {3.8229854204438972`*^9, 
   3.8229854522729597`*^9}, {3.822985556091345*^9, 3.8229855935466957`*^9}, 
   3.822985643945963*^9, 3.8229982043804893`*^9},
 CellLabel->
  "Out[329]=",ExpressionUUID->"18bd68b5-8992-4591-963e-409fa970482e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implicit map using the Kernel trick", "Subsection",
 CellChangeTimes->{{3.822998220085464*^9, 
  3.8229982269816713`*^9}},ExpressionUUID->"9e25d241-1cf9-4572-b6f8-\
5b01afad8606"],

Cell[TextData[{
 "Instead of defining the map explicitly, the fact that our optimisation only \
depends on the inner product of samples means we can use the kernel trick. \
Let\[CloseCurlyQuote]s define a kernel ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["x", "i"], ",", 
        SubscriptBox["y", "i"]}], ")"}], ",", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["x", "j"], ",", 
        SubscriptBox["y", "j"]}], ")"}]}], ")"}], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["x", "i"], 
      SubscriptBox["x", "j"]}], "+", 
     RowBox[{
      SubscriptBox["y", "i"], 
      SubscriptBox["y", "j"]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         SubscriptBox["x", "i"], "2"], "+", 
        SuperscriptBox[
         SubscriptBox["y", "i"], "2"]}], ")"}], 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         SubscriptBox["x", "j"], "2"], "+", 
        SuperscriptBox[
         SubscriptBox["y", "j"], "2"]}], ")"}]}]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "896231a9-80c6-4035-8d76-2e4906b1669a"]
}], "Text",
 CellChangeTimes->{{3.8229982370847178`*^9, 
  3.822998367705614*^9}},ExpressionUUID->"1139c56a-36cd-4f56-843f-\
66c2dfee1852"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"k", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"xi_", ",", "yi_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"xj_", ",", "yj_"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"xi", " ", "xj"}], "+", 
    RowBox[{"yi", " ", "yj"}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["xi", "2"], "+", 
       SuperscriptBox["yi", "2"]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["xj", "2"], "+", 
       SuperscriptBox["yj", "2"]}], ")"}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822985792210389*^9, 3.8229858051328897`*^9}, {
  3.8229858860553427`*^9, 3.822985889518218*^9}, {3.822985925968484*^9, 
  3.82298593377518*^9}},
 CellLabel->
  "In[330]:=",ExpressionUUID->"bcdb7656-8607-4085-8be7-daab6e8116ea"],

Cell[TextData[{
 "We now set up the dual optimisation problem by computing ",
 Cell[BoxData[
  FormBox[
   RowBox[{"X", " ", 
    SuperscriptBox["X", "T"]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "2e43f09e-bfad-4fa4-8676-bdc3720628bb"],
 " directly using the kernel:"
}], "Text",
 CellChangeTimes->{{3.822997603357193*^9, 3.82299761824004*^9}, {
  3.8229984162844133`*^9, 
  3.822998436092779*^9}},ExpressionUUID->"db335bfd-2d20-4a9a-8c3f-\
e2e587fd670b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"xi", "=", 
  RowBox[{"Join", "@@", "nonsepdata"}]}]], "Input",
 CellChangeTimes->{{3.822998452329568*^9, 3.822998485964761*^9}, {
  3.822998523023875*^9, 3.822998523404714*^9}},
 CellLabel->
  "In[335]:=",ExpressionUUID->"d4172929-328c-46b5-8529-93ed52dad09c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.19418006351395`"}], ",", 
     RowBox[{"-", "0.7939897238477599`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.0009402659049429163`", ",", "0.11141564362630568`"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"0.6985681983270928`", ",", 
     RowBox[{"-", "0.36790456437588814`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.00295604144687557`"}], ",", 
     RowBox[{"-", "0.18777988106197538`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.23888242209918228`"}], ",", "0.034500797441814446`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.02990472311744523`"}], ",", "0.05854307847237184`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.4835702248162677`"}], ",", "0.24533902079622932`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.20390719257284282`", ",", "0.10887728322031986`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.10538241515767546`", ",", 
     RowBox[{"-", "0.38172681750042337`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.1824956607100494`"}], ",", 
     RowBox[{"-", "0.6762831160175996`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2.041251388907825`", ",", 
     RowBox[{"-", "0.35539451182767`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.729497294004517`"}], ",", "1.9430725958833286`"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.9582099623680669`"}], ",", 
     RowBox[{"-", "0.14589014711693948`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7549130603093653`", ",", 
     RowBox[{"-", "1.6895760872115724`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.5094375357680065`"}], ",", "1.9943197246955076`"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.8706064275341703`"}], ",", 
     RowBox[{"-", "0.14104829949370085`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.4543618707479875`", ",", 
     RowBox[{"-", "1.18363578035018`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.853565067751745`", ",", 
     RowBox[{"-", "0.4895674667312021`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1.9874646392084663`", ",", 
     RowBox[{"-", "0.5256987415568544`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.2956806496520435`", ",", "2.0791324971956673`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.822998463590004*^9, 3.8229984865255117`*^9}, 
   3.822998526027513*^9},
 CellLabel->
  "Out[335]=",ExpressionUUID->"129db317-a4e9-4a15-b356-bb4b5f8d6d31"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Y", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"nonsepdata", "[", "\"\<Plus\>\"", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"Length", "[", 
        RowBox[{"nonsepdata", "[", "\"\<Minus\>\"", "]"}], "]"}]}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822994836114833*^9, 3.822994836484962*^9}, {
  3.8229948876520557`*^9, 3.822994899517584*^9}, {3.822995205087777*^9, 
  3.8229952055487947`*^9}, {3.822995684929783*^9, 3.822995692354609*^9}, {
  3.82299659035343*^9, 3.822996593018736*^9}, {3.8229976718363543`*^9, 
  3.8229976747718363`*^9}, {3.8229985653583508`*^9, 3.8229985765187187`*^9}},
 CellLabel->
  "In[336]:=",ExpressionUUID->"f888ebbe-3dbe-4a1c-9a5d-f3b0253ef824"],

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Length", "[", "xi", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822980054946007*^9, 3.822980060322157*^9}, 
   3.8229956746813107`*^9, 3.822996631988751*^9, {3.822998580870015*^9, 
   3.822998581071443*^9}},
 CellLabel->
  "In[338]:=",ExpressionUUID->"07b8b231-f999-4cc0-a2c6-08204cd05d0b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Lambda]", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"\[Lambda]i", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "xi", "]"}]}], "}"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.822736499045179*^9, 3.822736503094264*^9}, {
   3.8227368604226017`*^9, 3.8227368624132338`*^9}, {3.822979903555831*^9, 
   3.822979935021117*^9}, 3.822996633439192*^9, {3.8229985848293877`*^9, 
   3.822998585053768*^9}},
 CellLabel->
  "In[337]:=",ExpressionUUID->"7f505562-da48-4589-9029-42d8b2edfbe4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"functionToMaximise", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Lambda]i", "[", "i", "]"}], 
        RowBox[{"\[Lambda]i", "[", "j", "]"}], 
        RowBox[{"Y", "[", 
         RowBox[{"[", "i", "]"}], "]"}], 
        RowBox[{"Y", "[", 
         RowBox[{"[", "j", "]"}], "]"}], 
        RowBox[{"k", "[", 
         RowBox[{
          RowBox[{"xi", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", 
          RowBox[{"xi", "[", 
           RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "xi", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         RowBox[{"Length", "[", "xi", "]"}]}], "}"}]}], "]"}]}], "+", 
    RowBox[{"\[Lambda]", ".", "e"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822986446738625*^9, 3.822986534654004*^9}, {
  3.822986623057745*^9, 3.8229866276603413`*^9}, {3.822998500230528*^9, 
  3.822998549808639*^9}, {3.822998593200341*^9, 3.822998601209042*^9}},
 CellLabel->
  "In[339]:=",ExpressionUUID->"bf2c9c3e-cc67-4e70-9f72-9aa920fcffd7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"maxk", ",", "sol\[Lambda]k"}], "}"}], "=", 
   RowBox[{"NMaximize", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"functionToMaximise", ",", 
       RowBox[{"\[Lambda]", ">", "0"}], ",", 
       RowBox[{
        RowBox[{"\[Lambda]", ".", "Y"}], "\[Equal]", "0"}]}], "}"}], ",", 
     "\[Lambda]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822736506293404*^9, 3.822736542931388*^9}, {
   3.822736582192131*^9, 3.822736601610004*^9}, {3.822736708592511*^9, 
   3.822736715634078*^9}, {3.8227368193715153`*^9, 3.822736908461323*^9}, {
   3.82273778357137*^9, 3.822737786462852*^9}, {3.8229800257185307`*^9, 
   3.822980088764784*^9}, 3.822981320132049*^9, {3.8229843572529182`*^9, 
   3.822984360581049*^9}, {3.822984410881886*^9, 3.822984411013171*^9}, {
   3.822997683716748*^9, 3.82299769812615*^9}, {3.822998623428437*^9, 
   3.822998636555667*^9}},
 CellLabel->
  "In[342]:=",ExpressionUUID->"1cd62041-111f-4040-bd67-05009c5e6894"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol\[Lambda]k", "//", "Chop"}]], "Input",
 CellChangeTimes->{{3.822998641372541*^9, 3.822998676380426*^9}},
 CellLabel->
  "In[347]:=",ExpressionUUID->"e4e494fc-1cec-4394-90d2-c8e4b292480d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "1", "]"}], "\[Rule]", "0.2534435073833228`"}],
    ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "2", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "3", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "4", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "5", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "6", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "7", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "8", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "9", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "10", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "11", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "12", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "13", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "14", "]"}], "\[Rule]", 
    "0.1548634735776457`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "15", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "16", "]"}], "\[Rule]", 
    "0.09858003380567709`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "17", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "18", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "19", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "20", "]"}], "\[Rule]", "0"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.82299864282395*^9, 3.822998645882468*^9}, 
   3.822998676768825*^9},
 CellLabel->
  "Out[347]=",ExpressionUUID->"622e4d2e-516d-488b-ab4d-335d90f369c9"]
}, Open  ]],

Cell["\<\
We have now found the solution. In fact, it\[CloseCurlyQuote]s the exact same \
solution as we found with the 3D map because this kernel is exactly the one \
you get from that map.\
\>", "Text",
 CellChangeTimes->{{3.822998658040759*^9, 
  3.8229987123802233`*^9}},ExpressionUUID->"c0803504-b416-4ab1-b175-\
a69e65a4abcc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generic Kernels", "Subsection",
 CellChangeTimes->{{3.822990623352353*^9, 
  3.822990625760766*^9}},ExpressionUUID->"a3305560-56b0-42d2-b21f-\
f613acc54773"],

Cell["\<\
In the example so far we had a good idea for which kernel to use a priori. \
That is not usually the case so let\[CloseCurlyQuote]s now look at using some \
generic kernels. We will apply it to the following dataset:\
\>", "Text",
 CellChangeTimes->{{3.822998723562336*^9, 
  3.8229988024805593`*^9}},ExpressionUUID->"1a657693-4fa5-40a8-841d-\
52ff5cbb44b1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"Blue", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1.3", ",", "0.9"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0.9", ",", "1.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.1", ",", "2.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.3", ",", "2.9"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.9", ",", "2.2"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"Orange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2.1", ",", "1.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.3", ",", "0.9"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.7", ",", "1.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1.1", ",", "2.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1.3", ",", "2.9"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0.9", ",", "2.2"}], "}"}]}], "}"}]}]}], "|>"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.822553642327134*^9, 3.82255364663369*^9}, {
  3.82255387243029*^9, 3.822553875288619*^9}},
 CellLabel->
  "In[348]:=",ExpressionUUID->"ee0831d7-7c77-4b86-9db6-cc650f7a3acd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Values", "[", "data", "]"}], ",", 
   RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}]}], 
  "]"}]], "Input",
 CellLabel->
  "In[349]:=",ExpressionUUID->"fbc83d76-0e9f-4a9f-88de-167eb3d13fa1"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
       FormBox[
        StyleBox[
         GraphicsBox[{
           {GrayLevel[1], DiskBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}, 
           {AbsoluteThickness[1.5], Dashing[{}], 
            CircleBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}}],
         StripOnInput->False,
         GraphicsBoxOptions->{DefaultBaseStyle->Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]]}],
        TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{1., 1.2}}, {{
      1.3, 0.9}}, {{0.9, 1.2}}, {{2.1, 2.2}}, {{2.3, 2.9}}, {{2.9, 2.2}}}]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
       FormBox[
        StyleBox[
         GraphicsBox[{
           {GrayLevel[1], 
            PolygonBox[
             NCache[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
               Offset[{2 3^Rational[1, 2], -2}]}, {
              Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
               Offset[{3.4641016151377544`, -2}]}]]}, 
           {AbsoluteThickness[1.5], Dashing[{}], 
            JoinedCurveBox[NCache[
             Line[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                Offset[{2 3^Rational[1, 2], -2}], Offset[{0, 4}]}], 
              Line[{Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                Offset[{3.4641016151377544`, -2}], Offset[{0, 4}]}]],
             CurveClosed->True]}}],
         StripOnInput->False,
         GraphicsBoxOptions->{DefaultBaseStyle->Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]]}],
        TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{2.1, 
      1.2}}, {{2.3, 0.9}}, {{2.7, 1.2}}, {{1.1, 2.2}}, {{1.3, 2.9}}, {{0.9, 
      2.2}}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.8583333333333337, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0.8583333333333337, 2.9}, {0, 2.9}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8229988108480787`*^9},
 CellLabel->
  "Out[349]=",ExpressionUUID->"d929bbf0-f1ce-42c8-b598-c4f3ca2f7038"]
}, Open  ]],

Cell[TextData[{
 "We could implement the kernels ourselves, take care of projecting back to \
the original space, etc., but let\[CloseCurlyQuote]s now just use the \
high-level ",
 ButtonBox["Classify",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Classify"],
 " function to take care of all of those details for us. We will specify the \
\[OpenCurlyDoubleQuote]SupportVectorMachine\[CloseCurlyDoubleQuote] method \
with three different choices of kernel. Note that this generates a function \
that can return a probability that the input is of a given class."
}], "Text",
 CellChangeTimes->{{3.8229988192188883`*^9, 3.8229989048317823`*^9}, {
  3.822999054185519*^9, 
  3.8229990846382923`*^9}},ExpressionUUID->"eb4a4c44-8f19-4349-be9f-\
b4c29ed20b24"],

Cell["First, with a linear kernel it fails totally", "Text",
 CellChangeTimes->{{3.822998916205287*^9, 
  3.822998922682157*^9}},ExpressionUUID->"3d51c64a-579f-48d6-909a-\
38dd50116918"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fL", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<SupportVectorMachine\>\"", ",", 
       RowBox[{"\"\<KernelType\>\"", "\[Rule]", "\"\<Linear\>\""}]}], 
      "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822553412693893*^9, 3.822553476001458*^9}, {
  3.822553527000094*^9, 3.822553560051292*^9}, {3.8225536032357807`*^9, 
  3.822553624439756*^9}, {3.82255369819847*^9, 3.822553718583609*^9}, {
  3.822998779295492*^9, 3.822998784290161*^9}, {3.822998883367598*^9, 
  3.8229988837380753`*^9}},
 CellLabel->
  "In[365]:=",ExpressionUUID->"42b24b98-a7b8-477c-bb4a-413791f75711"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.5`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.5`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["12", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 12, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 5755441559493940478]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 12, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {1.7416666666666665`, 1.7666666666666666`}, 
                   "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                   "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Model" -> 
                Association[
                 "Matrix" -> {{0.7071067811865388, -0.7071067811865563}, {
                   0.7071067811865563, 0.7071067811865388}}, "Processor" -> 
                  MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                    "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 2, "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "Method" -> 
                  "Linear"], "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.011726, "MaxTrainingMemory" -> 105688, 
                  "DataMemory" -> 304, "FunctionMemory" -> 21240, 
                  "LanguageVersion" -> {12.2, 0}, "Date" -> 
                  DateObject[{
                    2021, 2, 22, 16, 11, 26.554438`8.176712096481728}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 8, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
             3905946272741463577]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
             "StandardDeviation" -> {0.7017339635186232, 0.71336448530109}, 
             "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 4219510318259331672]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4147396025890724089]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[RGBColor[0, 0, 1] -> 1, RGBColor[1, 0.5, 0] -> 2]},
              "MissingCode" -> 0, "Version" -> {12.2, 0}, "ID" -> 
             6772050397287602588, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 6181563047931870211]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[RGBColor[0, 0, 1] -> 0.5, RGBColor[1, 0.5, 0] -> 0.5]], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "SVMParameters" -> 
      Association[
       "KernelType" -> "Linear", "GammaScalingParameter" -> 
        0.8688471807821132, "SoftMarginParameter" -> 0.4, "PolynomialDegree" -> 
        3, "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
        "Shrinking" -> True, "KernelCacheSize" -> 100], "TrainedModel" -> {
        Association[
        "supportVectors" -> {{-1.0520384828143667`, -0.8028975794788621}, {
          1.6585361479466827`, 0.6148160889155379}, {0.5180058634521635, 
          0.6103608038166278}, {-0.6250810330571168, -1.2180314652050697`}, {
          0.804873975164999, 1.59127258976614}, {
          1.3684038159188263`, -0.7941486338400905}, {
          0.5116682952594905, -0.7951149204145397}, {-0.6260499179170453, 
          1.5909313065417592`}, {
          0.8041442992315319, -1.213710157637547}, {-1.2029136458952523`, 
          0.6117612098654124}}, 
         "supportVectorCoefficients" -> {0.4, 0.4, 0.4, 0.4, 
          0.4, -0.4, -0.4, -0.4, -0.4, -0.4}, "rho" -> 0.24990430343896125`]},
       "ProbabilityCoefficients" -> {{
       3.8627216815948486`, -0.02095191553235054}}, "MulticlassStrategy" -> 
      "OneVersusOne", "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 2], 
         "Key" -> "(f1f2)", "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Calibrator" -> None, "Method" -> "SupportVectorMachine", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "KernelType" -> 
        Association["Value" -> "Linear", "Options" -> Association[]], 
        "GammaScalingParameter" -> 
        Association[
         "Value" -> 0.8688471807821132, "Options" -> Association[]], 
        "SoftMarginParameter" -> 
        Association["Value" -> 0.4, "Options" -> Association[]], 
        "PolynomialDegree" -> 
        Association["Value" -> 3, "Options" -> Association[]], 
        "BiasParameter" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "MulticlassStrategy" -> 
        Association["Value" -> "OneVersusOne", "Options" -> Association[]], 
        "Shrinking" -> 
        Association["Value" -> True, "Options" -> Association[]], 
        "KernelCacheSize" -> 
        Association["Value" -> 100, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[296401], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.093324`5.421538338498724, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> Around[0.591996268711201, 0.19284934907790585`],
          "Accuracy" -> Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
         0.00015811388300841897`, "TestSize" -> 2, "ModelMemory" -> 13088, 
         "ModelUtility" -> -0.2320115953808678, "TrainingSize" -> 10, 
         "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 110888, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.591996268711201, 0.19284934907790585`]}, 
         "AccuracyHistory" -> {
           Around[0.5, 0.3191423692521128]}, 
         "Configuration" -> {
          "SupportVectorMachine", "KernelType" -> "Linear", 
           "GammaScalingParameter" -> 0.8688471807821132, 
           "SoftMarginParameter" -> 0.4, "PolynomialDegree" -> 3, 
           "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
           "Shrinking" -> True, "KernelCacheSize" -> 100}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.4445003472969882], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.62825076195966, 0.14883578351259277`], "Accuracy" -> 
              Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
              0.00019905358527674846`, "TestSize" -> 2, "ModelMemory" -> 
              13088, "ModelUtility" -> -0.274625750845248, "TrainingSize" -> 
              10, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
              109368, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.62825076195966, 0.14883578351259277`]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3191423692521128]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00019905358527674846`, "MeanCrossEntropy" -> 
             Around[0.62825076195966, 0.14883578351259277`], "ModelMemory" -> 
             13088, "TrainingMemory" -> 109368, "TrainingTime" -> 
             0.04458800310199168], "Index" -> 1], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.01257837195814182], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.62825076195966, 0.14883578351259277`], "Accuracy" -> 
              Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
              0.00015811388300841897`, "TestSize" -> 2, "ModelMemory" -> 
              13088, "ModelUtility" -> -0.2746257099055458, "TrainingSize" -> 
              10, "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
              109864, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.62825076195966, 0.14883578351259277`]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3191423692521128]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00015811388300841897`, "MeanCrossEntropy" -> 
             Around[0.62825076195966, 0.14883578351259277`], "ModelMemory" -> 
             13088, "TrainingMemory" -> 109864, "TrainingTime" -> 
             0.035417509793885846`], "Index" -> 2], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.25125384233026615`], 
             "SoftMarginParameter" -> Association["Value" -> 0.4], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.6766262284304261, 0.1832262622812655], "Accuracy" -> 
              Around[0.5, 0.2256677334621101], "EvaluationTime" -> 
              0.00015811388300841897`, "TestSize" -> 4, "ModelMemory" -> 
              13088., "ModelUtility" -> -0.35525565349259913`, "TrainingSize" -> 
              10, "TrainingTime" -> 0.0343520900862391, "TrainingMemory" -> 
              110818.66666666666`, "ExperimentCount" -> 2, 
              "MeanCrossEntropyHistory" -> {
                Around[0.591996268711201, 0.19284934907790585`], 
                Around[0.761256188149651, 0.3018318307286104]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3191423692521128], 
                Around[0.5, 0.3191423692521128]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00015811388300841897`, "MeanCrossEntropy" -> 
             Around[0.6766262284304261, 0.1832262622812655], "ModelMemory" -> 
             13088., "TrainingMemory" -> 110818.66666666666`, "TrainingTime" -> 
             0.03847434089658779], "Index" -> 3], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.4545880781074281], 
             "SoftMarginParameter" -> Association["Value" -> 3], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.123576312078409, 0.6314929019224412], "Accuracy" -> 
              Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
              0.00015811388300841897`, "TestSize" -> 2, "ModelMemory" -> 
              13088, "ModelUtility" -> -0.9161922861993469, "TrainingSize" -> 
              10, "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
              110936, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.123576312078409, 0.6314929019224412]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3191423692521128]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00015811388300841897`, "MeanCrossEntropy" -> 
             Around[1.123576312078409, 0.6314929019224412], "ModelMemory" -> 
             13088, "TrainingMemory" -> 110936, "TrainingTime" -> 
             0.035417509793885846`], "Index" -> 4], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.11642497273223906`], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.62825076195966, 0.14883578351259277`], "Accuracy" -> 
              Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
              0.00015811388300841897`, "TestSize" -> 2, "ModelMemory" -> 
              13088, "ModelUtility" -> -0.2746257099055458, "TrainingSize" -> 
              10, "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
              109736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.62825076195966, 0.14883578351259277`]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3191423692521128]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00015811388300841897`, "MeanCrossEntropy" -> 
             Around[0.62825076195966, 0.14883578351259277`], "ModelMemory" -> 
             13088, "TrainingMemory" -> 109736, "TrainingTime" -> 
             0.035417509793885846`], "Index" -> 5], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.3105621444473954], 
             "SoftMarginParameter" -> Association["Value" -> 1.], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8382202574622721, 0.3679486255460742], "Accuracy" -> 
              Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
              0.00015811388300841897`, "TestSize" -> 2, "ModelMemory" -> 
              13088, "ModelUtility" -> -0.6008251628640239, "TrainingSize" -> 
              10, "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
              110488, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8382202574622721, 0.3679486255460742]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3191423692521128]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00015811388300841897`, "MeanCrossEntropy" -> 
             Around[0.8382202574622721, 0.3679486255460742], "ModelMemory" -> 
             13088, "TrainingMemory" -> 110488, "TrainingTime" -> 
             0.035417509793885846`], "Index" -> 6], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.8688471807821132], 
             "SoftMarginParameter" -> Association["Value" -> 0.4], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.591996268711201, 0.19284934907790585`], "Accuracy" -> 
              Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
              0.00015811388300841897`, "TestSize" -> 2, "ModelMemory" -> 
              13088, "ModelUtility" -> -0.2320115953808678, "TrainingSize" -> 
              10, "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
              110888, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.591996268711201, 0.19284934907790585`]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3191423692521128]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00015811388300841897`, "MeanCrossEntropy" -> 
             Around[0.591996268711201, 0.19284934907790585`], "ModelMemory" -> 
             13088, "TrainingMemory" -> 110888, "TrainingTime" -> 
             0.035417509793885846`], "Index" -> 7], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.12819078670751138`], 
             "SoftMarginParameter" -> Association["Value" -> 0.4], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.591996268711201, 0.19284934907790585`], "Accuracy" -> 
              Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
              0.00015811388300841897`, "TestSize" -> 2, "ModelMemory" -> 
              13088, "ModelUtility" -> -0.2320115953808678, "TrainingSize" -> 
              10, "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
              110936, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.591996268711201, 0.19284934907790585`]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3191423692521128]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00015811388300841897`, "MeanCrossEntropy" -> 
             Around[0.591996268711201, 0.19284934907790585`], "ModelMemory" -> 
             13088, "TrainingMemory" -> 110936, "TrainingTime" -> 
             0.035417509793885846`], "Index" -> 8], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.8094134160956326], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.62825076195966, 0.14883578351259277`], "Accuracy" -> 
              Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
              0.00015811388300841897`, "TestSize" -> 2, "ModelMemory" -> 
              13088, "ModelUtility" -> -0.2746257099055458, "TrainingSize" -> 
              10, "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
              109736, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.62825076195966, 0.14883578351259277`]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3191423692521128]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00015811388300841897`, "MeanCrossEntropy" -> 
             Around[0.62825076195966, 0.14883578351259277`], "ModelMemory" -> 
             13088, "TrainingMemory" -> 109736, "TrainingTime" -> 
             0.035417509793885846`], "Index" -> 9], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Linear"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 0.1730107534188885], 
             "SoftMarginParameter" -> Association["Value" -> 1.], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.8382202574622721, 0.3679486255460742], "Accuracy" -> 
              Around[0.5, 0.3191423692521128], "EvaluationTime" -> 
              0.00015811388300841897`, "TestSize" -> 2, "ModelMemory" -> 
              13088, "ModelUtility" -> -0.6008251628640239, "TrainingSize" -> 
              10, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
              110536, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.8382202574622721, 0.3679486255460742]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3191423692521128]}]}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00015811388300841897`, "MeanCrossEntropy" -> 
             Around[0.8382202574622721, 0.3679486255460742], "ModelMemory" -> 
             13088, "TrainingMemory" -> 110536, "TrainingTime" -> 
             0.04458800310199168], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["SupportVectorMachine"]], 
           
           TypeSystem`Struct[{
            "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
             "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
             "Shrinking", "KernelCacheSize"}, {
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["Linear"]]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[TypeSystem`Boolean]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}]}]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association[]], "MaxTrainingSize" -> 12, "PreprocessorEvaluationTime" -> 
      4.3515625*^-6, "PreprocessorMemory" -> 37864, "InputDimension" -> 2, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6931471805599453,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.822999086646435`16.334979183421602*^9, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.414193, "ExperimentCounts" -> 11]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.3}, "ID" -> 
           5006195930348260787], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.9}, "ID" -> 
           626850493589782258]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.5844, 
      "MaxTrainingMemory" -> 439088, "DataMemory" -> 1784, "FunctionMemory" -> 
      188752, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 2, 22, 16, 11, 27.111657`8.185731043233178}, 
        "Instant", "Gregorian", 0.], "ProcessorCount" -> 8, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.822553464256115*^9, 3.8225534770705137`*^9}, 
   3.8225535310464067`*^9, 3.8225535619186296`*^9, 3.82255362563843*^9, {
   3.822553699937621*^9, 3.822553719607602*^9}, 3.822553751059531*^9, 
   3.822553878199669*^9, 3.82299888846424*^9, 3.822998929455236*^9, 
   3.8229990871420813`*^9},
 CellLabel->
  "Out[365]=",ExpressionUUID->"66a1e043-7925-48dd-8e84-233367bd6e3f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"fL", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], ",", 
       RowBox[{"\"\<Probability\>\"", "\[Rule]", "Orange"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"Evaluated", "\[Rule]", "False"}], ",", 
     RowBox[{"ContourShading", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"LightBlue", ",", "LightOrange"}], "}"}]}], ",", 
     RowBox[{"Contours", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", "/", "2"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "data", "]"}], ",", 
     RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.822998954737088*^9, 3.8229989707003593`*^9}, {
  3.822999030989399*^9, 3.82299903340709*^9}, {3.822999502201433*^9, 
  3.82299950409181*^9}},
 CellLabel->
  "In[400]:=",ExpressionUUID->"0b019102-5e97-46f9-834a-232162dbc756"],

Cell[BoxData[
 GraphicsBox[{{GraphicsComplexBox[CompressedData["
1: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
aNSxlbUHfPMmFDFjzIpT/ICR/w8JePc1
     "], {{
       {RGBColor[0.87, 0.94, 1], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
           "]], 
          PolygonBox[CompressedData["
1:eJwt08tLlGEUx/H3iVm0MsLFLGY1XlbtAxVskQuFgtBBRhGTQSUYmOifcGOE
pZa3UlFs1Bwv5XSjNt3N7uZtumOKKeof0MLv4fktPhxmfOY87/s7x2jiYnXq
SBAEJxHCXxcEDQjjLVZxBln+tkJ9gjxE8RS/EUc90niJfAToRw7ViGEUz3AM
/znSQ/2HBCL4iHWc0xk7+wGncYvz76kvUIY2PrdTx3AcpejFDprRigw20Ygm
TOIOQkhhH89Rop59WEA5rtH/DfUXavVO9m7zutsyyGIPSVzlu8vUA1zCOJ87
lGFYd97UM9izFOGunVNWSfXK6NmLcQ8zuICzWMZDTPCT89QtTOOo7rS7Hyir
OuofdGpWJ/AYXShQxmvWy/lejcoqrVkWYg63ne8V16wfaRdaqLuaaUw9ZzGC
Gs08p5mUKmPLeghVqMQnXLFc6FdBfYf7yt56fNOMUjpjZ5f0W8vgi/MZW9bW
8zO+O79bthM/MKzsbIe/WjbO32U7tYgbytp2cBvdeneb+U9c16zsf2IDAzil
HXnl/Mxt9vbda+d3OKKZDGLK+axsJ203DwG77XXZ
           "]]}]}, 
       {RGBColor[1, 0.9, 0.8], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNll1M11Ucxn/HppvGRXPZxBnUTWnL1Ay76aIu6qKL3Nq88spuvKuNEPGV
RAGl1toQew/+Sa9iYFDyLqIgoAKK+QKo0OovFhlutumFrufZ+TC8eHbO7/zO
75znfJ/n+z2/J9965823ZyVJsigkyUNqTwrb1e9R+4babOFhYamwUJgnnBXm
ClVCKf0mzT+tdrbwVYhreMzrFDN+yOurDcIXQoZwRGPdSXw3R88/qe0X2oWj
whXhDGNL9P7REOftFe5rbL/QoP5ifysUCjuEHOFn5n8vXORs5nNKaBFahV3w
SfHe8y4w7xLP3Yz9JvQKl3k3JVwX0sIx4awwKHQx97xjwj5twi3hhjAhXOVM
A8LT2v8RYRY83H7NPM8fY1/Hs1noo20hNm3Eqx6NDgqdej4HJ/O8LQzBu4f1
GoRq4Rt/Kxzg+T+4/iNs0FqPC43q/02cDwnP0M8Ai9HyRBL94hisV5sp1CRR
/0VhRufKJGp9G36TPgvzPxQ2C8/bY0n0VxZ+Ogefj6xvEuN0AL7mPe7Y49lU
iOe3Np1o2I3Ok+ybRqsu3t1hfIjz30KHu/TH0b8XHczJOdHMd3fwRL7G3hXu
oYP3P85+XXjjBO8/DXHtu+htT9j7HfipgzMcxifVwqvE03E1j2F4TeAXn3sS
nZqJ31Ly198tIY+uM94U4nkn4PsS8Z/WaaX6tWpfULvKHlP/d9ZpFH4VnhJ+
ETYKK4R9SczRZ0PM08dC9Lr93eLaobFytaOMHxHms46/y4Z/BlxWwidNjO21
mxpbIPyABubmvFhNDbAnXwmR90HONkF83oOX/e+6sRqfv0b/CNpYo2/VbmMd
+9lnzBOWCy+HeDbXkc+Yb22LhJ1Cboh+S6N7F33zdyzK8fE1tLfmrlEj6Op3
3sc+X8Ge/qYaP4yQC5345Kqe1wpXhGvErELtYd53oKlrhmtHHWP2XC1tO3ut
RcejcOuH39gDfN1eZS3Xo9PM89h0/XY7+oCnB5g3yjlfxDM+Vz250okHMqgn
y0L00n32H0THrRrbgu6e8xzeWhPi87QHlzHezpw24QlqxQnO3A9f3yG+w1wr
7Mc1rNMKb+vj3HcdcD1tYWy6Nvfxzh50XbGXLnO+fSHWtwI8/W+gTqJRCs3t
wQ14ck+InNzPJO/tQ/vLPnbd9v3nOuw6fQP/fow3p++W+ZyjIonfNCQztT+X
dezx9azvWuE64bq9AI9XJdH7uXjSubmOcXMshGdZiPe0+VWGmFeDQn+I9WtA
+CRE7Y8LX4aYq6eEXvKqTxgSXhfOo1U2frgY4j/KpRDvA98LU+zhvf4K8S7J
JMYfhHiGm+zhvf4kR8vg6TXmwt//Df5/GBf+CLF+7Ecza+dc2R3iP8SmEPsF
xMG57/pfQU75fR0+sVdbidtm1isJ8T/J73LQ+iS6l+JF1xWv6Xws4Nsq9HJt
WgWcDy3MzYfDVubUUEvy0K4A7ubo/wb/P6RD9J9riv1ofq4Xlfiknncp3vtc
n4d4Z3Rz7lx4DpMLzo0SuNXgtTzmOO9dT81rPpzv4bGNzFkOp3LyojDM5FYO
sbJHstBvC551nLexr2MzDx2do3PQ1+cap/8d8d6DB3Lxh/Mii++byB37xXfH
OnxlLXro22vOFedeilzYiRaOTxExMidzMSfngHNhWHifWHRxjjbOMkIsXYO6
iflYiDm9l/UDnqyiPhQxvoNzbcfrnu/7bwrf1zJWxvxNrGP+s/GntcuHm+ek
8cyPrFtKfEbheIZ1UvhkLnMayYNizldMDtTg1RI0vBBija4L8Z7zfXcAHRai
pT28Gx934k171DUiA48cZ8z1bhbrlBNX729/72Idx+0Y3vZaHXD38/Qd6ed2
vvPz/zQ25Mw=
           "]], PolygonBox[CompressedData["
1:eJwt0skrRWEYx/FzxEI2EjeEy8ZUl5vExoIFCwtKWd3VtbHjz7CQdM2Zhy6Z
knnIXDJkyDxkypAh/gTl+3Z+i09Pvee873mf33NSqmorakIsy8pGKEZty4qB
D6/YgBf56MAzCtDHu0/UbeShxKxhC7koQg/utLeZ92+pm8jRGV0YQiTScI9e
hCEOR+iGrTvtIYgWzqqkPuIExdpziEGUIxULWEEm3GjCMjKQhAAebOcsr3p9
193H+cYb9RN+9WR6+1avizz/oq4hCx6smj5RZzlr6zhAoXrYxQVKEY5TZexT
JiabX1QrU5Ntq7KOps5gCemIRyPGEKuePtCmu5u1WUwhUWeasyeUrV+9TSJB
Gf2gX3cze85M1pqdmdE0BhCBZFxhGH+WM5OgMvBoBmYWNyjTnkvNwK21azTA
pYz2Ta76F1x6FtCsTGbnGLGdLEwGL2jXLEwPc5jX7KNQr4zi9Y8cY0fPzJ07
qf/F+16C
           "]]}]}}, {{}, 
       TagBox[
        TooltipBox[
         {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["
1:eJwNxkVWQgEAAMDvUbwSR3DhUg5io9iFIibY3YiBYnd3F0dwFvPeFBaFQyUF
QRAUMyynxDjhnDMizPJNki9SjFPPB5/s006aH4bIU8UhHRxwzBHVzPBGP68M
MEYdz7ywTSsrvDPIHxXs0EaOPXapZJpHenigl1Gi3HHPOs0s80Qfv5SxSQsb
bJGlnCmu6eKKOCPUcsElqzSwxA23dJOgkQxNrFHKBJN0Ms8Ci9Qwxz+Lak4B

           "]]},
         FractionBox["1", "2"]],
        Annotation[#, 
         Rational[1, 2], "Tooltip"]& ], {}, {}}}], {}}, {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], DiskBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             CircleBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{1., 
       1.2}}, {{1.3, 0.9}}, {{0.9, 1.2}}, {{2.1, 2.2}}, {{2.3, 2.9}}, {{2.9, 
       2.2}}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], 
             PolygonBox[
              NCache[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                Offset[{2 3^Rational[1, 2], -2}]}, {
               Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                Offset[{3.4641016151377544`, -2}]}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             JoinedCurveBox[NCache[
              Line[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                 Offset[{2 3^Rational[1, 2], -2}], Offset[{0, 4}]}], 
               Line[{Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                 Offset[{3.4641016151377544`, -2}], Offset[{0, 4}]}]],
              CurveClosed->True]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{2.1, 
       1.2}}, {{2.3, 0.9}}, {{2.7, 1.2}}, {{1.1, 2.2}}, {{1.3, 2.9}}, {{0.9, 
       2.2}}}]}}, {{}, {}}}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "GridLinesInFront" -> 
    True},
  PlotRange->{{0, 3}, {0, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.822998930327085*^9, 3.822998973672783*^9}, {
   3.822999028232938*^9, 3.8229990350221*^9}, 3.822999091454644*^9, 
   3.822999505214547*^9},
 CellLabel->
  "Out[400]=",ExpressionUUID->"28a4fd6d-c303-46c1-9c3e-4aabe61b6502"]
}, Open  ]],

Cell["\<\
Next, the polynomial kernel does quite a good job in this case\
\>", "Text",
 CellChangeTimes->{{3.82299893543262*^9, 
  3.822998947040895*^9}},ExpressionUUID->"af4083e9-c97a-4451-aa68-\
ef3827a8545a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fP", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<SupportVectorMachine\>\"", ",", 
       RowBox[{"\"\<KernelType\>\"", "\[Rule]", "\"\<Polynomial\>\""}], ",", 
       RowBox[{"\"\<GammaScalingParameter\>\"", "\[Rule]", "2"}]}], "}"}]}]}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.822553412693893*^9, 3.822553476001458*^9}, {
  3.822553527000094*^9, 3.822553560051292*^9}, {3.8225536032357807`*^9, 
  3.822553624439756*^9}, {3.82255369819847*^9, 3.822553748689126*^9}, {
  3.822999221246902*^9, 3.8229993471877832`*^9}},
 CellLabel->
  "In[390]:=",ExpressionUUID->"d547bbb3-775d-439b-99b1-adc2c8e56e99"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.5`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.5`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["12", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 12, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 5755441559493940478]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 12, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {1.7416666666666665`, 1.7666666666666666`}, 
                   "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                   "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Model" -> 
                Association[
                 "Matrix" -> {{0.7071067811865388, -0.7071067811865563}, {
                   0.7071067811865563, 0.7071067811865388}}, "Processor" -> 
                  MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                    "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 2, "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "Method" -> 
                  "Linear"], "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.012256, "MaxTrainingMemory" -> 105808, 
                  "DataMemory" -> 304, "FunctionMemory" -> 21240, 
                  "LanguageVersion" -> {12.2, 0}, "Date" -> 
                  DateObject[{
                    2021, 2, 22, 16, 15, 47.798376`8.43198811759243}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 8, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
             3905946272741463577]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
             "StandardDeviation" -> {0.7017339635186232, 0.71336448530109}, 
             "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 4219510318259331672]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4147396025890724089]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[RGBColor[0, 0, 1] -> 1, RGBColor[1, 0.5, 0] -> 2]},
              "MissingCode" -> 0, "Version" -> {12.2, 0}, "ID" -> 
             6772050397287602588, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 6181563047931870211]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[RGBColor[0, 0, 1] -> 0.5, RGBColor[1, 0.5, 0] -> 0.5]], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "SVMParameters" -> 
      Association[
       "KernelType" -> "Polynomial", "GammaScalingParameter" -> 2, 
        "SoftMarginParameter" -> 3, "PolynomialDegree" -> 3, "BiasParameter" -> 
        1, "MulticlassStrategy" -> Automatic, "Shrinking" -> True, 
        "KernelCacheSize" -> 100], "TrainedModel" -> {
        Association[
        "supportVectors" -> {{0.5180058634521635, 
          0.6103608038166278}, {-0.6250810330571168, -1.2180314652050697`}, {
          0.5116682952594905, -0.7951149204145397}, {-0.6260499179170453, 
          1.5909313065417592`}, {-1.2029136458952523`, 0.6117612098654124}}, 
         "supportVectorCoefficients" -> {0.06995836942417911, 
          0.01525905462334245, -0.07041928547843215, -0.005958288004387213, \
-0.008839850564702212}, "rho" -> -0.2672913662217944]}, 
      "ProbabilityCoefficients" -> {{-2.524534225463867, 
       0.34895873069763184`}}, "MulticlassStrategy" -> "OneVersusOne", 
      "Processor" -> MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 2], 
         "Key" -> "(f1f2)", "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Calibrator" -> None, "Method" -> "SupportVectorMachine", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "KernelType" -> 
        Association["Value" -> "Polynomial", "Options" -> Association[]], 
        "GammaScalingParameter" -> 
        Association["Value" -> 2, "Options" -> Association[]], 
        "SoftMarginParameter" -> 
        Association["Value" -> 3, "Options" -> Association[]], 
        "PolynomialDegree" -> 
        Association["Value" -> 3, "Options" -> Association[]], 
        "BiasParameter" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "MulticlassStrategy" -> 
        Association["Value" -> "OneVersusOne", "Options" -> Association[]], 
        "Shrinking" -> 
        Association["Value" -> True, "Options" -> Association[]], 
        "KernelCacheSize" -> 
        Association["Value" -> 100, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[318081], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.107317`5.4822135171524495, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.45916319500156927`, 0.19263562287269778`], "Accuracy" -> 
         Around[0.8333333333333333, 0.31914236925211287`], "EvaluationTime" -> 
         0.00015811388300841897`, "TestSize" -> 2, "ModelMemory" -> 12192, 
         "ModelUtility" -> 0.004628443740248844, "TrainingSize" -> 10, 
         "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 111296, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.45916319500156927`, 0.19263562287269778`]}, 
         "AccuracyHistory" -> {
           Around[0.8333333333333333, 0.31914236925211287`]}, 
         "Configuration" -> {
          "SupportVectorMachine", "KernelType" -> "Polynomial", 
           "GammaScalingParameter" -> 2, "SoftMarginParameter" -> 3, 
           "PolynomialDegree" -> 3, "BiasParameter" -> 1, 
           "MulticlassStrategy" -> Automatic, "Shrinking" -> True, 
           "KernelCacheSize" -> 100}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Polynomial"], 
             "GammaScalingParameter" -> Association["Value" -> 2], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.45916319500156927`, 0.19263562287269778`], "Accuracy" -> 
              Around[0.8333333333333333, 0.31914236925211287`], 
              "EvaluationTime" -> 0.000250593616813636, "TestSize" -> 2, 
              "ModelMemory" -> 12192, "ModelUtility" -> 
              0.0046283512605149735`, "TrainingSize" -> 10, "TrainingTime" -> 
              0.03981071705534971, "TrainingMemory" -> 111064, 
              "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.45916319500156927`, 0.19263562287269778`]}, 
              "AccuracyHistory" -> {
                Around[0.8333333333333333, 0.31914236925211287`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000250593616813636, "MeanCrossEntropy" -> 
             Around[0.45916319500156927`, 0.19263562287269778`], 
             "ModelMemory" -> 12192, "TrainingMemory" -> 111064, 
             "TrainingTime" -> 0.04458800310199168], "Index" -> 1], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Polynomial"], 
             "GammaScalingParameter" -> Association["Value" -> 2], 
             "SoftMarginParameter" -> Association["Value" -> 1.], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5291779054019167, 0.1393725259161269], "Accuracy" -> 
              Around[0.8333333333333333, 0.22566773346211014`], 
              "EvaluationTime" -> 0.00015811388300841897`, "TestSize" -> 4, 
              "ModelMemory" -> 12234.666666666666`, 
              "ModelUtility" -> -0.10805285205389537`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.03162277660168379, "TrainingMemory" -> 
              111168., "ExperimentCount" -> 2, "MeanCrossEntropyHistory" -> {
                Around[0.45916319500156927`, 0.19263562287269778`], 
                Around[0.5991926158022641, 0.15446897515505664`]}, 
              "AccuracyHistory" -> {
                Around[0.8333333333333333, 0.31914236925211287`], 
                Around[0.8333333333333333, 0.31914236925211287`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00015811388300841897`, "MeanCrossEntropy" -> 
             Around[0.5291779054019167, 0.1393725259161269], "ModelMemory" -> 
             12234.666666666666`, "TrainingMemory" -> 111168., "TrainingTime" -> 
             0.035417509793885846`], "Index" -> 2], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Polynomial"], 
             "GammaScalingParameter" -> Association["Value" -> 2], 
             "SoftMarginParameter" -> Association["Value" -> 0.4], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.45916319500156927`, 0.19263562287269778`], "Accuracy" -> 
              Around[0.8333333333333333, 0.31914236925211287`], 
              "EvaluationTime" -> 0.00015811388300841897`, "TestSize" -> 2, 
              "ModelMemory" -> 12192, "ModelUtility" -> 0.004628443740248844, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 111256, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.45916319500156927`, 0.19263562287269778`]}, 
              "AccuracyHistory" -> {
                Around[0.8333333333333333, 0.31914236925211287`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00015811388300841897`, "MeanCrossEntropy" -> 
             Around[0.45916319500156927`, 0.19263562287269778`], 
             "ModelMemory" -> 12192, "TrainingMemory" -> 111256, 
             "TrainingTime" -> 0.04458800310199168], "Index" -> 3], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "Polynomial"], 
             "GammaScalingParameter" -> Association["Value" -> 2], 
             "SoftMarginParameter" -> Association["Value" -> 3], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.45916319500156927`, 0.19263562287269778`], "Accuracy" -> 
              Around[0.8333333333333333, 0.31914236925211287`], 
              "EvaluationTime" -> 0.00015811388300841897`, "TestSize" -> 2, 
              "ModelMemory" -> 12192, "ModelUtility" -> 0.004628443740248844, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.03981071705534971, 
              "TrainingMemory" -> 111296, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.45916319500156927`, 0.19263562287269778`]}, 
              "AccuracyHistory" -> {
                Around[0.8333333333333333, 0.31914236925211287`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00015811388300841897`, "MeanCrossEntropy" -> 
             Around[0.45916319500156927`, 0.19263562287269778`], 
             "ModelMemory" -> 12192, "TrainingMemory" -> 111296, 
             "TrainingTime" -> 0.04458800310199168], "Index" -> 4]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["SupportVectorMachine"]], 
           
           TypeSystem`Struct[{
            "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
             "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
             "Shrinking", "KernelCacheSize"}, {
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["Polynomial"]]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[TypeSystem`Boolean]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}]}]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[]], "MaxTrainingSize" -> 12, "PreprocessorEvaluationTime" -> 
      4.390625*^-6, "PreprocessorMemory" -> 37864, "InputDimension" -> 2, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6931471805599453,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.822999347903017`16.334979213100475*^9, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.2, "ElapsedTimes" -> 
          0.19799300000000003`, "ExperimentCounts" -> 5]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.3}, "ID" -> 
           5006195930348260787], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.9}, "ID" -> 
           626850493589782258]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.361593, 
      "MaxTrainingMemory" -> 406560, "DataMemory" -> 1784, "FunctionMemory" -> 
      141424, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 2, 22, 16, 15, 48.131793`8.435007016334447}, 
        "Instant", "Gregorian", 0.], "ProcessorCount" -> 8, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8225537253516912`*^9, 3.8225537523121777`*^9}, 
   3.8225538805451*^9, 3.822554159890176*^9, 3.822998889338122*^9, 
   3.822999096436692*^9, {3.8229992267714367`*^9, 3.822999291812687*^9}, {
   3.822999325542871*^9, 3.822999348161817*^9}},
 CellLabel->
  "Out[390]=",ExpressionUUID->"4e840838-87f3-4828-916a-a2ecca98a1d9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"fP", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], ",", 
       RowBox[{"\"\<Probability\>\"", "\[Rule]", "Orange"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"Evaluated", "\[Rule]", "False"}], ",", 
     RowBox[{"ContourShading", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"LightBlue", ",", "LightOrange"}], "}"}]}], ",", 
     RowBox[{"Contours", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", "/", "2"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "data", "]"}], ",", 
     RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8229991018851557`*^9, 3.8229991109407997`*^9}, {
  3.822999155841064*^9, 3.82299916440069*^9}, {3.822999271038748*^9, 
  3.822999272286792*^9}, {3.822999491075138*^9, 3.8229994948429947`*^9}},
 CellLabel->
  "In[399]:=",ExpressionUUID->"83f37290-0f9d-4d15-bcd9-512ac8d6d8f3"],

Cell[BoxData[
 GraphicsBox[{{GraphicsComplexBox[CompressedData["
1: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
ez9jjiZM+MaN18NFwYG2VS72yM2G649zhx4vLuvfLrarcHPoXplnw/jr+r4n
3X6Ps8BI9+evM+3r6DNjokv7hdkw4uT6/oPNVrixxSk45c9saNcwcNOf1wzK
kRRbXrkyNvi1Y3qLsY9lvcjW0cfSytntvtztuR13jNcqN9ZFL9txxAw7L5Ro
3+SwVqmw79HDznb7WB06Jnb3YidlavXMv1ceeQOTLmztt7Sd3b8fDVj5xaQM
mDxrqavhlQ3CpgV98dkgvfJDlVEBr3rZ/eeuT5Pa7NYr0ztWjpjZyQZBE1aP
9J/xEpx+bx3V4Wo2jA9Z8Wb3/ShIqjCx2Fqb3PdZ66Us8Pxc1neVuNU/oqF9
vWuMD3pgOifrnzAOm3NkSUvvg9mQedR24sGvcp9W36NKjwV95LmLz8i/D1VZ
nQYxs8oHXHW3wZbtMxdMCNMoS5unXdza1AYrBv0ZEBAWCrOHf3142YUs+KfY
+ifFk0PhyM13xk7+WbDk8Oe3jl2R9U/jTtbr3Chb1i9iPFV60p1HSj0zjPzs
dJ8pndNZPiYDtt7yv5J42gaj+roqSxqkw3XTypjbo2X+ZcO2yZX+0NvjlTyA
4QeyoK1vjFvT+XkwtXntCc3Py/1l7I2UzXu2yHrbR7/3PFtrqQXinq/T9vgh
He6FtJ617g8LeGUtLnb6dTrM2dDtaNgMjWJ4Pf3AAPv8rpzcIyB/rUYpE7nJ
J7+yrI/74tok7zZxdrt0Pn6j1tc2WHj6asVNdcywRDtm/ZUbsh6qhGlHs4HP
ZN1D1pd/RcX4pMLN/dMuuMTLeqhiq/4oO36UDYZXCytb8ZKsh3q3/uDy56cT
IG5KxQoPylihevhvLfZ5JsCdiO29rztboW18bJ1ZN9X1TiU7Tmlfr6KTAkEJ
855Oy4BKywYOXPPaBv1+si58uMcG7a5/V3rgfrsf9a5XbMxWW+HVDBvqRq9+
4Sbrnx51V/Z1fBcFHvfHuBTPy4ayZ2/6f+3kpBzvGTeq7ngbNPOp4ragsax3
wrzUfCdP5fEvNige7BKzO8xJaWystPg7O78ss09cwM9OSqOlpfJCfpHf6y6a
+3z6sXE50PPR7nMd9mTCqaZDe9z4UdY3WfJGNL47LBcObtG4p983QZNqk0/c
3muP90vklhsfa5/ftBHNvAyv4cSwVGtqkhn6H8u5vlb7Fn639g18/609Tuqb
sHa+VdYr/bzBLW7ENRMo+UOWpETdhPLDfRvV8DPBywZl20+MMsP0057Go7Mj
4bN69WNX5tn3aaHG26V6xsA/k6OVlxp5TnbK1vOlqYEFov9atWH/gwQ4MsSj
wZo2FrjjW+9OpnuSyKMkeWp8zeE50Li3fqA2xAzFn7U/tGVcGNSY33Dinfdy
f335+8bBszur661qdx6eZD6dDEunX797ud99MMx78r1OnwVZF8pZhiy7C1vO
XSh/M8EENRt12P7jh7fQ4+/vPnWdY4bWJ2s38jKZ4VRstzubDkTDzLgGc5qk
muHeirvBFXu+hV7Nik32q2YBxXOQdspX8TC6Wdt9japYYOjqay+XLJb1Rnu0
lW+F18oC/4Y+Wxt2sMD6gOm7A8o7K30OnmtfKkTWE0VnnRzR4qCsHzJkJs0b
EPIGPD70NlXoYoZf2z0oM+6aBXZu9QlxWueiPOnT8TPP67IeH+3kSuu+a7Z1
l/VB4TFjk8v8KOt/+rzrEt33MxsMarN26dlgK1y7sb5f/gmDsmVOmI/bayt0
/RD16O/nBuWrNl1+bdZM5n0fp99KLN/NCl+VaFc27qIJHtza6D14jBVa/909
psUXWdA9a/jhGh3tfFHemKlZaoX0iF6K53h5vl7Czy21wkgLjHvRqm5AXCrE
uh8tu2iOBW5FV0xrGZcG5bSPLilT7f4sr2nXaxvSoK77Yk/tLJnPPJP7dvOo
eVaooy3ZIuiGXsn6Y1eUEiXz/T4xqSGXXsh6nEV1Il9WC5P1N9s0c37qb8e5
EUGRy0aHQ5VR3bQtZ12G8g1KxZf4UdbbNPL+M2JtfxPsfZfpHeeWCfuONQ49
VEnWN3c70Tx4i5s9DvrHvGL2BVlPM3jBqDY1L5oh5c6ZnPqaPbBtfYXWT/1l
/UzChB+HXrHj4VVObe+85ZT4fe+JhB+7/J8J6vSYduVTJ51St4fngNBpNmje
qvyamy1kfQzWy1xyjXi4y46vbJq42fNnnVI+f9rYJfb9yPTXF729nuiUvn/V
99pkX+9J3++eGLDdCrVK7tjXr5pBOTQBhl22x1Wf1JwbG+huUJ6VSovr8etj
SOky4LD3DFkPU31Nv68//UHWwywK3aR7YN9nKs2qKr6xsVCu38M/ao6Tcfji
Ucc2dtpmgfDQng2/aSbrX9w7vfeOtibCvCXhA05/a9+3lC2zdettI6y5s/dp
p/QcuLbmm9C+PU3w0+Wv+5i65sK1HsujHpeT9S6Yb15zu9U49/K5YHHv1eXi
+2zwXVcj7esBGsUr4XKnhXXk91wYB5oTSvot62eFrK6v6zTbkAuV10/7dl4N
K6zMbvLtq025EP1uaY28mlZovLzc9MiZ8vu0ejkJXiVuy/qVTWZL9Wj7/uub
MU8jvs80wux9u2wLKlshOGlJrzJuJujb89b3P7c0wsjqFcbm+uVAe++7PrYZ
sn6l65Vz89wuZEPzJX6e9WprFF2971KC99jxoDPXdMU0ypqxC9N+722GxVEx
nvdsGqXZgGeT1rUww/LlNfz2hGiUlGrhI0cHynoWf31EQH6W/B5t6L4LWy/X
knEb5vluuQUPsQy075enaqZWydUqUzZPuZg61gYnG4165rtNq1yPD5xZzUvW
M5Q33z4Mh2T9Spl29/ZlJMg6hX5Thizubo9XP/W+9arpGhfF7cfi49/NtsGz
Ac8X/NDARbHAs24d59vAo+83KaevOSvT9vu+HGuPf5fHVP/hiyouyrDSv1zb
ZX++atimQX8MsUK51/eyc0fpleiuX7pXtdtvgwFtiplGRsLmqRN9y8TolC9O
9/q/iUPk+dWuJeYmi763wbtXR9xH9Jf1LOdeaZ8Pqe8HyQf2GUc9NMK7rY3n
j115QlW/siyvtvuqVSZY51ps9CE7n9QdHdI7YGQWFD9wRn9gi6xX2fnj6K01
syPgRHz7Rl4js0GXodHfNryABbcWXi2xQOaNnnTITEjfmw3lugxybn33hcgr
VV33snNNj6dQzL6/i7Rmgcdql8oVz6vzbk+q1K6jqZgNJ5z3T/9z23L2/ds2
eKlv1rf3aSMMmVwyybbgAnQJ/bVBYAcTXC6T2Hlv2HloWn+Wx0YPExwOGvhn
h9WynsUz/6a+1h1ZT78mcJ5tszUGEo551vC178OuVBub2HmiTvnbZ7jtsZ0v
qqcMvhNr55OZG2vX/5dPHvnc2h49KgbePrpp3ZUhz2Uff3l8x6VQM8wcd7T+
v3aOejHau9a5ns9lvUpccsm3A4wWONjS4+SjfkZIP3Jh4vxo+/6z4Cr/zs+I
IVMTAxZaIaRCraWXFuRAgw+Rc7sutkBg32ZbtwWrv+fa2qKPc9P9djwkLjqz
g7p+ZUv/h/VPvbCCd69bv7lWsPNC9o7Oi41WuP+qY+0o+3j35s7onltJ1qdc
Wutxzu15BjxRlu29d0DWq5j2D6hb9nEevCtZ/syeHfa4cG2pw/8k58G5cXfL
r/ST9ShfLGnZ6YPdD+38bdfUJy21SqPwmeua97BB42cTJs5crlUyQ6uOLznA
Bi7rrX0H2/17wq1yJ/64FAapzfOblLH7nxkdIxZccg+H9gcPjdhsj/f7D+vt
02TDRdjReP/BeZfNcKRSrGHw4nPi3DO7s0v4sNo2COj7++MvlxiUqwm5B5Sq
Mv/q+/kY1y2tbHAh+H6VZsUNyv8tOzvwqn2/oc+tXv2vYL1y+JctMzza2eD5
1Uq1V4bplbA7d6d4tbVB7VUHun5o8RDqJWiXVW2cBaH9M2IPT4mHNlUrnsx8
YYEOO/7yHugk601SA2dXfmKU9SUPQy5Zr+40KL0+6300sYINPjs8o1LZv+X3
Si0vLgqvucgMPkm9PVr10Sq/Bo13uvzQ7v8a3619wKxV9p6wnC4/PZOdH2SC
4t/5L79WOdDJt8rdT8aqvx+6FHmx5t3GWuVsc++jO8/b+WPR9qbLPiyGa/ad
4Ri7P4bZI9s8PrIJlrpo9QmPDcq7a1M/rCppA+u04ENeOQbFrcqIo90NNjgY
/6BCUPssiGuzYPaA4nnwmyX1uPGWrP9o2Gz5pv3XZL1Hh0qHViTHyHqOua+t
CbVPyXqO7OjyQWcayu+bA9vNmXh8gpNiPtzP/7Y9Xl/zo1urlLfynN3aq27i
Y5u0s8H5l82h7rJ+//2dNl9dt8czJ7w9Nmy8+Bwu6HZ7tdNnQ1frUL9bljx4
8jgctn4v6xOG/7x1V5/WFiieetH9jVvh38cu7axsSvcfs3u+/P6u7HhjF+tC
+f1danidpNyZNih2PMCrV4+3MPvgF30GeZlhl//4+XfvyfPWNQdL/Pbkjhka
vnmy2Kf0Q9gRMnH2MXt7ypqhgb90DYKmiT6v6wbJ85L/B4pIxfI=
     "], {{
       {RGBColor[0.87, 0.94, 1], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
0zjzCDUeNZ/n/yad40fR/x9kWPbN
           "]], PolygonBox[CompressedData["
1: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
dSdqrb1IfVfXHUN3jf8BTxKLpg==
           "]]}]}, 
       {RGBColor[1, 0.9, 0.8], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNm3n8VlW1xs/7nnP2EVEmQxxwKAdkClEJwcgRRBBlUsCwckBRTFHDwtAg
tRyge7NQSLsXxAEKUEIxZvPKqIBlAmp4y3tTk8FSUBGs1pfn+X3qj/PZ6+x3
T2fvNTxrrf1+/vIbBl5fz7Ls7DLL8ij31LLsu0GfEWVLfojKs4J+P54D4r1N
VG2L8h/xnBN1jeuqv8O/N3abr7vvBVE/MugU9GtR9V687x/vE6LsGPN0iGdR
/HZ6vH8S9SOjzcd10VcH/Ycod8Tzs6DfiHJ7PPcFPczthrIej3lIprbvx7Mn
U7nD7be7HpqxP/ZcX87128Sgt9b1bR8GfV6hb2keYw/3995K33hvHnTXKNfF
0yLon0b5qelbok3T+KZ3Ytyh8XSJ5+WoHxH1e1lXPNcEvTjK1vG8HvRJNbW5
MuijcrW7xu0/8zoX10SfGeWieHbXtWeDYq6B8XzKfseaH4r+fw/6S/Fbsyi3
+nt3ez9n+XfOdGaufpw169rruS7J9M4eb6xrX+7xuW/1PvzDewV9W5S3x/Pt
oJvEmDeaB1jnrd6TI6J+bNBjgm4V9M1B9ww6RdkP/mD/ov4m1h7182uiW0Q5
pVCbMuiphd4fZJ9qmvfBKD8X5bh4vhN959W0hiZRPhXPaK/nmZrmPSTKZfC5
v529vc3rPzJXPWt+0PXs+WR/C3u+pNS3fCXoc6L9GMYPehX94rko+vaLNufH
81G8L4tyaTwXxvNhvO8yP1DuNL3T9V+OcWZE2TSeXua3D4Luwrw+01H+lqae
d1CsYUPQF0f9eo/5raDX1TUf47fx2tpG+4XxfMdn8VPTp0R5b6m54O0B/i6+
pX/QK4I+NOhJUTZifZnWyvhXec9XBn1C0DNr4u1vwqtRHh7PK5l4cVPQY80/
w61DPoj3vpxNlC/GXGvj6Rfvz6Ys+17Q70Z5V5z5D+K5IeonxTM+6OOj7BC/
94qyZzxjgu7o9xPcZnCmcoLb89uldbX/LJ7X4jk7njdyyQZ6i2eW9d6SmPv5
oI+ssmx50ri7SvEb/AFvwIfQtB+ba60veh/u8prnRfun/L2fRJuN8bwaz9fq
Wg/r6lHTd3N2Y61X4LGX4vlJTfu9y2cKfVusY1ohOb4nyrsL8fu9hd6hjytF
b7Uc0ObAoKdH+WSuvmvju/YyRpSr45kWdPNK+/1Dr/+gSvTz8ftvfRZ860+8
bta823r7dMsWMoN8rbf8UP9pqbVMSJKHdTHOsLp4Z4X5Z1ypddF3Z7y/GfX3
RrkmyrXmYfZgnXkP/h+Y672N2yALl+Xqc26mujWufz3K16zTVnjuJua/9ZYd
xlsd9JBMcrDKsvB4Tfx8bU28vNH8fLd1JWN+6DmgT83VDj2Jjl9vPX+KZRbZ
7JVr/B/VtOZveO6ro3wryocy2TNo7OCVUf+numwWe/MH78+QXPNCD7P9abCZ
b7g9Y/zR49BmC3oz6Km2tdSflmvc+zzXFfH8b7x3d3vqR7vu4aCnZNrPqdaZ
4AZkoYfXyfqpO7guPDAr0xp+EeWTdcnSd4w9DrIeXm8avqFfS7c5Old75O6R
4JNJ2INccoU+2Ya+Ct56IuraJs0xIuhfRnljrnWP8Lqu9Dfw8I2TvK6rcvWj
jjbsWzcwTdCnuuSM4KtNpdrRhjOjvrf7Xu4xkf0NyEQmnfhCTfrh97H2V2yz
ZxY6L87i7Fj3HUE/EOWGGH9xPMvi/VbsTjxzC81zmdcAX19mnsG2M97ymngB
nuBsnot+y0vN8XaM++sY4/+j/FUS/jolypNKyTRrax7vedCDozw86nsV0hHI
JvhwXNBfinHHwx/RfmESvSjKQaErRkb7uUn8Bh+zr+w/ews/oMOH58IArGmY
v53v+rr38OJc64efsbNfs03qV6jv8ba51CM7fCd94EP4dJj5/6ZY743xPBT9
rvL+r402E6JuarSZE+/nBn0XmCLqvxrr/368D4vyzvhtTU04ZG3UrUHnlsIM
663T/hrf+XSM/X9Rrojy8nj6FsI/YERs69YYu1nUdcdORnllPOcX0p/od2xx
vZT9+8947ma+mrFKkv1amoQxGRN8gg35cS5bdnGhfuji+V5z10y2/iXbjmc8
JrgC2WL9yNpx0XcHutx7saomLL3KtgCbsDvK6T7zbUl71TJJzy/zeh5JksUn
o2xbCqOVltPp8UyMeRYnjXNclD2T9v8o5DSXrcfWrI62q+IZEs/gUhgXeT4g
zmNGlG2i/Yul6DNj/tu8ZuZCzpZa1rDLy/2NjaPvlpi/UZQnRP+vRt07xs7Y
IL4BuRln2YFPrzavIm8t4/m28cUY8+ottjfYBXTSk8YE3W3rWQPlPNMbjAPO
MY6bWxeWa+m+6Dd+ow825MKYc05d2I+2c9x+jvuC8cFmF8bzgm0nZdson4/y
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
           "]], 
          PolygonBox[CompressedData["
1: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
ukv/BwgaaG0=
           "]]}]}}, {{}, 
       TagBox[
        TooltipBox[
         {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["
1:eJwV0DtIUFEYB/AjvjLNd6CRgSQoFkUalaBmOgjpZIUOZSbVoig9JFyLIsGm
tCGnhtRF0RJqaMnFcmnKUulhDQZZhoMNgfk7w4//933n3HvPPcWdvS09CSGE
p6wmh1CWEkJWagjZJLJfnyT/W3unzlXn8EY9RwnJ+hH5mDFGmeC4eZL8yAcO
kG/WI3spJUOfya5IP8MOdRrp7OSy2RXO8YBrXKeDaf45W5t9U+pxivjLXgrN
D8sCeUjulgflIkvx7CyTQisnrLfJe9wljU9Usc/aK9nPMW7TyCBX6eaXs9yR
fdzgJpcYYJ631HnPSYbUD+Od8JMnfGaFr3xhmCZ7H8mG+D31pm/cUh+hRV8R
/4s1fsczxHvlG+l85w/rnLK/nhou6Ktlu6yV5+V9Nrz/oqzkrPmkPCOz5CrZ
7NEflc94Htc5bZYanyGHZn2u7GIr3h+vmSXPWrl8TyILccYPXvAy/o9zbAMc
4k1H
           "]], LineBox[CompressedData["
1:eJwV0kdszmEcB/DnbaIVB0ezwmvUrr1aW9u06NAEaTnVwUiMk4gtkUhIWlyQ
WNE6GIlTJYiRGBcjWo6OiJKgZmmNz+/wyff3e8b//b//58k2bK3dkkkptbEh
N6UleSmV8Fj9hD+9Ujoo/8pn8imTzU9im7qMCnWX+f3qn7JcX6oeSr16DXX0
03fSn7X6C/IaE9WFPFQ/4rdnHJC/5AO5wtww+Y/7nKbK2ADZzAlOkuUyl/jC
QKqtOyPPxu/Qm1XMYz7DucoVvjKIGnvOyVecZzAtXORUrPNeOdZ8k3f0t7nH
Xb4b2yl3sYBR1o2mgM/mdhibEc/UDyGfOXQYe88NbnIr9pIbe2We7LH/kLqO
In293Mg74/tkh9wkj3CYEvbGecX/tL4ozkRm43vSaX2XsTe85TV9GWdukRwj
F8qxsliOkHPlSDlL7mYP69nMR89bLMebnxDfR/0jvgl9aKSJSnNH5XGOxf+2
b5lcaXy5XBrnG+ekr5SJnriLcSfojjvCB/uq5WrrauI9eU4b7XHP4s6RUb/g
Ja3xPGOf7M3IBv26uGNxLvqZTKNWP13myHKmqCvkVDlbFse9ltcpVZexXf0f
gedokA==
           "]]},
         FractionBox["1", "2"]],
        Annotation[#, 
         Rational[1, 2], "Tooltip"]& ], {}, {}}}], {}}, {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], DiskBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             CircleBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{1., 
       1.2}}, {{1.3, 0.9}}, {{0.9, 1.2}}, {{2.1, 2.2}}, {{2.3, 2.9}}, {{2.9, 
       2.2}}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], 
             PolygonBox[
              NCache[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                Offset[{2 3^Rational[1, 2], -2}]}, {
               Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                Offset[{3.4641016151377544`, -2}]}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             JoinedCurveBox[NCache[
              Line[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                 Offset[{2 3^Rational[1, 2], -2}], Offset[{0, 4}]}], 
               Line[{Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                 Offset[{3.4641016151377544`, -2}], Offset[{0, 4}]}]],
              CurveClosed->True]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{2.1, 
       1.2}}, {{2.3, 0.9}}, {{2.7, 1.2}}, {{1.1, 2.2}}, {{1.3, 2.9}}, {{0.9, 
       2.2}}}]}}, {{}, {}}}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "GridLinesInFront" -> 
    True},
  PlotRange->{{0, 3}, {0, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8229991073447723`*^9, 3.8229991204815073`*^9}, {
   3.822999161020053*^9, 3.822999167764503*^9}, {3.822999238476334*^9, 
   3.822999297528151*^9}, {3.822999329585095*^9, 3.822999351642562*^9}, 
   3.822999498090419*^9},
 CellLabel->
  "Out[399]=",ExpressionUUID->"4b99c2d9-2220-4638-91a0-c8336259b2b6"]
}, Open  ]],

Cell["The Gaussian/radial basis function kernel does a good job", "Text",
 CellChangeTimes->{{3.82299893543262*^9, 3.822998947040895*^9}, {
  3.822999357537806*^9, 
  3.822999373005495*^9}},ExpressionUUID->"b13bba6c-3616-4f39-992f-\
cb29a2e45d59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fR", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<SupportVectorMachine\>\"", ",", 
       RowBox[{
       "\"\<KernelType\>\"", "\[Rule]", "\"\<RadialBasisFunction\>\""}], ",", 
       
       RowBox[{"\"\<GammaScalingParameter\>\"", "\[Rule]", 
        FractionBox["1", 
         RowBox[{"2", " ", 
          SuperscriptBox["0.4", "2"]}]]}]}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822553412693893*^9, 3.822553476001458*^9}, {
  3.822553527000094*^9, 3.822553560051292*^9}, {3.8225536032357807`*^9, 
  3.822553624439756*^9}, {3.82255369819847*^9, 3.822553748689126*^9}, {
  3.822554132756976*^9, 3.822554157006288*^9}, {3.822554211801979*^9, 
  3.822554266062611*^9}},
 CellLabel->
  "In[392]:=",ExpressionUUID->"cb03731a-875c-440e-929e-3d85c43c45ed"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.5`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 0, 1], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> RGBColor[0., 0., 0.6666666666666666], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0", ",", "0", ",", "1"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 0, 1]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 0, 1], Editable -> False, Selectable -> 
                    False], 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"1", ",", "0.5`", ",", "0"}], "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["12", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 12, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical"], "f2" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False]]}]], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 2]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1], "f2" -> 
               Association["Type" -> "Numerical", "Weight" -> 1]], "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 5755441559493940478]], 
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 12, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {1.7416666666666665`, 1.7666666666666666`}, 
                   "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                   "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                    False]]}]], "ScalarFeature" -> True, "Invertibility" -> 
                   "Perfect", "StructurePreserving" -> False, "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Model" -> 
                Association[
                 "Matrix" -> {{0.7071067811865388, -0.7071067811865563}, {
                   0.7071067811865563, 0.7071067811865388}}, "Processor" -> 
                  MachineLearning`MLProcessor["Sequence", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                    "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["FirstValues", 
                    Association[
                    "Info" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> 
                    "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
                    False, "Missing" -> "Allowed"]]}, "Invertibility" -> 
                    "Perfect", "StructurePreserving" -> False, "Missing" -> 
                    "Allowed"]], "FinalDimension" -> 2, "Padder" -> 
                  MachineLearning`MLProcessor["Identity"], "Method" -> 
                  "Linear"], "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.010119, "MaxTrainingMemory" -> 105728, 
                  "DataMemory" -> 304, "FunctionMemory" -> 21240, 
                  "LanguageVersion" -> {12.2, 0}, "Date" -> 
                  DateObject[{
                    2021, 2, 22, 16, 16, 14.643147`7.9182094075460725}, 
                    "Instant", "Gregorian", 0.], "ProcessorCount" -> 8, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Type" -> "NumericalVector", "Version" -> {12.2, 0}, "ID" -> 
             3905946272741463577]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
             "StandardDeviation" -> {0.7017339635186232, 0.71336448530109}, 
             "Output" -> 
             Association[
              "(f1f2)" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 2]], 
             "Version" -> {12.2, 0}, "ID" -> 4219510318259331672]]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> True, 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False]]}]], "ScalarFeature" -> True, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 4147396025890724089]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[RGBColor[0, 0, 1] -> 1, RGBColor[1, 0.5, 0] -> 2]},
              "MissingCode" -> 0, "Version" -> {12.2, 0}, "ID" -> 
             6772050397287602588, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1, "SetSize" -> {2}]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {12.2, 0}, "ID" -> 6181563047931870211]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "StructurePreserving" -> 
             False, "Missing" -> "Allowed"]]}, "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[RGBColor[0, 0, 1] -> 0.5, RGBColor[1, 0.5, 0] -> 0.5]], 
    "LabelSplitter" -> MachineLearning`MLProcessor["FeatureLabelSplit", 
      Association[
      "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "SVMParameters" -> 
      Association[
       "KernelType" -> "RadialBasisFunction", "GammaScalingParameter" -> 
        3.1249999999999996`, "SoftMarginParameter" -> 3, "PolynomialDegree" -> 
        3, "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
        "Shrinking" -> True, "KernelCacheSize" -> 100], "TrainedModel" -> {
        Association[
        "supportVectors" -> {{-1.0520384828143667`, -0.8028975794788621}, {
          1.6585361479466827`, 0.6148160889155379}, {0.5180058634521635, 
          0.6103608038166278}, {-0.6250810330571168, -1.2180314652050697`}, {
          0.804873975164999, 1.59127258976614}, {
          1.3684038159188263`, -0.7941486338400905}, {
          0.5116682952594905, -0.7951149204145397}, {-0.6260499179170453, 
          1.5909313065417592`}, {
          0.8041442992315319, -1.213710157637547}, {-1.2029136458952523`, 
          0.6117612098654124}}, 
         "supportVectorCoefficients" -> {0.7569966186859145, 
          0.9301493552750262, 0.9243687992795631, 0.6599310684468067, 
          0.8624959335249971, -0.8650639585955764, -0.7569966186859145, \
-1.0016667035268827`, -0.5207602984449211, -0.989454195959013}, 
         "rho" -> -0.048376233950908384`]}, 
      "ProbabilityCoefficients" -> {{-1.857298731803894, \
-0.0294551569968462}}, "MulticlassStrategy" -> "OneVersusOne", "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 2], 
         "Key" -> "(f1f2)", "Invertibility" -> "Perfect", 
         "StructurePreserving" -> False, "Missing" -> "Allowed"]], 
      "Calibrator" -> None, "Method" -> "SupportVectorMachine", 
      "PostProcessor" -> MachineLearning`MLProcessor["Identity"], "Options" -> 
      Association[
       "KernelType" -> 
        Association[
         "Value" -> "RadialBasisFunction", "Options" -> Association[]], 
        "GammaScalingParameter" -> 
        Association[
         "Value" -> 3.1249999999999996`, "Options" -> Association[]], 
        "SoftMarginParameter" -> 
        Association["Value" -> 3, "Options" -> Association[]], 
        "PolynomialDegree" -> 
        Association["Value" -> 3, "Options" -> Association[]], 
        "BiasParameter" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "MulticlassStrategy" -> 
        Association["Value" -> "OneVersusOne", "Options" -> Association[]], 
        "Shrinking" -> 
        Association["Value" -> True, "Options" -> Association[]], 
        "KernelCacheSize" -> 
        Association["Value" -> 100, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "PanelCell" -> CellObject[318529], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.104461`5.470499172496502, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         Around[0.4960493448508145, 0.17629045736757057`], "Accuracy" -> 
         Around[0.8333333333333333, 0.31914236925211287`], "EvaluationTime" -> 
         0.0005, "TestSize" -> 2, "ModelMemory" -> 13152, 
         "ModelUtility" -> -0.06073472036273997, "TrainingSize" -> 10, 
         "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 108488, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.4960493448508145, 0.17629045736757057`]}, 
         "AccuracyHistory" -> {
           Around[0.8333333333333333, 0.31914236925211287`]}, 
         "Configuration" -> {
          "SupportVectorMachine", "KernelType" -> "RadialBasisFunction", 
           "GammaScalingParameter" -> 3.1249999999999996`, 
           "SoftMarginParameter" -> 3, "PolynomialDegree" -> 3, 
           "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
           "Shrinking" -> True, "KernelCacheSize" -> 100}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}]}], 
        Association[]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 3.1249999999999996`], 
             "SoftMarginParameter" -> Association["Value" -> 0.1], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.7876790670604056, 0.1430631694786871], "Accuracy" -> 
              Around[0.16666666666666666`, 0.16666666666666669`], 
              "EvaluationTime" -> 0.0006294627058970831, "TestSize" -> 2, 
              "ModelMemory" -> 13152, "ModelUtility" -> -0.4901657877433294, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.05011872336272722, 
              "TrainingMemory" -> 109528, "ExperimentCount" -> 1, 
              "MeanCrossEntropyHistory" -> {
                Around[0.7876790670604056, 0.1430631694786871]}, 
              "AccuracyHistory" -> {
                Around[0.16666666666666666`, 0.16666666666666669`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0006294627058970831, "MeanCrossEntropy" -> 
             Around[0.7876790670604056, 0.1430631694786871], "ModelMemory" -> 
             13152, "TrainingMemory" -> 109528, "TrainingTime" -> 
             0.05613297016625449], "Index" -> 1], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 3.1249999999999996`], 
             "SoftMarginParameter" -> Association["Value" -> 1.], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.5117881927696143, 0.16985834715984252`], "Accuracy" -> 
              Around[0.8333333333333333, 0.31914236925211287`], 
              "EvaluationTime" -> 0.0005, "TestSize" -> 2, "ModelMemory" -> 
              13152, "ModelUtility" -> -0.08757295671540133, "TrainingSize" -> 
              10, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
              108496, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5117881927696143, 0.16985834715984252`]}, 
              "AccuracyHistory" -> {
                Around[0.8333333333333333, 0.31914236925211287`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0005, "MeanCrossEntropy" -> 
             Around[0.5117881927696143, 0.16985834715984252`], "ModelMemory" -> 
             13152, "TrainingMemory" -> 108496, "TrainingTime" -> 
             0.04458800310199168], "Index" -> 2], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 3.1249999999999996`], 
             "SoftMarginParameter" -> Association["Value" -> 0.4], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[1.2096207006765656`, 0.3823963139613804], "Accuracy" -> 
              Around[0.16666666666666666`, 0.16666666666666669`], 
              "EvaluationTime" -> 0.0005, "TestSize" -> 2, "ModelMemory" -> 
              13152, "ModelUtility" -> -0.9447635244015742, "TrainingSize" -> 
              10, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
              109800, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.2096207006765656`, 0.3823963139613804]}, 
              "AccuracyHistory" -> {
                Around[0.16666666666666666`, 0.16666666666666669`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0005, "MeanCrossEntropy" -> 
             Around[1.2096207006765656`, 0.3823963139613804], "ModelMemory" -> 
             13152, "TrainingMemory" -> 109800, "TrainingTime" -> 
             0.04458800310199168], "Index" -> 3], 
         Association[
          "Value" -> "SupportVectorMachine", "Options" -> 
           Association[
            "KernelType" -> Association["Value" -> "RadialBasisFunction"], 
             "GammaScalingParameter" -> 
             Association["Value" -> 3.1249999999999996`], 
             "SoftMarginParameter" -> Association["Value" -> 3], 
             "PolynomialDegree" -> Association["Value" -> 3], "BiasParameter" -> 
             Association["Value" -> 1], "MulticlassStrategy" -> 
             Association["Value" -> Automatic], "Shrinking" -> 
             Association["Value" -> True], "KernelCacheSize" -> 
             Association["Value" -> 100]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              Around[0.4960493448508145, 0.17629045736757057`], "Accuracy" -> 
              Around[0.8333333333333333, 0.31914236925211287`], 
              "EvaluationTime" -> 0.0005, "TestSize" -> 2, "ModelMemory" -> 
              13152, "ModelUtility" -> -0.06073472036273997, "TrainingSize" -> 
              10, "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
              108488, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.4960493448508145, 0.17629045736757057`]}, 
              "AccuracyHistory" -> {
                Around[0.8333333333333333, 0.31914236925211287`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0005, "MeanCrossEntropy" -> 
             Around[0.4960493448508145, 0.17629045736757057`], "ModelMemory" -> 
             13152, "TrainingMemory" -> 108488, "TrainingTime" -> 
             0.04458800310199168], "Index" -> 4]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["SupportVectorMachine"]], 
           
           TypeSystem`Struct[{
            "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
             "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
             "Shrinking", "KernelCacheSize"}, {
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["RadialBasisFunction"]]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[TypeSystem`Boolean]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}]}]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[]], "MaxTrainingSize" -> 12, "PreprocessorEvaluationTime" -> 
      4.1953125*^-6, "PreprocessorMemory" -> 37864, "InputDimension" -> 2, 
      "OutputDimension" -> 1, "BaselineLogProbability" -> -0.6931471805599453,
       "VariableBudget" -> True, "CheckpointingInfo" -> 
      Association["Checkpointing" -> False], "UserStop" -> False, 
      "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.82299937474748`16.334979216150014*^9, "RoundPartitioning" -> 
      Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.2, "ElapsedTimes" -> 
          0.18069999999999997`, "ExperimentCounts" -> 4]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[]]], "AnomalyDetector" -> None, "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.3}, "ID" -> 
           5006195930348260787], "f2" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.9}, "ID" -> 
           626850493589782258]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False]], "TrainingTime" -> 0.343558, 
      "MaxTrainingMemory" -> 406016, "DataMemory" -> 1784, "FunctionMemory" -> 
      141424, "LanguageVersion" -> {12.2, 0}, "Date" -> 
      DateObject[{2021, 2, 22, 16, 16, 14.961491`7.9275498610093065}, 
        "Instant", "Gregorian", 0.], "ProcessorCount" -> 8, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.822554137540505*^9, 3.822554181763659*^9}, {
   3.822554231984002*^9, 3.8225542667855377`*^9}, 3.822998910822529*^9, 
   3.822999374983596*^9},
 CellLabel->
  "Out[392]=",ExpressionUUID->"c3637778-6497-45d7-aa15-e5cf8a764f64"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"fR", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], ",", 
       RowBox[{"\"\<Probability\>\"", "\[Rule]", "Orange"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"Evaluated", "\[Rule]", "False"}], ",", 
     RowBox[{"ContourShading", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"LightBlue", ",", "LightOrange"}], "}"}]}], ",", 
     RowBox[{"Contours", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", "/", "2"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "data", "]"}], ",", 
     RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.822999387520688*^9, 3.822999475932433*^9}},
 CellLabel->
  "In[398]:=",ExpressionUUID->"e1fba570-e6ea-4a26-beb9-071d5b74976d"],

Cell[BoxData[
 GraphicsBox[{{GraphicsComplexBox[CompressedData["
1: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
HOag8LKT4j/WvdIo/S377q9+w6IvzlZJGutKm6v30sP4WwV9qySrpFszw5KD
c4rg4amYdtdyS2DSNxu+ds98A+tfK6t2bsPvb6Df7t97jOv3W2LZPnboGrJ6
+dzXcOJh4fjTrfj9jomj+8aevKmF0HaG/qsXFUOwT47VY8d8+FXTYWCYjRFe
qbu22XU3nPG7VmSNVnsvh4Mxv038+3HW0mGrJh/vnwkHtzU1IfCZtfSxyRb1
/dgXcE0bqw04aCOdqbhrUIzTC/ipIFFr7cTvT7QN3bF9qtl/Dbk0/fCyEeng
WaXB77kOBsjPXdYgUJMGzYePPZj7rQHmR0592397LLQ6mjiws78Rejhof2z/
mtcTsY6R6j4qZUEDXt8JTLvt18psN25U9HmT8D/1cswnwO2mbrfRWrI/ufaO
6pm8Xj6uev6rvs3tpLsdtyzc24/Xz+3vPy2Z1DsZLn2tve7c3QBHHEx1LtiY
7eixV9l3E/TwW/Kcws3NzXly2NBx2yP0UC1m16zAa0Y4sC3SufsP6XDwUHaR
nRnr61xr59QsHSoMWK05duU1iPn6G5gxc9vsG1VNENpw6OuJ9UzQsAnYXz2Z
AuP+vvthbboRrq7eEFUUngrq4hPqX1qlQrFLRom3mf4bnxocrno6FT4di40L
qGWmw6Yg4F0dXo9HPhi+uVvfx+EjBLxoU7dPRjjz0xNrO06te9cEuyYlbR1/
LhE2e8RPumZVAt+Fr1rxyuYdi1OyO9ePu9/QAD0aTrtTx6iQYmpVy49LeA2N
XoS6p7U026lps9qeH/sOJr/7+0F2XCZ8d7Zf+rFOBui77oVh/6VsOH0nfV3o
OANUcLtWfdvyQmgX7Nm6xSkbyXN3yYO5NoUAj0sSO1nbSIpqDq7zOr6B905O
S5cUKaRXfdd7uITGwrEnCxe07GYntR/+2KdR03hwzzXFanPtpEnfXqvxuZIR
hi9tvNy+yLxfZ+7tevncAEsCDl994MPvxS/0en7GrY0B3Az9Ao/+lgHNbj61
/Wi2D/u2T2oWWv0DzK10L+hiHV6nda28aXqTKXoImfFkd9s7/L7YdNsHM1//
pYNDVR94NxlsLXnNbdK/2h0dpK73e/zzYmtpchvNkGUr+TnwsvYVtlz/zU76
7V7H7TeszfI6a9ecdn52UqOLEb17mrHt/MSgGy0SoUujwQdCFxmY3vm6TUrs
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
NuT1o6kLD3Qf7mqU1UfqPjzweuSjKPg/QlFxfw==
     "], {{
       {RGBColor[0.87, 0.94, 1], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNm3n8llP6x+/7ee7zaJOikgjtyiipbKGaNktJtvmhzTIjRdZBpWlnlKFS
ZGuxv35DhcJIRBIGbRiMJUthyPIru/L7vL/Xp5f547zOdZ/n3Oc+5zrX8rmu
c54mZ1144ohSlmW1UpaVVe+UZxnPdVU2FVn2hhpX6LdPRb8leqXofXhWvy/U
9qTalqr8Rf2fML1VA9ym36eqLFT7KerfRe39VZ9CX7XPUrses/oq9VRm6p1n
9NsC0YeJPkTla9ED9I0zVL4SvVAvtKaP6qKI732j9prqO1RjbhF9ax5jzFV5
thxjLhPdWX0OV/k/0VeprbrnuU7jrFV5VeVveneMyl3q01F1S5Xuog9WvZ9K
jyx4s6v5U0PvLFNDG/12kEp7ld+rvZ3qbqpPUFmuua7Tt542f3fz+4XXzfMU
9R+pMl/0C+r3vjq+qPqBFHx9U53v0XfuVhmrfpP1PElllfpNV9u1apunfkfp
+V7VN6v8qrbRKneKHl0KfkxTeUVtbVW6il7G/qmcrzJWZZTab1T7Y+q/TPQG
0QepfKTSARlR24eqm6o0Fv0xvFF5TvN8W+/UU32OxjlbZVf93iqLPi1V9vC7
jFc7jzGbqXTXexU9rxF9j+pXVD+l8qHGeFnreSKFTD1hGXtMzy+KfjzF3iI3
7O8dene6yiOif0IGVFaLflD1vSqviu6pMa8UPYP+em+iyvuiz1P7a6pXqmwW
vUnjvqrxTxV9isp3ar9d712nskj0yWr7q+qRyJLGGKUyXfTl+v0X83ml+jyn
MlvlerU/lMVeIEA36PnhLPTjNu9dc7UvQl9UJomeoLJW7dv0/ITKe6KHaax1
an9d9P9ofj00z3tUD1TbL+rzuMpM9XlM9TvIgX5/VKWGystqO0Cli9qf0Tvr
1bZRfVur7VPv4yGsVe1NVPZUe6M89u5I9E/faIxsq+yjsq/Kga6bWEaaW04a
6r3d85CT7zXW3qoPUFmhtjoqLUTvZflBRg5Qn7p63oMxNLcO+tYWffMoPbf1
N/fQ80/qt0W/NVXfJuhbFjLVzHI1Q32W6vfd9NtKlX3zmGNDlWoq1S2Hn2Tx
bif1XaMxN1t+2Je7mafG+UXtP5dDJpaoPMq60SPL2feaZ2P1+yEF7x+zjP2M
feT9FDIz1Xp9nXXxIcvA9bYzpxchx2vVNqsU8ozN3Mrvlre7LT/L2TuPgfww
97We/33qU7b8349MqSzOgqesu4ZKA5WKyk4qu7uuZj58ofos9oP9UekkeoDq
Y1SGiD5adQeV/qJ7qO6nepDKsfRVOVF0L/idh907TvWZqi9ijaJ7qwwWPVzl
DMbOYu7rPP/ryyGTHVT6InNZ7D/9+mTR9ib2WOV4ZFX1SZ7z+e43UKW31vK5
51Yu4ht91XeVSnOVjmp/XnWzPGR1i37fGXlEb9W/pupGWdhmbDQ+Chtd9vOu
sX1Vz63MR+SrvvvC3/b6sZbqPbOQIeQHu7xLHnuA/NfM4xvI7ieW327Wpbr+
DrpVx8+766M19E71PPSQOdfOQj8beB475zEP9LCpx2Dus4qwC+tL4S+xpRda
xpCtp0V/qrbF2J0sZGeJ6GeZl95rpnJ1FvZnuG0Qi0XXvi3C/z1Viv1g/2iH
h9jGB0phE8eYnu72v/tb2LoF/ha+7EH3wSZfrPJ8FvUlpse4Dz7tP5pDTbV/
ovqCPMbkW7+W4h10t7fqXiqPMD/VJ6rsWY45LLbtRkdvt659m4cfwgdN1m+P
20/caluNbpb1/K7GGC/6vXLQw/TbuhR44IcifOsFKlfl4Usfsz1/zGNC42/x
vTNF1ypH/8nmyaP2AUtMw58dzyvgj/rXKwffmR/jbshijPM9DriljfXkn/p9
hHEU9YUqf8wDXw1UGY3slkNG8B2L1Hamyjj1+UBtg4rYL94d4HGWar2v67cn
U/gR6J5Z7MXL3t9ZKeiK6j7oovEY+3Oe9+g17zd+7WZ/d7boE1SvAPOIvtbv
lsvxbTAhes8z47Jff0+BRx9U/Vk5ZPq9UvQd4DWCKVI5ZLiJ+j2t+v4UMt5c
ZWf99oaev1b9WgoZWOj9amtZrZhvI8zDSe5DO/oxzLK6wHi1Zwr+DS5iPj+l
wKYPqZ6vcovoG1Os/UqVISpz9Txb7TNSrGOQ3z3P48Orte4L3quWAqecm8JG
DrDN7GPbiM0F0+5nW41vxL7iW5vaJ3bNAlu9oDInCx/axJgBe9nNdqqVMUMP
21LsKrj32HJg0l+z8NuMjx0HP4ADfmf72MD2ssof235iM7EZ2F/sMO01bOew
d9hncC9zqw0+0Tp30/PmFDYcW4vN3eHb+EYqBc7YmP2GV9rZPiB3+PT7LQPr
U9hp2p9DTvT8sdr/qfp/LVf7V8L34oOXZ+FvofHF99nnoqe91XdUFr5uWBY0
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
rQ==
           "]], PolygonBox[CompressedData["
1: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
Dp+FYmw2vCjc+6nnPRWuYapl6lEaov8HvAlq2Q==
           "]]}]}, 
       {RGBColor[1, 0.9, 0.8], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
YF0h3d3AvN7Q+znFuq+NdR/7p22/Uv4kev7CkLfL8RWifikXzLmPC/jcKIsz
nZUzY1/g69nWJ3OtM6DXUXGWLQH/q5SPPTjKjGhvZHhr9D8CfzyX7enj+R+B
tlEP9Fojc/0GfirXnFdUFJPSjk/O2P7uA3xOlNcr2jPz0LeH12Ldo+Js7we8
rZQO25orNiCG3mg/pjbghaXOiX9FDIKfdlyc6z38m5jjg1z+LnHZh4VoAP6f
SrJf9aJ+KOZYViomfybXWPjwuVz+EL7Qj6uCf0QcFn0/LrSn7V7jk1K43Zzv
xfdm45n53vecvZL2Wa8qPA/NpVexR8Nz2aSP0Z+5bBB6CV9nT26gu+n4qn8D
w2vEZvDb7bliScY2Ncz81L0MQ8M+pkUjtyOfNVH3zqU/a5HjXPmB5m5nb7Qv
ZD9Rxrh+Pvrf7Tlft70Yajrip7A3fJU7fK4J5gv4ZqdlFH8IPn8wlx5BhzQx
jO3DF6EP/NzYY9n/TuNtjf2EEd7PAsPsGZ7qYR6+1TB8fksu32WPvwmMbjrW
Zye/0dh8C8xeLvV+1gcdt6MTqvK18Y/wt48oFe8QbzWuKp45KPr+KODVAX8Z
38cX4gl4bVIpGUZfoXPRvei0vsZzC9e1pgU4WWT8XG34SvsDc92+2TC81zrW
/V/sfBI+Fhjn0z0vc/bz/Kx5RpKO/6IUXhcYh81inhx9Et9/Ft+6lrL9k0ud
Af2NfkRPoktPjraWpXy+DUn+WBn1A9G2uJT+qyT1/7aUrwE+8DeG2XbjWxMb
1fNv5JBYFJ19VaGYlN9tYm//F/C8JNxhF7BlGx2jEavVL5WvYR9Dk+LTrkl4
etB4u8Qw8kss1cB2ZUnUDxR7beMO0wia42vi4xEzfew9tvU32rFtjIO25LWe
iH5f5LIr+LLYGfAKjE97tr8TJ/axDSTO3Zi01iul4g/4Czv+R8duuxOLpeZi
nvluw7891DzaCX+5Klx8EvBi/G77f/iSjxkPcw1jJ672N9rRv+h3dDs6FFuG
7SLXstR8uMM4B/fTrVPQJ3xf5j5zPOd40+pz06u2UIz6udelP/irTcrNHZcU
Q6Pr0fOr7H8+meSDzPGc5DXJ0+Hv1XoP4OGwqEnEbom2b5x/aZGURwHGV7wh
fk8K+HdJvDfJ/NfOudOpSTk44rspSXxHfpScw8ykfGmdqI+o6ixvBh6eivpJ
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
WHextw/cf6Zlual1MvM/7P38G5tiYFo=
           "]], PolygonBox[CompressedData["
1:eJwtlneMVlUQxd9+7823UhdE1lVwWQiSUKRoIJBgFFsUGyIWjBUMoJgFVBQR
goUQE6wYuwhiEIRFihBFJYIFBQtYYJEsPVIWWF1YUJTi7+TsHyfvzJ377n13
7syZ13bIqIHluSRJKkAGno4keSZNkpHgdwb6Yz8H7waugX8DNsFLC5JkL/5a
7GKe1SyyBn4DeBF/P3BTeEy+7eA7eDcwGd9UMAVeB0p4fw3+w/CjoDX2ceyt
8NHggN4FKTzySdIVf3fQB/sjfRNrrQZL9e3gWXhPsI85n2H/BM/Bm+nbwSHs
laz3G/wg6IK9C7sVfDgYg70O+zT41eGzjwNj4PeFzz4A+374YDAt9Tsj4HeB
M1PHcHL4G/QtlazXAvsXnQd7ELH+G99snQF7GbgV3g7sZ+6D7HEC/6BwLBWT
I/DHwSSdB3SEP6wxeDvwK3My4jMF3gL0xreVsYnsNRz7JcUC/AEvYI+D+I6C
6djV4OdwzBX79aBB+Mw6e63ixdzbscsLfOap8FHgEfjFYKDWBoXM28T8HfC9
+kZ8VdjF8DyYiT0DvKL5zG1Z4G9YhX0E+x3dp5JSa2ss5zOMhW8Atalz7i/d
J89/8a9grEKx5/zbcv6GEvgw5RC+BtoH/j3YqfsGP8A/B+tS54hy5TXwLvwB
vmk/76zGrsK+AN6Y9XqAsfBV7HGVcj2cy6XgBXhn/MMzf/M87DvCd6+YKXbL
wrk6lPNUMm8J9lfYCVgMXwRWwj9m6DF4e9YbzLwi1jjJ8w3GZuH/EXuachF/
DXwDY23yPpPOtoexMnhN5rveo5zGPpaZ1yhfsOeC5aoV5rSFt2SNLTnnSDH8
LcbeU3wYexn+D+8fTJ3DymXljHJHd6a7U8wUu+3Ya8N7aC/tob1Kwr4izYU3
BrOxT4Ft8HPAlznfke6qGd/Qk7nfMlYE/1R3iG8j8dnJeJO876aMsfX4GmG3
gTfXnWF/EtayIsUU/gXYmPMZV4ZrXLWuPY+zzlPhd4+w/pPwLKxNh0AV/LZw
7SunnoffGM59aZ6074lwrQ0jBpPgpzLncnfGrtVdh+9KOb8bX4dwbbVm7LBi
h30pfAL7j9Ta4doeD86FXxdeS5osbc5x3t7w00EvxQ+7P+vU8f4unnPC2qI1
b9Z589bOQuwuuk/wIXyB9Ei1DxaqNrD/g7di/mWZY9YPu1NYe9QsmoRrWLWs
mimE92H+2sw5uRn7Qn1Tas2X9tfW57JqdAB2j/DdSLNOwluHtVgaWKNcYf48
fPPBTOxt2I3gHyjnwmPyKUffDI/Jpxp5XWuDOdI73tsO3wea1OewcrlUGpSz
hknLdAe6C/Wc9thDw7WtnLoX/lD4Lnox76JwDiuXpRHSij1hrdMe1eEYKVbK
2eXwjsSnb+Ke1wl+hu4kc0/9OqxR0ipp0opwz1Pv05zd4TPoLLqjpvAJ4bsq
wZ4Ir6uvBcWoq3Itc+6qR6hX9AzninpeAfv/mbn21RMr8S0Ia+kIxufDD2TW
EsWoDfbd4b3OAvfA7wTFqXueet8loEPqHqxefIVyJnXPUu96NJxremdcWOOk
dZozXrmoGk2tgQvhWzLXgtYcEtZIaWWpdD/c09Xb1WPK4TtBvr4nqDc0z7sX
LlaNKJfxL0ldM9fDO4NFqXPkbcVeGp9Zkzdn/kfQv4J6zsbwnevupUlNmXsL
9tLUPVy9XBopraxQTUgbM2uB5ryPPUvnT10TfcM1qlqdiz0de0fmdzVHc88O
+9QzXw3HXLHXNzZk//OwyzL/A+lfKJ/3v4X+kQrzrnHVuuacCP9T6N9CPUW9
5Vg4ltJgabF6tnq3YrgrrMnSZmlEo3BOKDfU49TrFFPFdjR2N/2b5c0VY8X6
cmlC5jvV3TYM/1torEXePXBoYo2R1pwf/leUhknLrgxrsXqueq96nnqfNGGG
aiHcG6Q50p7/AaLMbn8=
           "]]}]}}, {{}, 
       TagBox[
        TooltipBox[
         {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["
1:eJwV0slLlGEAwOHXsshsoZmDQVpOFi2aGuVC3lqP1VRWaG4XgyJBaM8F7BAu
B+/dtCTLrA5t/0L9AS602yEpqSDbTHrew8Pv3Xjnm28m1dSSPpcRQhhmMjOE
9zxfFMIzlrOVosUhbNGr7KfU/IBe4TIPGOU++0jaX6qvyOI1s/zgKDvtH9PD
HGGHeVpbWMsm83X62bPk60tekMdfawX253SJeTOnOUkPtZwiwUbnkvrJ2Ru6
m23W9mhTfD7rrXqGs1QzxAlucZzbTDvXoZ3U0B+/k7V2Pc+F+MzcYZhCn3FX
R7jHWHyv+oF3fGSK1c7lcMj4mzPd+lXn2WD9n663ljL+bjxjnBvfC2v4Eu+x
nmG/zDhouS7QzXqQvRSbl5BgFRXWFmqlZmqpzrOdxzzhKePu7tLr1FNHL7u4
xEV+8osBKtyVrW9Yxm/+8JBHTLgvK/43aDRvoI8q2rgWf1/mGKTSuRX6lpXc
jO+W/yobVQ0=
           "]], LineBox[CompressedData["
1:eJwV0klLV1EYB+Bj6d+gQQPNbLZBKtLIIRAadNe8aOkyLSjIEvsCBRZtKrQc
aVy1r1YOzaVBWWnaBCnSTFmZWUHkcxYPv/e97znnXu69ObsO7KxKCiF08Dc5
hM0pIaxJhLBJHuYIRfynkKlmG2QlFZzkFMc4ymrWs45LDDlzrT0X1fW00sIF
Bs2Kzc6r62imiXO8MZtnlq/+qX4sp+uncU/9mdnk6h/E3ppGmcoZEjQwh7MM
m8+3tkCdzX266OY733hGP308Z4AR+xbZl6O+TC9/XFvsWo/6q7pWfpGP5ENm
mWWSpb7BdTqZSRlzzQasv6a+yhXy+McqppiXyBSZSoJ+618zzlOz3/Kj/MT7
eE8+sJ8q0mmjnQ4y2cNuTlDOPvbG/c4aifvlXXmHDN4xmYMsYbnnWCpHrcuN
71bfp65Wb6VAv01uYQfb439jHuSYfCJ/ydPyJm/Vx+N95G15i4XOWEAGL/Ul
Mkm+YBJp+nRmsFFfwzJK43d1rddZh+K3jO9LJvMqvsv43PFf4gcrrV3BBK7Y
Zbw=
           "]]},
         FractionBox["1", "2"]],
        Annotation[#, 
         Rational[1, 2], "Tooltip"]& ], {}, {}}}], {}}, {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], DiskBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             CircleBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{1., 
       1.2}}, {{1.3, 0.9}}, {{0.9, 1.2}}, {{2.1, 2.2}}, {{2.3, 2.9}}, {{2.9, 
       2.2}}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], 
             PolygonBox[
              NCache[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                Offset[{2 3^Rational[1, 2], -2}]}, {
               Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                Offset[{3.4641016151377544`, -2}]}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             JoinedCurveBox[NCache[
              Line[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                 Offset[{2 3^Rational[1, 2], -2}], Offset[{0, 4}]}], 
               Line[{Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                 Offset[{3.4641016151377544`, -2}], Offset[{0, 4}]}]],
              CurveClosed->True]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{2.1, 
       1.2}}, {{2.3, 0.9}}, {{2.7, 1.2}}, {{1.1, 2.2}}, {{1.3, 2.9}}, {{0.9, 
       2.2}}}]}}, {{}, {}}}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "GridLinesInFront" -> 
    True},
  PlotRange->{{0, 3}, {0, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8229993920669403`*^9, 3.822999479609869*^9}},
 CellLabel->
  "Out[398]=",ExpressionUUID->"fa7346ad-d117-476e-b9c6-ed2364cffc43"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Handwriting recognition: Suppor Vector Machine with MNIST Digits dataset\
\>", "Section",
 CellChangeTimes->{{3.8229906835961246`*^9, 
  3.822990701966954*^9}},ExpressionUUID->"5b7456a3-1a2f-41f1-a5be-\
9904c63118e1"],

Cell["\<\
We now return to the example of handwriting recognition to see how well \
support vector machines perform with categorising the MNIST Digits dataset\
\>", "Text",
 CellChangeTimes->{{3.8229995585095243`*^9, 
  3.8229995901177692`*^9}},ExpressionUUID->"5ec8ac3d-447b-4953-ba0e-\
0deec8bb5628"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MNIST", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<MNIST\>\""}], "}"}], ",", 
     "\"\<TrainingData\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.82178433819939*^9, 3.821784359377384*^9}, {
   3.821998365668429*^9, 3.821998390644134*^9}, 3.821998668594962*^9, 
   3.822033647805273*^9, {3.822033779360832*^9, 3.822033791127304*^9}},
 CellLabel->
  "In[403]:=",ExpressionUUID->"d1d261aa-728b-454d-a9da-65ca88505bf4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MNISTtest", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<MNIST\>\""}], "}"}], ",", 
     "\"\<TestData\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.82178433819939*^9, 3.821784359377384*^9}, {
   3.821998365668429*^9, 3.821998390644134*^9}, 3.821998668594962*^9, 
   3.822033647805273*^9, {3.822033779360832*^9, 3.822033791127304*^9}, {
   3.822591074406793*^9, 3.822591081954607*^9}},
 CellLabel->
  "In[419]:=",ExpressionUUID->"2f096863-4844-4fb7-8fb2-292c99e75edd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MNISTbynumber", "=", 
   RowBox[{"GroupBy", "[", 
    RowBox[{"MNIST", ",", 
     RowBox[{"Last", "\[Rule]", "First"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822033207695846*^9, 3.822033301592517*^9}},
 CellLabel->
  "In[426]:=",ExpressionUUID->"9ba4ef03-b0b3-474c-9509-d5ee898dbc93"],

Cell["\<\
We will train our support vector machine with a random sample of 100 digits.\
\>", "Text",
 CellChangeTimes->{{3.8220330577685127`*^9, 3.82203317073836*^9}, {
  3.8229996472198153`*^9, 
  3.822999666670204*^9}},ExpressionUUID->"eaa048fa-eb2a-4e80-83d6-\
d4ea0b4f7340"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingset", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"MNIST", ",", "100"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822033018222289*^9, 3.822033048435541*^9}, {
  3.822999703449627*^9, 3.822999707590232*^9}},
 CellLabel->
  "In[404]:=",ExpressionUUID->"ac76cc91-1e77-4fc7-a877-1839f263084e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cf", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingset", ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<SupportVectorMachine\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.821769871376132*^9, 3.821769872129084*^9}, {
   3.8217699072654333`*^9, 3.821769913768124*^9}, 3.822999729652817*^9, {
   3.8229998027085743`*^9, 3.8229998299510517`*^9}},
 CellLabel->
  "In[416]:=",ExpressionUUID->"e8270b54-cd9c-495c-964f-9dfea30d505b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["10", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4", ",", 
                    "5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], 
                    Short[#, 1]& ]], Annotation[#, 
                    Short[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["10", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4", ",", 
                    "5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], 
                    Short[#, 1]& ]], Annotation[#, 
                    Short[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["100", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 2161992, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            9453879296005677182072596401315853329637325528273502291392, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 9453879296005677182072596401315853329637325528273502291392,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.821769879586334*^9, 3.821769920078702*^9, 3.8229997375899363`*^9, 
   3.8229997758529797`*^9, {3.822999810784101*^9, 3.822999838215095*^9}},
 CellLabel->
  "Out[416]=",ExpressionUUID->"688d8bca-0182-4cef-aa9f-71ff017251df"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "cf", "]"}]], "Input",
 CellChangeTimes->{{3.822999779477523*^9, 3.822999782107595*^9}, {
  3.82299983394486*^9, 3.822999834146515*^9}},
 CellLabel->
  "In[417]:=",ExpressionUUID->"89d666bc-740a-4a50-8bc0-3c46d014fce3"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Data type"], 
                  TextCell["Data type"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              InterpretationBox[Cell[
               "Image",ExpressionUUID->"9db2fab0-1a81-4db8-8443-00de8e672f68"],
               TextCell["Image"]]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Number of classes"], 
                  TextCell["Number of classes"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["10",
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", 
                    ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], 
                 Short[#, 1]& ]],
               Annotation[#, 
                Short[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Accuracy"], 
                  TextCell["Accuracy"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{
                RowBox[{"(", 
                  InterpretationBox[
                   
                   TemplateBox[{"67.", "15."}, "Around", SyntaxForm -> 
                    PlusMinus], 
                   Around[
                   67.142857142857124586`3., 15.3714403729228479278`3.]], 
                  ")"}], "\"%\"", "percent", "\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Method"], 
                  TextCell["Method"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                InterpretationBox[Cell[
                 "SupportVectorMachine",ExpressionUUID->
                  "72d74b54-6176-4267-a541-51c6050a39e2"],
                 TextCell["SupportVectorMachine"]],
                StyleBox[
                 TagBox[
                  
                  GridBox[{{"\"KernelType\"", "\"RadialBasisFunction\""}, {
                    "\"GammaScalingParameter\"", "0.0014807400067614737`"}, {
                    "\"SoftMarginParameter\"", "3"}, {
                    "\"PolynomialDegree\"", "3"}, {
                    "\"BiasParameter\"", "1"}, {
                    "\"MulticlassStrategy\"", "\"OneVersusOne\""}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                   False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                   FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                 "Verdana", StripOnInput -> False]],
               Annotation[#, 
                Style[
                 
                 Grid[{{"KernelType", "RadialBasisFunction"}, {
                   "GammaScalingParameter", 0.0014807400067614737`}, {
                   "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                   "BiasParameter", 1}, {
                   "MulticlassStrategy", "OneVersusOne"}}, Alignment -> Left, 
                  Frame -> All, FrameStyle -> GrayLevel[0.84], 
                  Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Single evaluation time"], 
                  TextCell["Single evaluation time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"30.3`", 
                
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}], "milliseconds per example", 
                FractionBox["\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Batch evaluation speed"], 
                  TextCell["Batch evaluation speed"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"714.`", 
                
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                FractionBox["\"Examples\"", "\"Seconds\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"1.31611556829547105`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1764288505231675075`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.9632578672491360905`3.",
                   "\", \"", "1.6689732693418060094`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.9632578672491360905`3., 
                  ", ", 1.6689732693418060094`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Model memory"], 
                  TextCell["Model memory"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"2.16`", "\"MB\"", "megabytes", "\"Megabytes\""},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Training examples used"], 
                  TextCell["Training examples used"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"100", "\"examples\"", "examples", "\"Examples\""},
               
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Training time"], 
                  TextCell["Training time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"6.67`", "\"s\"", "seconds", "\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file12Panel`PackagePrivate`pos$$ = 2}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8354112420345402}, {
                    4.382026634673881, 0.27468464690106487`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.70805020110221, 
                    0.8354112420345402}}, {{4.382026634673881, 
                    0.27468464690106487`}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, 0.7863494764074374}, {
                    2.70805020110221, 0.8821781040888342}, {2.70805020110221, 
                    0.8821781040888342}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, 0.13075341566783583`}, {
                    4.382026634673881, 0.40048232719428145`}, {
                    4.382026634673881, 
                    0.40048232719428145`}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.7604671865012023`, 
                    0.24353316939364955`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-1.7604671865012023`, 
                    Log[100]}, {0.24353316939364955`, 0.8354112420345402}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.280232558139535}, {
                    4.382026634673881, 0.6714285714285713}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.70805020110221, 
                    0.280232558139535}}, {{4.382026634673881, 
                    0.6714285714285713}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.7604671865012023`, 
                    0.24235006119951055`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{-1.7604671865012023`, 
                    Log[100]}, {0.24235006119951055`, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8354112420345402}, {
                    2.70805020110221, 0.8354112420345402}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002930469110215845}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.382026634673881, 0.8457273437478189}, {
                    4.382026634673881, 0.8457273437478189}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0016788474013926273`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.9129761707709797}, {
                    2.70805020110221, 0.9129761707709797}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.001296270428847621}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.9103179903872911}, {
                    2.70805020110221, 0.9103179903872911}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0010800704976038997`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.9115841874007139}, {
                    2.70805020110221, 0.9115841874007139}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0007934832332244677}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8857158991552327}, {
                    4.382026634673881, 0.27468464690106487`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0014807400067614737`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.9136877300869103}, {
                    2.70805020110221, 0.9136877300869103}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002806867420458683}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.382026634673881, 0.5284713447394849}, {
                    4.382026634673881, 0.5284713447394849}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.003382050696624726}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8354112420345402}}, {{
                    2.70805020110221, 0.8354112420345402}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002930469110215845}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.382026634673881, 0.8457273437478189}}, {{
                    4.382026634673881, 0.8457273437478189}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0016788474013926273`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.9129761707709797}}, {{
                    2.70805020110221, 0.9129761707709797}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.001296270428847621}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.9103179903872911}}, {{
                    2.70805020110221, 0.9103179903872911}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0010800704976038997`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.9115841874007139}}, {{
                    2.70805020110221, 0.9115841874007139}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0007934832332244677}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8857158991552327}}, {{
                    4.382026634673881, 0.27468464690106487`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0014807400067614737`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.9136877300869103}}, {{
                    2.70805020110221, 0.9136877300869103}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002806867420458683}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.382026634673881, 0.5284713447394849}}, {{
                    4.382026634673881, 0.5284713447394849}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.003382050696624726}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.7604671865012023`, 
                    0.23918447561296233`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-1.7604671865012023`, 
                    Log[100]}, {0.23918447561296233`, 0.9136877300869103}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8354112420345402}, {
                    4.382026634673881, 0.27468464690106487`}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.70805020110221, 
                    0.8354112420345402}}, {{4.382026634673881, 
                    0.27468464690106487`}}}]}}}, {{}, {}}}, {{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.70805020110221, 0.7863494764074374}, {
                    2.70805020110221, 0.8821781040888342}, {2.70805020110221, 
                    0.8821781040888342}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{4.382026634673881, 0.13075341566783583`}, {
                    4.382026634673881, 0.40048232719428145`}, {
                    4.382026634673881, 
                    0.40048232719428145`}}]}}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.7604671865012023`, 
                    0.24353316939364955`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-1.7604671865012023`, 
                    Log[100]}, {0.24353316939364955`, 0.8354112420345402}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.280232558139535}, {
                    4.382026634673881, 0.6714285714285713}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.70805020110221, 
                    0.280232558139535}}, {{4.382026634673881, 
                    0.6714285714285713}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.7604671865012023`, 
                    0.24235006119951055`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{-1.7604671865012023`, 
                    Log[100]}, {0.24235006119951055`, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8354112420345402}, {
                    2.70805020110221, 0.8354112420345402}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002930469110215845}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.382026634673881, 0.8457273437478189}, {
                    4.382026634673881, 0.8457273437478189}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0016788474013926273`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.9129761707709797}, {
                    2.70805020110221, 0.9129761707709797}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.001296270428847621}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.9103179903872911}, {
                    2.70805020110221, 0.9103179903872911}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0010800704976038997`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.9115841874007139}, {
                    2.70805020110221, 0.9115841874007139}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0007934832332244677}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.8857158991552327}, {
                    4.382026634673881, 0.27468464690106487`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0014807400067614737`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.70805020110221, 0.9136877300869103}, {
                    2.70805020110221, 0.9136877300869103}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002806867420458683}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{4.382026634673881, 0.5284713447394849}, {
                    4.382026634673881, 0.5284713447394849}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.003382050696624726}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8354112420345402}}, {{
                    2.70805020110221, 0.8354112420345402}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002930469110215845}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.382026634673881, 0.8457273437478189}}, {{
                    4.382026634673881, 0.8457273437478189}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0016788474013926273`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.9129761707709797}}, {{
                    2.70805020110221, 0.9129761707709797}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.001296270428847621}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.9103179903872911}}, {{
                    2.70805020110221, 0.9103179903872911}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0010800704976038997`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.9115841874007139}}, {{
                    2.70805020110221, 0.9115841874007139}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0007934832332244677}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.8857158991552327}}, {{
                    4.382026634673881, 0.27468464690106487`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0014807400067614737`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.70805020110221, 0.9136877300869103}}, {{
                    2.70805020110221, 0.9136877300869103}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.002806867420458683}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    4.382026634673881, 0.5284713447394849}}, {{
                    4.382026634673881, 0.5284713447394849}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.003382050696624726}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {-1.7604671865012023`, 
                    0.23918447561296233`}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{-1.7604671865012023`, 
                    Log[100]}, {0.23918447561296233`, 0.9136877300869103}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}]], 
                    Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{330., {122., 127.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> 
          ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{
  3.8229997830462227`*^9, {3.822999819151922*^9, 3.822999839037942*^9}},
 CellLabel->
  "Out[417]=",ExpressionUUID->"1929b965-fdd5-4971-a561-78215500072e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cf", "[", 
  RowBox[{"{", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQgU/0cCe9wZJ/1/PRlJZIcrF5Pmq6NCzAlwoVeGTExZz/8fYGLShgnN0WPi
aH/wHyTWDRVayMXE0QZiHGBinQUW+baKhYm3HczMZ5KDqMpgYjJ4AWZdkWGa
D9HIwsQ0DSJbyAQRm8PFxHT/D1joljhTxFcgfZCXia33L1jobj6TyUcQw5+J
qRSi8W82E9MSsOUCTOq3wUJ/JjExub8BMn4HMDGvBwv9BAo5fgCxOpmYLCE6
XZmY7H+AWexMTLtB9CINVt5ciNB/RiaX7//PpimzMgmlw/zOyCS0IEWciYnJ
ZN1/hBgYiMR8RIRkAjNQhE/8GHJ4/58iodB9AUXkPwDBoBwJ
       "], {{0, 20}, {20, 
       0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{20, 20},
     PlotRange->{{0, 20}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 196, 106, 255}, {255, 144, 74, 255}, {252, 64, 74, 
       255}, {236, 2, 74, 255}, {204, 2, 74, 255}, {145, 1, 73, 255}, {237, 
       28, 74, 255}, {158, 2, 87, 255}, {146, 2, 164, 255}, {146, 2, 164, 
       255}, {145, 1, 163, 255}, {146, 2, 164, 255}, {146, 2, 164, 255}, {146,
        2, 126, 255}, {146, 2, 48, 248}, {145, 1, 0, 205}, {146, 2, 1, 237}, {
       191, 2, 64, 252}, {244, 40, 74, 255}, {255, 164, 74, 255}}, {{0, 20}, {
       4, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{4, 20},
     PlotRange->{{0, 4}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQgU/4eAAxMzmZgYmJiYJn74DwP5TMzMzGCcgBAT0tCortJQYmbygYsdPAim
biGLQYEXptgrM0yxhUA7ElGFDggxMzt8QBULAboPVeRUChMz3zwUoWRxZia+
mShCeSCzNiGLvHcA+tUBWeR+jyIzk9NmZBtf6QD9rvYQWdU0Q6BQOLLIBTGg
o5jUoLwNkw4srJs8iRkEONRU1dSAmJdZkIMZKgYNTxBW1lh8YbIOXGwyCABt
BwDO0xJ3
       "], {{0, 20}, {20, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{20, 20},
     PlotRange->{{0, 20}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQgQgyT/A8HXrqqqyjxGiaqqByDuVTEmJiZGJhBQewXkbwMyVFXV1NR4mJhu
A/nPVq9e/RukMJGJ6ch/BNhvwcS0E8a5sW2JKBOT8zcw556NoTjIuLT7EEkz
iPkp36CKVSF8T5jm3urq+i9xTCzHkEz/f4uBsfn//9/PfkD5b7SYNF7872da
CuWfZGKa+v9/EpMdhPvLn4n3HIgvfAXM7wdL/9/HxJQO4q6XZlJ/BzKViYl/
/f9bBYxMfBtA4j8rmJj4VMWYGLkroeaUg0OCbRvMHX/WMdmYVe+C8gC6b9R+

       "], {{0, 20}, {16, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{16, 20},
     PlotRange->{{0, 16}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 110, 92, 255, 255, 255, 255, 230, 255, 255}, {255, 75, 
       57, 255, 255, 255, 235, 42, 211, 255}, {236, 17, 130, 255, 255, 255, 
       232, 23, 170, 255}, {141, 1, 151, 255, 255, 255, 255, 56, 170, 255}, {
       141, 1, 204, 255, 255, 255, 255, 56, 170, 255}, {141, 39, 250, 255, 
       255, 255, 255, 56, 170, 255}, {141, 86, 255, 255, 255, 255, 255, 56, 
       170, 255}, {40, 86, 255, 255, 255, 255, 255, 56, 98, 250}, {23, 13, 37,
        37, 37, 97, 118, 9, 111, 252}, {159, 95, 95, 95, 95, 70, 0, 1, 170, 
       255}, {255, 255, 255, 255, 255, 255, 255, 56, 170, 255}, {255, 255, 
       255, 255, 255, 255, 255, 56, 170, 255}, {255, 255, 255, 255, 255, 255, 
       255, 56, 97, 255}, {255, 255, 255, 255, 255, 255, 255, 56, 76, 255}, {
       255, 255, 255, 255, 255, 255, 247, 46, 76, 255}, {255, 255, 255, 255, 
       255, 255, 233, 25, 76, 255}, {255, 255, 255, 255, 255, 255, 255, 123, 
       51, 248}, {255, 255, 255, 255, 255, 255, 255, 150, 1, 236}, {255, 255, 
       255, 255, 255, 255, 255, 196, 1, 111}, {255, 255, 255, 255, 255, 255, 
       255, 249, 32, 83}}, {{0, 20}, {10, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{10, 20},
     PlotRange->{{0, 10}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
GUhCBIj/o4J/T9cVT0QRebs2mZGRwQMhsCtOT4SRMWHXxV9woS18HKIh827/
QdJ2WigGmQsWElF/iyZ0ToTRIboaReFPVUZGWXWmKchiv3199339L6/wDVnw
L9D+GxwOf9GM/L+KeR6UdRUm9MWW8wmUaaYHYv38/yWKMQEmncEoVNASqmGp
xp7/Am5lGjsjCMTvRnHIeiC48Q9JBABCvQ8W
       "], {{0, 16}, {20, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{20, 16},
     PlotRange->{{0, 20}, {0, 16}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 255, 255, 255, 255, 255, 232, 173, 54, 80, 255, 255, 
       255, 255}, {255, 255, 255, 255, 255, 251, 108, 1, 19, 198, 255, 255, 
       255, 255}, {255, 255, 255, 255, 255, 148, 2, 20, 198, 255, 255, 255, 
       255, 255}, {255, 255, 255, 255, 197, 18, 18, 202, 255, 255, 255, 255, 
       255, 255}, {255, 255, 255, 247, 50, 2, 175, 255, 255, 255, 255, 255, 
       255, 255}, {255, 255, 255, 40, 1, 101, 255, 255, 255, 255, 255, 255, 
       255, 255}, {255, 255, 115, 8, 2, 184, 255, 255, 255, 255, 255, 255, 
       255, 255}, {255, 255, 1, 2, 125, 249, 255, 255, 255, 255, 255, 255, 
       255, 255}, {248, 103, 1, 13, 219, 255, 255, 255, 255, 255, 255, 255, 
       255, 255}, {215, 2, 1, 134, 255, 255, 255, 255, 255, 255, 255, 255, 
       255, 255}, {193, 1, 14, 225, 255, 255, 255, 255, 255, 255, 185, 61, 
       158, 246}, {73, 2, 68, 255, 255, 255, 255, 255, 253, 137, 5, 2, 1, 
       141}, {21, 2, 157, 255, 255, 255, 255, 206, 88, 2, 2, 2, 72, 243}, {21,
        2, 195, 255, 255, 233, 140, 9, 2, 2, 2, 2, 172, 255}, {59, 2, 37, 142,
        195, 74, 2, 1, 2, 2, 55, 175, 255, 255}, {224, 37, 0, 1, 1, 1, 1, 0, 
       59, 187, 255, 255, 255, 255}, {255, 240, 92, 2, 2, 13, 134, 216, 249, 
       255, 255, 255, 255, 255}, {255, 255, 99, 2, 27, 212, 255, 255, 255, 
       255, 255, 255, 255, 255}, {255, 255, 1, 28, 212, 255, 255, 255, 255, 
       255, 255, 255, 255, 255}, {255, 255, 1, 194, 255, 255, 255, 255, 255, 
       255, 255, 255, 255, 255}}, {{0, 20}, {14, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{14, 20},
     PlotRange->{{0, 14}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQgQCwPx//+PHv//f+zYylUrVxWVrFx17D8QWFmHhcvJM7FAYDhQjRUDEwgy
QqFs+P9VLDB5a+sSiKpj4WHHQdp7gXgVUFXYfxRgBVR1HFkApIbRGkON9WOE
ilUQ+xAm9cJslYNaBjEFDsNgpiAg3E4M246Fo9gGMw3N3asgvkMGlmiugqpC
UwfxXy+y0OM1TCyrYTYCANRP8Vg=
       "], {{0, 20}, {19, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{19, 20},
     PlotRange->{{0, 19}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 255, 255, 252, 207, 207, 207, 226, 255, 255, 255, 189, 
       10, 68}, {255, 245, 130, 53, 1, 1, 1, 22, 174, 255, 255, 73, 1, 68}, {
       243, 68, 0, 1, 24, 125, 120, 23, 19, 220, 209, 3, 1, 83}, {95, 1, 1, 
       123, 231, 255, 255, 228, 188, 238, 43, 1, 1, 172}, {67, 1, 121, 252, 
       255, 255, 255, 255, 250, 114, 2, 1, 84, 248}, {67, 1, 177, 255, 255, 
       255, 255, 255, 183, 1, 1, 85, 247, 255}, {13, 1, 171, 255, 255, 255, 
       255, 208, 58, 1, 22, 216, 255, 255}, {67, 1, 56, 221, 255, 255, 242, 
       75, 1, 1, 204, 255, 255, 255}, {190, 54, 1, 26, 170, 247, 73, 1, 1, 
       121, 252, 255, 255, 255}, {255, 193, 38, 1, 1, 1, 1, 1, 64, 255, 255, 
       255, 255, 255}, {255, 255, 240, 148, 1, 1, 1, 1, 189, 255, 255, 255, 
       255, 255}, {255, 255, 255, 222, 1, 1, 1, 1, 20, 145, 252, 255, 255, 
       255}, {255, 255, 229, 46, 1, 2, 153, 76, 1, 1, 203, 255, 255, 255}, {
       255, 238, 117, 1, 1, 159, 255, 249, 17, 1, 38, 255, 255, 255}, {255, 
       93, 1, 1, 78, 243, 255, 255, 109, 1, 32, 255, 255, 255}, {171, 2, 1, 
       23, 246, 255, 255, 255, 109, 1, 32, 255, 255, 255}, {67, 1, 20, 198, 
       255, 255, 241, 146, 36, 1, 129, 255, 255, 255}, {67, 1, 41, 140, 140, 
       137, 29, 1, 1, 45, 246, 255, 255, 255}, {91, 1, 1, 1, 1, 1, 1, 23, 118,
        232, 255, 255, 255, 255}, {239, 60, 1, 1, 1, 3, 126, 226, 255, 255, 
       255, 255, 255, 255}}, {{0, 20}, {14, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{14, 20},
     PlotRange->{{0, 14}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 255, 255, 255, 210, 82, 0, 1, 0, 11, 190, 255, 255}, {
       255, 255, 255, 173, 3, 16, 123, 165, 114, 1, 58, 255, 255}, {255, 255, 
       191, 13, 16, 166, 255, 255, 166, 1, 82, 255, 255}, {255, 215, 14, 1, 
       187, 255, 255, 244, 69, 1, 114, 255, 255}, {255, 117, 1, 16, 233, 255, 
       255, 252, 45, 1, 17, 104, 194}, {238, 14, 1, 186, 255, 255, 255, 255, 
       176, 1, 1, 1, 26}, {185, 1, 35, 244, 255, 255, 255, 227, 84, 1, 1, 1, 
       97}, {185, 1, 109, 255, 255, 255, 123, 16, 1, 53, 31, 1, 123}, {185, 1,
        62, 207, 207, 87, 6, 9, 102, 248, 57, 1, 191}, {221, 10, 1, 1, 1, 1, 
       82, 208, 255, 249, 47, 5, 201}, {255, 141, 5, 1, 23, 115, 235, 255, 
       255, 211, 1, 23, 255}, {255, 255, 191, 170, 233, 255, 255, 255, 255, 
       68, 1, 105, 255}, {255, 255, 255, 255, 255, 255, 255, 255, 250, 46, 1, 
       195, 255}, {255, 255, 255, 255, 255, 255, 255, 255, 220, 1, 13, 221, 
       255}, {255, 255, 255, 255, 255, 255, 255, 255, 176, 1, 27, 255, 255}, {
       255, 255, 255, 255, 255, 255, 255, 255, 48, 1, 68, 255, 255}, {255, 
       255, 255, 255, 255, 255, 255, 255, 48, 1, 199, 255, 255}, {255, 255, 
       255, 255, 255, 255, 255, 224, 15, 1, 199, 255, 255}, {255, 255, 255, 
       255, 255, 255, 255, 129, 1, 24, 238, 255, 255}, {255, 255, 255, 255, 
       255, 255, 255, 188, 1, 146, 255, 255, 255}}, {{0, 20}, {13, 0}}, {0, 
       255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{13, 20},
     PlotRange->{{0, 13}, {0, 20}}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.821769882402701*^9, 3.8217698973429937`*^9}, {
  3.822999848887529*^9, 3.822999849124687*^9}},
 CellLabel->
  "In[418]:=",ExpressionUUID->"b6556ac8-ecb3-4151-825a-486cd1f15cab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "3", ",", "3", ",", "9", ",", "1", ",", "0", ",", "7", 
   ",", "8", ",", "9"}], "}"}]], "Output",
 CellChangeTimes->{3.821769889863442*^9, 3.8217699229438753`*^9, 
  3.822999741631455*^9, 3.822999793217102*^9, 3.822999849742676*^9},
 CellLabel->
  "Out[418]=",ExpressionUUID->"0c5b04f9-1104-4e3d-82a9-787a1ad16741"]
}, Open  ]],

Cell["\<\
Let\[CloseCurlyQuote]s see how well it performs by testing it on a random \
sample of the test data\
\>", "Text",
 CellChangeTimes->{{3.822591053083922*^9, 
  3.8225910697086077`*^9}},ExpressionUUID->"c1843b7e-da22-4305-b0d9-\
50f9042468f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"cf", "[", 
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Equal]", 
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"MNISTtest", ",", "1000"}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.822569063929542*^9, 3.822569126106969*^9}, {
  3.8225693264264917`*^9, 3.822569328987101*^9}, {3.822591096975554*^9, 
  3.822591097678933*^9}, {3.822999894945031*^9, 3.8229998951113033`*^9}},
 CellLabel->
  "In[420]:=",ExpressionUUID->"e527a159-0ae9-46e8-a0ed-195df370dc9a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"False", ",", "851"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", "149"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8229999462950497`*^9},
 CellLabel->
  "Out[420]=",ExpressionUUID->"879e3960-26a3-4b61-bbcd-ccd12e289b2d"]
}, Open  ]],

Cell["\<\
It\[CloseCurlyQuote]s right about 15% of the time - only slightly better than \
random luck. We could improve this by going back to the training step and \
using more training samples:\
\>", "Text",
 CellChangeTimes->{{3.82259110804383*^9, 3.822591138974526*^9}, {
  3.822999966931994*^9, 
  3.822999999837356*^9}},ExpressionUUID->"413ee70e-ba3b-4b17-afd8-\
cc7cd2cdabec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingset", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"MNIST", ",", "1000"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8225688110580597`*^9, 3.822568832135991*^9}, 
   3.822569158739112*^9, {3.822569226653932*^9, 3.822569247223864*^9}, 
   3.822569379989315*^9, 3.82259115498377*^9},
 CellLabel->
  "In[422]:=",ExpressionUUID->"686074fc-3dfc-4292-a711-2bb991918a9c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bettercf", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingset", ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<SupportVectorMachine\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{
  3.8225687770697327`*^9, {3.822590922274912*^9, 3.822590924676269*^9}, {
   3.82259116172611*^9, 3.822591162656242*^9}, {3.822999944992779*^9, 
   3.822999953949429*^9}},
 CellLabel->"In[423]:=",
 CellID->1905138556,ExpressionUUID->"a5816e01-1698-4dba-b99d-bb9944b45536"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["10", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4", ",", 
                    "5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], 
                    Short[#, 1]& ]], Annotation[#, 
                    Short[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                   "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["10", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4", ",", 
                    "5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], 
                    Short[#, 1]& ]], Annotation[#, 
                    Short[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 24027736, 
              Dynamic[Typeset`embedState$$], Automatic]], StandardForm]], 
          ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            9453879296005677182072596401315853329655772272347211394480, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm, 
            ElisionsDump`embedSummaryBoxes], DefaultBaseStyle -> 
          "SummaryEmbedButton", ImageSize -> Inherited, 
          BaseStyle -> {"DialogStyle"}, Enabled -> Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 9453879296005677182072596401315853329655772272347211394480,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8230000346752033`*^9},
 CellLabel->
  "Out[423]=",ExpressionUUID->"5d3d939c-6bc1-4bd6-b847-b40b40a0be88"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "bettercf", "]"}]], "Input",
 CellChangeTimes->{{3.823000036976144*^9, 3.823000040471594*^9}},
 CellLabel->
  "In[424]:=",ExpressionUUID->"e549e4b2-f75f-42d6-af30-3a77c970fcb5"],

Cell[BoxData[
 TagBox[
  StyleBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        FrameBox[
         StyleBox["\<\"Classifier information\"\>", "SuggestionsBarText",
          StripOnInput->False,
          FontSize->12],
         FrameMargins->{{10, 5}, {-4, 2}},
         FrameStyle->None,
         StripOnInput->False],
        Alignment->{Left, Bottom},
        Background->RGBColor[0.96, 0.96, 0.96],
        Frame->{{False, False}, {True, False}},
        FrameStyle->Opacity[0.1],
        ItemSize->{Automatic, 1},
        StripOnInput->False]},
      {
       ItemBox[
        TagBox[
         FrameBox[
          TagBox[GridBox[{
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Data type"], 
                  TextCell["Data type"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              
              InterpretationBox[Cell[
               "Image",ExpressionUUID->"51987420-b855-48b8-a3a3-1722de77c270"],
               TextCell["Image"]]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Number of classes"], 
                  TextCell["Number of classes"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox["10",
                TagBox[
                 RowBox[{"{", 
                   
                   RowBox[{
                    "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", 
                    ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], 
                 Short[#, 1]& ]],
               Annotation[#, 
                Short[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 1], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Accuracy"], 
                  TextCell["Accuracy"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{
                RowBox[{"(", 
                  InterpretationBox[
                   
                   TemplateBox[{"89.5", "3.2"}, "Around", SyntaxForm -> 
                    PlusMinus], 
                   Around[
                   89.5006488524857104494`3., 3.1708086911205497493`3.]], 
                  ")"}], "\"%\"", "percent", "\"Percent\""},
               "QuantityPostfix"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Method"], 
                  TextCell["Method"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                
                InterpretationBox[Cell[
                 "SupportVectorMachine",ExpressionUUID->
                  "6c8ee584-7b38-4f07-8362-dad6dabb4e3a"],
                 TextCell["SupportVectorMachine"]],
                StyleBox[
                 TagBox[
                  
                  GridBox[{{"\"KernelType\"", "\"RadialBasisFunction\""}, {
                    "\"GammaScalingParameter\"", "0.0006303982962006238`"}, {
                    "\"SoftMarginParameter\"", "3"}, {
                    "\"PolynomialDegree\"", "3"}, {
                    "\"BiasParameter\"", "1"}, {
                    "\"MulticlassStrategy\"", "\"OneVersusOne\""}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                   False, GridBoxBackground -> {"Columns" -> {{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, "Rows" -> {{None}}}, 
                   GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{1}}}, 
                   FrameStyle -> GrayLevel[0.84]], "Grid"], FontFamily -> 
                 "Verdana", StripOnInput -> False]],
               Annotation[#, 
                Style[
                 
                 Grid[{{"KernelType", "RadialBasisFunction"}, {
                   "GammaScalingParameter", 0.0006303982962006238}, {
                   "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                   "BiasParameter", 1}, {
                   "MulticlassStrategy", "OneVersusOne"}}, Alignment -> Left, 
                  Frame -> All, FrameStyle -> GrayLevel[0.84], 
                  Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"], 
                "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Single evaluation time"], 
                  TextCell["Single evaluation time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"42.6`", 
                
                RowBox[{
                 "\"ms\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
                  "\"example\""}], "milliseconds per example", 
                FractionBox["\"Milliseconds\"", "\"Examples\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Batch evaluation speed"], 
                  TextCell["Batch evaluation speed"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"480.`", 
                
                RowBox[{
                 "\"examples\"", "\[InvisibleSpace]", "\"/\"", 
                  "\[InvisibleSpace]", "\"s\""}], "examples per second", 
                FractionBox["\"Examples\"", "\"Seconds\""]},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["Loss"], 
                    TextCell["Loss"]], "\"Mean cross entropy\"", LabelStyle -> 
                   "TextStyling"], 
                  Annotation[#, "Mean cross entropy", "Tooltip"]& ], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TagBox[
               TooltipBox[
                TemplateBox[{"0.4105982960835329876`3.", 
                  StyleBox[
                   
                   TemplateBox[{
                    "\" \[PlusMinus] \"", "0.1035169341580413904`2."}, 
                    "RowDefault"], {10, 
                    Opacity[0.5]}, StripOnInput -> False]},
                 "RowDefault"],
                
                TemplateBox[{
                 "\"95% confidence interval: [\"", "0.2035644277674502067`3.",
                   "\", \"", "0.6176321643996157684`3.", "\"]\""}, 
                 "RowDefault"],
                TooltipStyle->{}],
               Annotation[#, 
                
                Row[{"95% confidence interval: [", 0.2035644277674502067`3., 
                  ", ", 0.6176321643996157684`3., "]"}], "Tooltip"]& ]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Model memory"], 
                  TextCell["Model memory"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"24.`", "\"MB\"", "megabytes", "\"Megabytes\""},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Training examples used"], 
                  TextCell["Training examples used"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"1000", "\"examples\"", "examples", "\"Examples\""},
               "Quantity"]},
             {
              TemplateBox[{
                TemplateBox[{5}, "Spacer1"], 
                StyleBox[
                 InterpretationBox[
                  Cell["Training time"], 
                  TextCell["Training time"]], 
                 GrayLevel[0.4], StripOnInput -> False]},
               "RowDefault"], 
              TemplateBox[{"29.7`", "\"s\"", "seconds", "\"Seconds\""},
               "Quantity"]},
             {
              ItemBox[
               
               DynamicModuleBox[{
                MachineLearning`file12Panel`PackagePrivate`pos$$ = 1}, 
                DynamicBox[ToBoxes[
                  Show[
                   Part[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8551573641877128}, {
                    3.6888794541139363`, 0.5284293039391211}, {
                    5.298317366548036, -0.27319982381925045`}, {
                    6.684611727667927, -0.8901399242268278}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.8551573641877128}}, {{3.6888794541139363`, 
                    0.5284293039391211}}, {{
                    5.298317366548036, -0.27319982381925045`}}, {{
                    6.684611727667927, -0.8901399242268278}}}]}}}, {{}, {}}}, \
{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.84526174766373}, {
                    2.302585092994046, 0.8649560162251818}, {
                    2.302585092994046, 0.8649560162251818}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.6888794541139363`, 0.5059604068392728}, {
                    3.6888794541139363`, 0.5504044240106828}, {
                    3.6888794541139363`, 0.5504044240106828}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.298317366548036, -0.34940229693247066`}, {
                    5.298317366548036, -0.20239525995188098`}, {
                    5.298317366548036, -0.20239525995188098`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{6.684611727667927, -1.18064254394861}, {
                    6.684611727667927, -0.6653078553029376}, {
                    6.684611727667927, -0.6653078553029376}}]}}}, {{}, {}}}}, \
{DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.5421179064928434, -0.9871008846943023}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{0.5421179064928434, 
                    Log[1000]}, {-0.9871008846943023, 0.8551573641877128}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.17610698923209483`}, {
                    3.6888794541139363`, 0.5145365607331518}, {
                    5.298317366548036, 0.7741792523880002}, {
                    6.684611727667927, 0.8950064885248571}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.17610698923209483`}}, {{3.6888794541139363`, 
                    0.5145365607331518}}, {{5.298317366548036, 
                    0.7741792523880002}}, {{6.684611727667927, 
                    0.8950064885248571}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.5421179064928434, 0.13274419919167876`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{0.5421179064928434, 
                    Log[1000]}, {0.13274419919167876`, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.866878151997941}, {
                    3.6888794541139363`, 0.6836756930568122}, {
                    5.298317366548036, -0.079812192165549}, {
                    6.684611727667927, -0.8901399242268278}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006303982962006238}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.7143942506911769}, {
                    5.298317366548036, 0.0065844751805165126`}, {
                    6.684611727667927, -0.8792394126451941}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.001791485465053763}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.298317366548036, 0.8051460163841503}, {
                    5.298317366548036, 0.8051460163841503}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006171601249220227}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{6.684611727667927, 0.7943579649167758}, {
                    6.684611727667927, 0.7943579649167758}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00008022164414034946}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8683889701599127}, {
                    5.298317366548036, 0.8359124676953823}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0017336901595955516`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8692162587500608}, {
                    5.298317366548036, 0.6170627677664032}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0005480181531154812}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8681748101864795}, {
                    3.6888794541139363`, 0.8496471278065254}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002542551550864308}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.79958271104433}, {
                    5.298317366548036, 0.3905685704316138}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002898852740062293}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8691272900897916}, {
                    5.298317366548036, 0.6861700474625961}, {
                    6.684611727667927, 0.0003324458713525462}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011918163023145606`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8551573641877128}, {
                    3.6888794541139363`, 0.5284293039391211}, {
                    5.298317366548036, -0.27319982381925045`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011746584031946616`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.866878151997941}}, {{
                    3.6888794541139363`, 0.6836756930568122}}, {{
                    5.298317366548036, -0.079812192165549}}, {{
                    6.684611727667927, -0.8901399242268278}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006303982962006238}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.6888794541139363`, 0.7143942506911769}}, {{
                    5.298317366548036, 0.0065844751805165126`}}, {{
                    6.684611727667927, -0.8792394126451941}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.001791485465053763}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.298317366548036, 0.8051460163841503}}, {{
                    5.298317366548036, 0.8051460163841503}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006171601249220227}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    6.684611727667927, 0.7943579649167758}}, {{
                    6.684611727667927, 0.7943579649167758}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00008022164414034946}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8683889701599127}}, {{
                    5.298317366548036, 0.8359124676953823}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0017336901595955516`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8692162587500608}}, {{
                    5.298317366548036, 0.6170627677664032}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0005480181531154812}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8681748101864795}}, {{
                    3.6888794541139363`, 0.8496471278065254}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002542551550864308}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.6888794541139363`, 0.79958271104433}}, {{
                    5.298317366548036, 0.3905685704316138}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002898852740062293}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8691272900897916}}, {{
                    5.298317366548036, 0.6861700474625961}}, {{
                    6.684611727667927, 0.0003324458713525462}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011918163023145606`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8551573641877128}}, {{
                    3.6888794541139363`, 0.5284293039391211}}, {{
                    5.298317366548036, -0.27319982381925045`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011746584031946616`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.5421179064928434, -0.9878819343922105}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {
                    "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> 
                    True, "CoordinatesToolOptions" -> {
                    "DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{0.5421179064928434, 
                    Log[1000]}, {-0.9878819343922105, 0.8692162587500608}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                   PlotLabel -> Grid[{{
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {-1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Max[MachineLearning`file12Panel`PackagePrivate`pos$$ - 1, 
                    1], Appearance -> "Frameless"], 
                    Part[{
                    Tooltip[
                    "Learning curve", 
                    "mean cross entropy for best algorithm at each training \
size"], "Accuracy", 
                    Tooltip[
                    "Learning curves for all algorithms", 
                    "mean cross entropy at each training size"]}, 
                    MachineLearning`file12Panel`PackagePrivate`pos$$], 
                    Button[
                    Deploy[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.25], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]], 
                    Graphics[{
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098], 
                    Line[{{0, 0.8}, {1, 0}, {0, -0.8}}]}, 
                    ImageSize -> {Automatic, 10}, 
                    ImagePadding -> {{1, 1}, {1, 1}}, BaselinePosition -> 
                    Scaled[0.1]]], "LinkHand"]], 
                    MachineLearning`file12Panel`PackagePrivate`pos$$ = 
                    Min[MachineLearning`file12Panel`PackagePrivate`pos$$ + 1, 
                    
                    Length[{
                    Graphics[{{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    Line[{{2.302585092994046, 0.8551573641877128}, {
                    3.6888794541139363`, 0.5284293039391211}, {
                    5.298317366548036, -0.27319982381925045`}, {
                    6.684611727667927, -0.8901399242268278}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.8551573641877128}}, {{3.6888794541139363`, 
                    0.5284293039391211}}, {{
                    5.298317366548036, -0.27319982381925045`}}, {{
                    6.684611727667927, -0.8901399242268278}}}]}}}, {{}, {}}}, \
{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{2.302585092994046, 0.84526174766373}, {
                    2.302585092994046, 0.8649560162251818}, {
                    2.302585092994046, 0.8649560162251818}}]}, {
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{3.6888794541139363`, 0.5059604068392728}, {
                    3.6888794541139363`, 0.5504044240106828}, {
                    3.6888794541139363`, 0.5504044240106828}}]}, {
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{5.298317366548036, -0.34940229693247066`}, {
                    5.298317366548036, -0.20239525995188098`}, {
                    5.298317366548036, -0.20239525995188098`}}]}, {
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    
                    Line[{{6.684611727667927, -1.18064254394861}, {
                    6.684611727667927, -0.6653078553029376}, {
                    6.684611727667927, -0.6653078553029376}}]}}}, {{}, {}}}}, \
{DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
                    GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.5421179064928434, -0.9871008846943023}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{0.5421179064928434, 
                    Log[1000]}, {-0.9871008846943023, 0.8551573641877128}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}], 
                    Graphics[{{}, {{{}, {}, {
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.17610698923209483`}, {
                    3.6888794541139363`, 0.5145365607331518}, {
                    5.298317366548036, 0.7741792523880002}, {
                    6.684611727667927, 0.8950064885248571}}]}}, {{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style[
                    Graphics[{
                    EdgeForm[], 
                    Disk[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}], {0., 0.}, Automatic, 
                    Offset[6.272]], {{{2.302585092994046, 
                    0.17610698923209483`}}, {{3.6888794541139363`, 
                    0.5145365607331518}}, {{5.298317366548036, 
                    0.7741792523880002}}, {{6.684611727667927, 
                    0.8950064885248571}}}]}}}, {{}, {}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.5421179064928434, 0.13274419919167876`}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, 
                    FrameTicks -> {{Automatic, None}, {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Identity, Identity}][#, #2, {6,
                     6}]& }, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Identity[
                    Part[#, 2]]}& )}}, PlotRange -> {{0.5421179064928434, 
                    Log[1000]}, {0.13274419919167876`, 1}}, PlotRangeClipping -> 
                    True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.05], 0}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , 
                    Automatic}}], 
                    Graphics[{{{}, {{{}, {}, 
                    Tooltip[{
                    Hue[0.67, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    Line[{{2.302585092994046, 0.866878151997941}, {
                    3.6888794541139363`, 0.6836756930568122}, {
                    5.298317366548036, -0.079812192165549}, {
                    6.684611727667927, -0.8901399242268278}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006303982962006238}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.9060679774997897, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.7143942506911769}, {
                    5.298317366548036, 0.0065844751805165126`}, {
                    6.684611727667927, -0.8792394126451941}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.001791485465053763}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.1421359549995791, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{5.298317366548036, 0.8051460163841503}, {
                    5.298317366548036, 0.8051460163841503}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006171601249220227}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.37820393249936934`, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{6.684611727667927, 0.7943579649167758}, {
                    6.684611727667927, 0.7943579649167758}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00008022164414034946}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.6142719099991583, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8683889701599127}, {
                    5.298317366548036, 0.8359124676953823}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0017336901595955516`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.8503398874989481, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8692162587500608}, {
                    5.298317366548036, 0.6170627677664032}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0005480181531154812}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.08640786499873876, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8681748101864795}, {
                    3.6888794541139363`, 0.8496471278065254}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002542551550864308}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.3224758424985268, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{3.6888794541139363`, 0.79958271104433}, {
                    5.298317366548036, 0.3905685704316138}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002898852740062293}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.5585438199983166, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    
                    Line[{{2.302585092994046, 0.8691272900897916}, {
                    5.298317366548036, 0.6861700474625961}, {
                    6.684611727667927, 0.0003324458713525462}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011918163023145606`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Hue[0.7946117974981064, 0.6, 0.6], 
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    Line[{{2.302585092994046, 0.8551573641877128}, {
                    3.6888794541139363`, 0.5284293039391211}, {
                    5.298317366548036, -0.27319982381925045`}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011746584031946616`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}, {
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.866878151997941}}, {{
                    3.6888794541139363`, 0.6836756930568122}}, {{
                    5.298317366548036, -0.079812192165549}}, {{
                    6.684611727667927, -0.8901399242268278}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006303982962006238}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.6888794541139363`, 0.7143942506911769}}, {{
                    5.298317366548036, 0.0065844751805165126`}}, {{
                    6.684611727667927, -0.8792394126451941}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.001791485465053763}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    5.298317366548036, 0.8051460163841503}}, {{
                    5.298317366548036, 0.8051460163841503}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0006171601249220227}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    6.684611727667927, 0.7943579649167758}}, {{
                    6.684611727667927, 0.7943579649167758}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.00008022164414034946}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8683889701599127}}, {{
                    5.298317366548036, 0.8359124676953823}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0017336901595955516`}, {
                    "SoftMarginParameter", 0.1}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.772079, 0.431554, 0.102387], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8692162587500608}}, {{
                    5.298317366548036, 0.6170627677664032}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0005480181531154812}, {
                    "SoftMarginParameter", 1.}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.363898, 0.618501, 0.782349], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8681748101864795}}, {{
                    3.6888794541139363`, 0.8496471278065254}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002542551550864308}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[1, 0.75, 0], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    3.6888794541139363`, 0.79958271104433}}, {{
                    5.298317366548036, 0.3905685704316138}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0002898852740062293}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.647624, 0.37816, 0.614037], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8691272900897916}}, {{
                    5.298317366548036, 0.6861700474625961}}, {{
                    6.684611727667927, 0.0003324458713525462}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011918163023145606`}, {
                    "SoftMarginParameter", 0.4}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]], 
                    Tooltip[{
                    Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.571589, 0.586483, 0.], 
                    AbsoluteThickness[1.6]], 
                    GeometricTransformation[
                    Inset[
                    Style["\[FilledCircle]", FontSize -> 5], {0., 0.}], {{{
                    2.302585092994046, 0.8551573641877128}}, {{
                    3.6888794541139363`, 0.5284293039391211}}, {{
                    5.298317366548036, -0.27319982381925045`}}}]}, 
                    Column[{
                    Style["SupportVectorMachine", 
                    GrayLevel[0], 16], 
                    Style[
                    
                    Grid[{{"KernelType", "RadialBasisFunction"}, {
                    "GammaScalingParameter", 0.0011746584031946616`}, {
                    "SoftMarginParameter", 3}, {"PolynomialDegree", 3}, {
                    "BiasParameter", 1}, {"MulticlassStrategy", Automatic}}, 
                    Alignment -> Left, Frame -> All, FrameStyle -> 
                    GrayLevel[0.84], Spacings -> {1, 1}, Background -> {{{
                    GrayLevel[0.95], 
                    Opacity[0.8, 
                    GrayLevel[1]]}}, None}], FontFamily -> "Verdana"]}, 
                    Center]]}}, {{}, {}}}}, {
                    DisplayFunction -> Identity, DisplayFunction -> Identity, 
                    AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
                    AxesLabel -> {None, None}, 
                    AxesOrigin -> {0.5421179064928434, -0.9878819343922105}, 
                    DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {
                    "training examples used", None}}, FrameTicks -> {{Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}, {
                    Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , {}}}, 
                    GridLines -> {
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& , 
                    Charting`ScaledTickValues[{Log, Exp}][#, #2, {6, 6}]& }, 
                    GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageMargins -> 0, 
                    ImagePadding -> {{Automatic, 10}, {37, 0}}, ImageSize -> 
                    330, LabelStyle -> 10, 
                    Method -> {"OptimizePlotMarkers" -> True, 
                    "OptimizePlotMarkers" -> True, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    Exp[
                    Part[#, 1]], 
                    Exp[
                    Part[#, 2]]}& )}}, PlotRange -> {{0.5421179064928434, 
                    Log[1000]}, {-0.9878819343922105, 0.8692162587500608}}, 
                    PlotRangeClipping -> True, PlotRangePadding -> {{
                    Scaled[0.02], 0}, {
                    Scaled[0.02], 
                    Scaled[0.05]}}, Ticks -> {Quiet[
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& , Quiet[
                    
                    Charting`ScaledTicks[{Log, Exp}][#, #2, {6, 6}]]& }}]}]], 
                    Appearance -> "Frameless"]}}, 
                    Alignment -> {Center, Baseline}, 
                    ItemSize -> {{3, 20, 3}, {2}}]], StandardForm],
                 ImageSizeCache->{330., {122., 127.}}],
                DynamicModuleValues:>{}],
               Alignment->Center,
               StripOnInput->False], "\[SpanFromLeft]"}
            },
            AutoDelete->False,
            ColumnsEqual->False,
            
            GridBoxAlignment->{
             "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
            GridBoxDividers->{"Columns" -> {False, {
                 Opacity[0.15]}, False}},
            
            GridBoxItemSize->{
             "Columns" -> {Automatic, {Automatic}}, "Rows" -> {{1.}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], 
                Offset[1.1199999999999999`], {
                 Offset[1.75]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.8]}, 
                Offset[0.2]}}],
           "Grid"],
          FrameMargins->{{10, 10}, {10, 5}},
          FrameStyle->None,
          StripOnInput->False],
         Deploy,
         DefaultBaseStyle->"Deploy"],
        Alignment->Center,
        BaseStyle->{
         FontWeight -> "Light", FontSize -> 11, FontFamily -> 
          ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[0.8], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    Background->GrayLevel[1],
    FrameMargins->{{0, 0}, {0, 0}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   StripOnInput->False,
   LineBreakWithin->False],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",
 CellChangeTimes->{3.823000041824018*^9},
 CellLabel->
  "Out[424]=",ExpressionUUID->"9f649be4-ab6b-495a-bb78-44d4ea95dab5"]
}, Open  ]],

Cell["\<\
Let\[CloseCurlyQuote]s see how well it performs by testing it on a random \
sample of the test data\
\>", "Text",
 CellChangeTimes->{{3.822591053083922*^9, 
  3.8225910697086077`*^9}},ExpressionUUID->"9e2b11b4-e5ab-44c7-bc3a-\
805813741f8d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"bettercf", "[", 
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Equal]", 
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"MNISTtest", ",", "1000"}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.822569063929542*^9, 3.822569126106969*^9}, {
  3.8225693264264917`*^9, 3.822569328987101*^9}, {3.822591096975554*^9, 
  3.822591097678933*^9}, {3.822591171042836*^9, 3.822591171982439*^9}, {
  3.823000050362193*^9, 3.823000050586537*^9}},
 CellLabel->
  "In[425]:=",ExpressionUUID->"e8c37099-d32c-4d05-a1d4-55938e87535d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"True", ",", "876"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", "124"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.823000106559988*^9},
 CellLabel->
  "Out[425]=",ExpressionUUID->"a4533498-9475-4ba3-bd5f-3a99473ac7c9"]
}, Open  ]],

Cell["Now this is close to 90% accurate", "Text",
 CellChangeTimes->{{3.8225911746427097`*^9, 
  3.822591182160274*^9}},ExpressionUUID->"54ec42a6-53b3-4bb2-b07b-\
d6b50541c19f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"Tally", "[", 
   RowBox[{"Map", "[", 
    RowBox[{"bettercf", ",", 
     RowBox[{"RandomSample", "[", 
      RowBox[{
       RowBox[{"MNISTbynumber", "[", "8", "]"}], ",", "1000"}], "]"}]}], 
    "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.822569063929542*^9, 3.822569126106969*^9}, {
  3.8225693264264917`*^9, 3.8225693713053007`*^9}, {3.822569407860344*^9, 
  3.822569533802264*^9}, {3.822591255049089*^9, 3.8225912659081917`*^9}, {
  3.823000184550877*^9, 3.823000184876399*^9}},
 CellLabel->
  "In[427]:=",ExpressionUUID->"ffb1ea3a-9149-4f71-93f3-7a3951907207"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "26"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "34"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "65"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "800"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "24"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.823000261482484*^9},
 CellLabel->
  "Out[427]=",ExpressionUUID->"924a8719-3730-4341-88f9-c6551894801c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1304, 766},
WindowMargins->{{Automatic, 134}, {Automatic, 86}},
FrontEndVersion->"12.2 for Mac OS X x86 (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a64993f-039e-4bd8-bb26-a1c01cc3d079"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 166, 3, 98, "Title",ExpressionUUID->"289eaf38-3e93-40a8-bc2b-d9c992b97006"],
Cell[749, 27, 423, 8, 58, "Text",ExpressionUUID->"ef24bbba-1885-49f3-bd5c-aeaabe0bc185"],
Cell[CellGroupData[{
Cell[1197, 39, 171, 3, 67, "Section",ExpressionUUID->"bde7937b-f30f-4050-93b6-58fce63e9674"],
Cell[1371, 44, 1010, 31, 35, "Text",ExpressionUUID->"cadd491c-50ed-4874-93d3-6fd1c6d20aee"],
Cell[CellGroupData[{
Cell[2406, 79, 695, 21, 33, "Input",ExpressionUUID->"a037800d-9225-49ab-af5d-3c072ac2e1ca"],
Cell[3104, 102, 412, 10, 34, "Output",ExpressionUUID->"72c284b0-0095-48cc-97a6-72b456f2631a"]
}, Open  ]],
Cell[3531, 115, 268, 6, 35, "Text",ExpressionUUID->"395ea9a3-acfc-487f-b9f9-78cf4694122f"],
Cell[CellGroupData[{
Cell[3824, 125, 2537, 70, 114, "Input",ExpressionUUID->"9ca59a21-1e5a-421a-a381-c57d6a5d6aa4"],
Cell[6364, 197, 84498, 1394, 304, "Output",ExpressionUUID->"ee002e94-dcdd-44ba-a64d-c3321f85b8b7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[90911, 1597, 170, 2, 67, "Section",ExpressionUUID->"3b64852d-85ac-42fc-81d6-a533fd895d6a"],
Cell[91084, 1601, 697, 15, 58, "Text",ExpressionUUID->"05d2161c-cfdb-419e-8627-028b75f6b563"],
Cell[91784, 1618, 2748, 74, 157, InheritFromParent,ExpressionUUID->"1baf39a4-fe3b-48a8-8f4b-14e1da2c8efc"],
Cell[CellGroupData[{
Cell[94557, 1696, 501, 8, 30, "Input",ExpressionUUID->"277a89e2-d112-4ae2-ab84-e40a68fffb47"],
Cell[95061, 1706, 18317, 401, 248, "Output",ExpressionUUID->"d5a7845c-1a02-4756-aead-fc973e394bac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113415, 2112, 174, 3, 54, "Subsection",ExpressionUUID->"a0d87674-85da-448f-9f75-c4c4fc2b0335"],
Cell[113592, 2117, 311, 7, 35, "Text",ExpressionUUID->"572c21a5-143a-4be7-99b8-0e67f833dbbf"],
Cell[CellGroupData[{
Cell[113928, 2128, 651, 18, 30, "Input",ExpressionUUID->"39fd0026-dc2c-4255-974a-da8c80cda168"],
Cell[114582, 2148, 1603, 37, 56, "Output",ExpressionUUID->"799aeeae-cbe2-4a36-bd9b-0e56c1c652cd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[116222, 2190, 724, 20, 30, "Input",ExpressionUUID->"432928fe-3fa0-4198-ac8b-6ca392c4d578"],
Cell[116949, 2212, 2382, 63, 77, "Output",ExpressionUUID->"040d51ea-eff7-46d8-98e8-ba372e25b932"]
}, Open  ]],
Cell[119346, 2278, 314, 7, 30, "Input",ExpressionUUID->"852d9e73-3faf-477b-a09e-a7d3c85fe505"],
Cell[119663, 2287, 241, 6, 35, "Text",ExpressionUUID->"b2879cb0-22d2-4c9a-b278-59ac4e9c8e3c"],
Cell[CellGroupData[{
Cell[119929, 2297, 987, 23, 47, "Input",ExpressionUUID->"3ffe4408-3fcf-46b1-a0e4-f6ba35e55493"],
Cell[120919, 2322, 538, 11, 34, "Output",ExpressionUUID->"49910a0e-6607-491c-8961-e6df05d0ec24"]
}, Open  ]],
Cell[121472, 2336, 234, 4, 35, "Text",ExpressionUUID->"bd7948a8-251a-46fc-afb2-461b6156a944"],
Cell[121709, 2342, 458, 12, 30, "Input",ExpressionUUID->"1b6558b4-baa7-4c9c-af88-3005bc0e9790"],
Cell[122170, 2356, 221, 4, 35, "Text",ExpressionUUID->"8f936eb6-5958-47e8-975c-20e978b0b6cb"],
Cell[CellGroupData[{
Cell[122416, 2364, 454, 11, 30, "Input",ExpressionUUID->"0fe7274e-1835-4318-9915-b216629a75eb"],
Cell[122873, 2377, 477, 11, 34, "Output",ExpressionUUID->"497ba005-2166-491f-8f05-d5a7bfd14219"]
}, Open  ]],
Cell[123365, 2391, 161, 3, 35, "Text",ExpressionUUID->"4c0682ec-235b-4b88-9fdc-5ef34b86fb08"],
Cell[CellGroupData[{
Cell[123551, 2398, 456, 11, 30, "Input",ExpressionUUID->"3b9a41f0-56aa-460f-8b39-e5cf723e3e1e"],
Cell[124010, 2411, 460, 11, 34, "Output",ExpressionUUID->"218eae2d-97c0-41f3-9cc7-7d6a92cf1a19"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124507, 2427, 473, 11, 30, "Input",ExpressionUUID->"ff7fb8ed-4ba4-499e-99e9-689a79e4a5ab"],
Cell[124983, 2440, 460, 11, 34, "Output",ExpressionUUID->"d497db61-fe5b-442d-8fae-9ac9f4410b16"]
}, Open  ]],
Cell[125458, 2454, 218, 4, 35, "Text",ExpressionUUID->"71aa4012-4450-45c2-aab6-28babcd20107"],
Cell[CellGroupData[{
Cell[125701, 2462, 1032, 25, 73, "Input",ExpressionUUID->"370bfd30-4d39-437c-ba60-8fe86945b48a"],
Cell[126736, 2489, 19061, 383, 248, "Output",ExpressionUUID->"a9f86132-0567-48f1-9eb5-70f6ab4564c9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[145846, 2878, 171, 3, 54, "Subsection",ExpressionUUID->"e82e002d-49e0-42cc-8e54-e6f0cebf4365"],
Cell[146020, 2883, 435, 16, 35, "Text",ExpressionUUID->"e94c3f54-6f1d-429b-ac94-ebd841892928"],
Cell[146458, 2901, 460, 11, 30, "Input",ExpressionUUID->"3f6fc47f-55ca-41c0-9908-49ca27586383"],
Cell[146921, 2914, 762, 19, 30, "Input",ExpressionUUID->"20a56d69-dbc4-4259-81e1-0e93d5109dc4"],
Cell[CellGroupData[{
Cell[147708, 2937, 325, 8, 30, "Input",ExpressionUUID->"10339893-fad6-4c91-bcd3-005fec9342e9"],
Cell[148036, 2947, 440, 9, 34, "Output",ExpressionUUID->"9da602b5-1e74-49a8-a27d-f7a582b8c2a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[148513, 2961, 491, 12, 30, "Input",ExpressionUUID->"e07683dc-cd84-4d0b-80d2-29339c220f53"],
Cell[149007, 2975, 1296, 28, 34, "Output",ExpressionUUID->"8d6961cd-c185-4381-bf00-a95bd2c89064"]
}, Open  ]],
Cell[150318, 3006, 188, 3, 35, "Text",ExpressionUUID->"ed6a3e03-94c6-463e-8ee5-edd2ba5ddf24"],
Cell[CellGroupData[{
Cell[150531, 3013, 1034, 25, 47, "Input",ExpressionUUID->"ea4cc13a-b92e-450c-a913-362242655375"],
Cell[151568, 3040, 2180, 55, 81, "Output",ExpressionUUID->"dcbcd351-a9e4-4895-80de-2fee5f3046e8"]
}, Open  ]],
Cell[153763, 3098, 465, 12, 35, "Text",ExpressionUUID->"4a17afa9-4bb3-4bfa-9e7e-1967d1f6127a"],
Cell[154231, 3112, 800, 20, 35, "Text",ExpressionUUID->"4e33ebd1-1ff3-4600-8d97-0b8096964f14"],
Cell[CellGroupData[{
Cell[155056, 3136, 446, 12, 30, "Input",ExpressionUUID->"803bf8ca-c056-42b5-8345-c5283b1dd6ea"],
Cell[155505, 3150, 317, 7, 34, "Output",ExpressionUUID->"f4164f1e-e942-4760-a3be-ac781b53b31c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[155859, 3162, 566, 15, 30, "Input",ExpressionUUID->"181e0ab2-0934-47c5-82b3-a4d1eabe144b"],
Cell[156428, 3179, 336, 7, 34, "Output",ExpressionUUID->"47f30bcf-4243-4fed-97a7-aa26bd0d35a8"]
}, Open  ]],
Cell[156779, 3189, 271, 6, 35, "Text",ExpressionUUID->"35032774-e30d-4dbf-99f5-7cc7e51618d1"],
Cell[CellGroupData[{
Cell[157075, 3199, 178, 3, 30, "Input",ExpressionUUID->"5baa77ea-1997-43b3-8291-9e1ce9f621d8"],
Cell[157256, 3204, 425, 10, 34, "Output",ExpressionUUID->"1ce9c56d-0079-41ff-a5e5-3a2db7fd3fcd"]
}, Open  ]],
Cell[157696, 3217, 407, 8, 35, "Text",ExpressionUUID->"140257a3-8af3-40b2-a63b-ffe6b06ec56d"],
Cell[CellGroupData[{
Cell[158128, 3229, 606, 16, 30, "Input",ExpressionUUID->"94fa932b-ad41-415c-bf45-f61824fae632"],
Cell[158737, 3247, 308, 8, 34, "Output",ExpressionUUID->"c80d9a93-5ba9-41f7-acce-3278a918d5ce"]
}, Open  ]],
Cell[159060, 3258, 198, 3, 35, "Text",ExpressionUUID->"1e40ec72-719c-4d47-a1eb-5c57eb1e9b24"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[159307, 3267, 161, 3, 67, "Section",ExpressionUUID->"b5bf50b5-4b7d-404b-ba9e-547513b6c38b"],
Cell[159471, 3272, 427, 8, 58, "Text",ExpressionUUID->"4864c7c6-789f-4875-aaa1-93856e1c6573"],
Cell[159901, 3282, 351, 7, 30, "Input",ExpressionUUID->"5ccd1294-7c3a-4f87-ae2b-3e891445abfa"],
Cell[160255, 3291, 1091, 26, 52, "Input",ExpressionUUID->"0004fbc4-e895-41c2-bfa4-9ed1984559ac"],
Cell[161349, 3319, 909, 23, 71, "Input",ExpressionUUID->"697758f1-dfc2-46c8-a85b-118dfbf15810"],
Cell[162261, 3344, 238, 4, 35, "Text",ExpressionUUID->"d9346f6a-07ba-4745-9a38-bdcf7b6b95e4"],
Cell[162502, 3350, 867, 26, 52, "Input",ExpressionUUID->"f6edf7ba-a3e0-4442-8f9e-0ff52a668d13"],
Cell[163372, 3378, 616, 17, 30, "Input",ExpressionUUID->"b222bd1c-dfea-423b-ac3c-ce6537daec63"],
Cell[163991, 3397, 189, 3, 35, "Text",ExpressionUUID->"aa20f92e-3f62-4012-a4b0-70f91dd6e8a9"],
Cell[CellGroupData[{
Cell[164205, 3404, 411, 9, 30, "Input",ExpressionUUID->"7b4fdae2-57a1-455f-9334-d7bec952b862"],
Cell[164619, 3415, 13131, 278, 451, "Output",ExpressionUUID->"3c7bcaba-ce04-4bbc-9429-d131afacd787"]
}, Open  ]],
Cell[CellGroupData[{
Cell[177787, 3698, 179, 3, 54, "Subsection",ExpressionUUID->"125c3fb4-950d-4960-89f3-f59c80d6202d"],
Cell[177969, 3703, 655, 17, 35, "Text",ExpressionUUID->"94ddb11d-5747-4a93-a5ab-a11e3e07c2c2"],
Cell[178627, 3722, 572, 17, 40, "Input",ExpressionUUID->"5103ce02-778a-4063-b394-61557f5d8641"],
Cell[CellGroupData[{
Cell[179224, 3743, 312, 7, 30, "Input",ExpressionUUID->"4781060c-423e-42d8-bbe4-3d690bb4ba29"],
Cell[179539, 3752, 2828, 71, 101, "Output",ExpressionUUID->"f959ced9-9063-4c59-8821-00e17a516275"]
}, Open  ]],
Cell[CellGroupData[{
Cell[182404, 3828, 405, 9, 30, "Input",ExpressionUUID->"a31ed843-294f-407a-a131-a0fc6c8994fd"],
Cell[182812, 3839, 13046, 275, 451, "Output",ExpressionUUID->"9a58b918-b2d9-4aa0-9c78-2e3b0187e1df"]
}, Open  ]],
Cell[195873, 4117, 199, 3, 35, "Text",ExpressionUUID->"ef691abc-d69d-4fbc-ac0d-ff6784b6e37b"],
Cell[196075, 4122, 522, 13, 30, "Input",ExpressionUUID->"c3697bbb-cd56-40a4-93de-cea28ed32f0e"],
Cell[196600, 4137, 816, 20, 30, "Input",ExpressionUUID->"7f62eda1-3c0b-407c-a08b-d18c2c93ccec"],
Cell[197419, 4159, 368, 9, 30, "Input",ExpressionUUID->"88d360dd-dac2-412c-aa09-791ff1e2a4ff"],
Cell[197790, 4170, 541, 14, 30, "Input",ExpressionUUID->"74d28f7d-987c-4f65-b3c9-d804c565f631"],
Cell[198334, 4186, 188, 3, 35, "Text",ExpressionUUID->"0dd756a2-321a-4c55-8b9e-139c2354cdd9"],
Cell[198525, 4191, 1099, 27, 47, "Input",ExpressionUUID->"bf051e52-95e4-411d-86ba-2c7a63025fd6"],
Cell[CellGroupData[{
Cell[199649, 4222, 261, 5, 30, "Input",ExpressionUUID->"8ed9a95f-352b-42a6-9405-04ef4d80e29c"],
Cell[199913, 4229, 1986, 52, 56, "Output",ExpressionUUID->"663d9d76-283b-4535-9eab-a707e5fe0fe1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[201936, 4286, 775, 18, 33, "Input",ExpressionUUID->"57759d25-528b-4e58-9de0-473f0e7fa7ba"],
Cell[202714, 4306, 836, 20, 34, "Output",ExpressionUUID->"0073b68f-d42d-4b33-8820-cbf72408655c"]
}, Open  ]],
Cell[203565, 4329, 722, 19, 35, "Text",ExpressionUUID->"fa2fed76-7ef8-45bb-88bf-f7dad0734bb5"],
Cell[CellGroupData[{
Cell[204312, 4352, 446, 12, 30, "Input",ExpressionUUID->"4bb2228b-5c54-468b-8f0d-318d0a1e1722"],
Cell[204761, 4366, 526, 12, 34, "Output",ExpressionUUID->"5f3c2d21-375f-4cc5-a375-d01689ffe95a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[205324, 4383, 734, 19, 30, "Input",ExpressionUUID->"12acf138-a12c-46d4-90ee-cb6bda9bf8fc"],
Cell[206061, 4404, 516, 9, 34, "Output",ExpressionUUID->"ee6aefdc-4644-4069-bf04-05af893ffe99"]
}, Open  ]],
Cell[206592, 4416, 208, 4, 35, "Text",ExpressionUUID->"3cdd876a-61f0-4c1e-a3e6-e20a8bdb5b3d"],
Cell[CellGroupData[{
Cell[206825, 4424, 777, 22, 30, "Input",ExpressionUUID->"e74cbda6-4468-43da-87fc-af120b2c9a1d"],
Cell[207605, 4448, 425, 11, 34, "Output",ExpressionUUID->"c9e57d32-5656-4126-a544-cb2a68b7d7de"]
}, Open  ]],
Cell[CellGroupData[{
Cell[208067, 4464, 1105, 28, 52, "Input",ExpressionUUID->"9ac46b35-a8c8-4fb0-8acc-7c9eb3da12f9"],
Cell[209175, 4494, 19331, 390, 451, "Output",ExpressionUUID->"fd627370-44fc-4e33-914d-7c63905fe844"]
}, Open  ]],
Cell[228521, 4887, 185, 3, 35, "Text",ExpressionUUID->"2c5cf1ec-d97d-4d2c-bc13-067fa2c68da3"],
Cell[CellGroupData[{
Cell[228731, 4894, 706, 21, 30, "Input",ExpressionUUID->"739518e8-41fe-498f-8b1a-d648f3d8a6fb"],
Cell[229440, 4917, 460, 11, 34, "Output",ExpressionUUID->"662011a6-edd7-4446-9e6e-2d72722eaade"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229937, 4933, 1273, 30, 52, "Input",ExpressionUUID->"8c0a27cd-0ef5-4831-b3aa-cb1a23f67122"],
Cell[231213, 4965, 69238, 1210, 451, "Output",ExpressionUUID->"0f709f72-d3b0-4f0f-8b8a-79ccf2f1170f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[300500, 6181, 188, 3, 54, "Subsection",ExpressionUUID->"46fc5f4c-3ffa-48b9-b86e-56250f6201ff"],
Cell[300691, 6186, 676, 18, 37, "Text",ExpressionUUID->"6a498b52-ba54-4e92-916a-0a93b2a9eda4"],
Cell[301370, 6206, 547, 15, 33, "Input",ExpressionUUID->"6861ff20-3faf-41d4-9b08-460b06dff3b8"],
Cell[CellGroupData[{
Cell[301942, 6225, 362, 8, 30, "Input",ExpressionUUID->"e9c83070-caa9-4aa8-b412-39a8ec08725e"],
Cell[302307, 6235, 3818, 99, 143, "Output",ExpressionUUID->"52011027-32bc-4b19-a92e-7f7b9a0b997f"]
}, Open  ]],
Cell[306140, 6337, 232, 6, 35, "Text",ExpressionUUID->"38d37acc-0bdb-4c4f-991d-7486c167803f"],
Cell[306375, 6345, 575, 14, 30, "Input",ExpressionUUID->"3397a542-4cbb-467f-b59f-150bb2a6caf0"],
Cell[306953, 6361, 879, 22, 30, "Input",ExpressionUUID->"9c85da43-9e4f-4a00-8f3b-7699cf29f1da"],
Cell[307835, 6385, 368, 9, 30, "Input",ExpressionUUID->"50633e20-1ff8-4749-85f5-888a52caad1d"],
Cell[308206, 6396, 541, 14, 30, "Input",ExpressionUUID->"b230f7f3-e6b6-4875-8729-d458c00b19f8"],
Cell[308750, 6412, 1200, 28, 47, "Input",ExpressionUUID->"4ec81ba1-354b-4de1-9c11-a62b8f0849fe"],
Cell[CellGroupData[{
Cell[309975, 6444, 312, 6, 30, "Input",ExpressionUUID->"a051ad17-0515-473b-80d8-7f7d0fd25b11"],
Cell[310290, 6452, 2017, 52, 56, "Output",ExpressionUUID->"ffc31bbc-6c94-4f93-9013-39397b5c7044"]
}, Open  ]],
Cell[CellGroupData[{
Cell[312344, 6509, 826, 19, 33, "Input",ExpressionUUID->"f7e4c92a-2ff1-4321-9d6e-4b45ea73c2b5"],
Cell[313173, 6530, 616, 17, 34, "Output",ExpressionUUID->"d4e453d5-5f52-4140-b02f-30514786d41d"]
}, Open  ]],
Cell[313804, 6550, 743, 20, 35, "Text",ExpressionUUID->"fb1441ae-dd99-4725-a8f5-f79776112d7c"],
Cell[CellGroupData[{
Cell[314572, 6574, 558, 14, 30, "Input",ExpressionUUID->"71f2efef-129b-4c6a-a3ee-630dc2dfaec7"],
Cell[315133, 6590, 599, 13, 34, "Output",ExpressionUUID->"ef9beaeb-6787-4327-a3b3-613ef8ec360e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[315769, 6608, 893, 21, 30, "Input",ExpressionUUID->"58bf686c-6ec9-4e53-819a-8cc46e29f9cb"],
Cell[316665, 6631, 636, 11, 34, "Output",ExpressionUUID->"87b8aa27-bb56-4f86-92b9-038525426cd4"]
}, Open  ]],
Cell[317316, 6645, 208, 4, 35, "Text",ExpressionUUID->"432d1d91-2cf6-43da-9e08-9c1be9cb08ec"],
Cell[CellGroupData[{
Cell[317549, 6653, 873, 23, 30, "Input",ExpressionUUID->"aa1c82e1-22dc-4e7c-8d15-f8eb5cb588e2"],
Cell[318425, 6678, 555, 13, 34, "Output",ExpressionUUID->"9a216dad-c395-4b09-be65-5ae462914da4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[319017, 6696, 1256, 30, 52, "Input",ExpressionUUID->"898703ac-1d6e-4d87-8310-8111ca61d604"],
Cell[320276, 6728, 134996, 2167, 206, "Output",ExpressionUUID->"b6bc2920-fa36-45f6-ac38-f30139432699"]
}, Open  ]],
Cell[455287, 8898, 185, 3, 35, "Text",ExpressionUUID->"5f1c4167-382c-42bf-83ff-ef71614c9388"],
Cell[CellGroupData[{
Cell[455497, 8905, 706, 21, 30, "Input",ExpressionUUID->"a9f7f073-5780-4f58-bad6-d3d68a1af1b6"],
Cell[456206, 8928, 460, 11, 34, "Output",ExpressionUUID->"2ac18cec-4ec6-4e1f-b0f3-2b1e43b0cd0d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[456703, 8944, 1305, 31, 52, "Input",ExpressionUUID->"ab3cf337-017d-448e-9003-29731fe45794"],
Cell[458011, 8977, 69238, 1210, 451, "Output",ExpressionUUID->"9ca71eaa-6a87-4e9b-bbe3-2236b520e355"]
}, Open  ]],
Cell[CellGroupData[{
Cell[527286, 10192, 1809, 46, 73, "Input",ExpressionUUID->"89813e30-a99b-4f8d-bcfa-70fb7b421378"],
Cell[529098, 10240, 27097, 532, 451, "Output",ExpressionUUID->"18bd68b5-8992-4591-963e-409fa970482e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[556244, 10778, 185, 3, 54, "Subsection",ExpressionUUID->"9e25d241-1cf9-4572-b6f8-5b01afad8606"],
Cell[556432, 10783, 1342, 42, 58, "Text",ExpressionUUID->"1139c56a-36cd-4f56-843f-66c2dfee1852"],
Cell[557777, 10827, 825, 25, 33, "Input",ExpressionUUID->"bcdb7656-8607-4085-8be7-daab6e8116ea"],
Cell[558605, 10854, 485, 13, 35, "Text",ExpressionUUID->"db335bfd-2d20-4a9a-8c3f-e2e587fd670b"],
Cell[CellGroupData[{
Cell[559115, 10871, 284, 6, 30, "Input",ExpressionUUID->"d4172929-328c-46b5-8529-93ed52dad09c"],
Cell[559402, 10879, 2633, 75, 98, "Output",ExpressionUUID->"129db317-a4e9-4a15-b356-bb4b5f8d6d31"]
}, Open  ]],
Cell[562050, 10957, 925, 21, 30, "Input",ExpressionUUID->"f888ebbe-3dbe-4a1c-9a5d-f3b0253ef824"],
Cell[562978, 10980, 419, 10, 30, "Input",ExpressionUUID->"07b8b231-f999-4cc0-a2c6-08204cd05d0b"],
Cell[563400, 10992, 594, 15, 30, "Input",ExpressionUUID->"7f505562-da48-4589-9029-42d8b2edfbe4"],
Cell[563997, 11009, 1222, 33, 47, "Input",ExpressionUUID->"bf2c9c3e-cc67-4e70-9f72-9aa920fcffd7"],
Cell[565222, 11044, 1012, 22, 30, "Input",ExpressionUUID->"1cd62041-111f-4040-bd67-05009c5e6894"],
Cell[CellGroupData[{
Cell[566259, 11070, 214, 4, 30, "Input",ExpressionUUID->"e4e494fc-1cec-4394-90d2-c8e4b292480d"],
Cell[566476, 11076, 1890, 50, 56, "Output",ExpressionUUID->"622e4d2e-516d-488b-ab4d-335d90f369c9"]
}, Open  ]],
Cell[568381, 11129, 332, 7, 35, "Text",ExpressionUUID->"c0803504-b416-4ab1-b175-a69e65a4abcc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[568750, 11141, 163, 3, 54, "Subsection",ExpressionUUID->"a3305560-56b0-42d2-b21f-f613acc54773"],
Cell[568916, 11146, 368, 7, 35, "Text",ExpressionUUID->"1a657693-4fa5-40a8-841d-52ff5cbb44b1"],
Cell[569287, 11155, 1336, 39, 52, "Input",ExpressionUUID->"ee0831d7-7c77-4b86-9db6-cc650f7a3acd"],
Cell[CellGroupData[{
Cell[570648, 11198, 265, 7, 30, "Input",ExpressionUUID->"fbc83d76-0e9f-4a9f-88de-167eb3d13fa1"],
Cell[570916, 11207, 3216, 75, 248, "Output",ExpressionUUID->"d929bbf0-f1ce-42c8-b598-c4f3ca2f7038"]
}, Open  ]],
Cell[574147, 11285, 755, 15, 81, "Text",ExpressionUUID->"eb4a4c44-8f19-4349-be9f-b4c29ed20b24"],
Cell[574905, 11302, 186, 3, 35, "Text",ExpressionUUID->"3d51c64a-579f-48d6-909a-38dd50116918"],
Cell[CellGroupData[{
Cell[575116, 11309, 693, 15, 30, "Input",ExpressionUUID->"42b24b98-a7b8-477c-bb4a-413791f75711"],
Cell[575812, 11326, 57405, 1062, 63, "Output",ExpressionUUID->"66a1e043-7925-48dd-8e84-233367bd6e3f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[633254, 12393, 1149, 30, 52, "Input",ExpressionUUID->"0b019102-5e97-46f9-834a-232162dbc756"],
Cell[634406, 12425, 13482, 254, 376, "Output",ExpressionUUID->"28a4fd6d-c303-46c1-9c3e-4aabe61b6502"]
}, Open  ]],
Cell[647903, 12682, 211, 5, 35, "Text",ExpressionUUID->"af4083e9-c97a-4451-aa68-ef3827a8545a"],
Cell[CellGroupData[{
Cell[648139, 12691, 717, 15, 30, "Input",ExpressionUUID->"d547bbb3-775d-439b-99b1-adc2c8e56e99"],
Cell[648859, 12708, 47190, 891, 63, "Output",ExpressionUUID->"4e840838-87f3-4828-916a-a2ecca98a1d9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[696086, 13604, 1200, 30, 52, "Input",ExpressionUUID->"83f37290-0f9d-4d15-bcd9-512ac8d6d8f3"],
Cell[697289, 13636, 44386, 761, 376, "Output",ExpressionUUID->"4b99c2d9-2220-4638-91a0-c8336259b2b6"]
}, Open  ]],
Cell[741690, 14400, 247, 4, 35, "Text",ExpressionUUID->"b13bba6c-3616-4f39-992f-cb29a2e45d59"],
Cell[CellGroupData[{
Cell[741962, 14408, 876, 20, 49, "Input",ExpressionUUID->"cb03731a-875c-440e-929e-3d85c43c45ed"],
Cell[742841, 14430, 47361, 898, 63, "Output",ExpressionUUID->"c3637778-6497-45d7-aa15-e5cf8a764f64"]
}, Open  ]],
Cell[CellGroupData[{
Cell[790239, 15333, 1051, 28, 52, "Input",ExpressionUUID->"e1fba570-e6ea-4a26-beb9-071d5b74976d"],
Cell[791293, 15363, 38317, 661, 376, "Output",ExpressionUUID->"fa7346ad-d117-476e-b9c6-ed2364cffc43"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[829671, 16031, 227, 5, 67, "Section",ExpressionUUID->"5b7456a3-1a2f-41f1-a5be-9904c63118e1"],
Cell[829901, 16038, 302, 6, 35, "Text",ExpressionUUID->"5ec8ac3d-447b-4953-ba0e-0deec8bb5628"],
Cell[830206, 16046, 539, 12, 30, "Input",ExpressionUUID->"d1d261aa-728b-454d-a9da-65ca88505bf4"],
Cell[830748, 16060, 589, 13, 30, "Input",ExpressionUUID->"2f096863-4844-4fb7-8fb2-292c99e75edd"],
Cell[831340, 16075, 331, 8, 30, "Input",ExpressionUUID->"9ba4ef03-b0b3-474c-9509-d5ee898dbc93"],
Cell[831674, 16085, 278, 6, 35, "Text",ExpressionUUID->"eaa048fa-eb2a-4e80-83d6-d4ea0b4f7340"],
Cell[831955, 16093, 346, 8, 30, "Input",ExpressionUUID->"ac76cc91-1e77-4fc7-a877-1839f263084e"],
Cell[CellGroupData[{
Cell[832326, 16105, 468, 10, 30, "Input",ExpressionUUID->"e8270b54-cd9c-495c-964f-9dfea30d505b"],
Cell[832797, 16117, 11842, 241, 82, "Output",ExpressionUUID->"688d8bca-0182-4cef-aa9f-71ff017251df"]
}, Open  ]],
Cell[CellGroupData[{
Cell[844676, 16363, 262, 5, 30, "Input",ExpressionUUID->"89d666bc-740a-4a50-8bc0-3c46d014fce3"],
Cell[844941, 16370, 73417, 1497, 555, "Output",ExpressionUUID->"1929b965-fdd5-4971-a561-78215500072e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[918395, 17872, 11117, 213, 38, "Input",ExpressionUUID->"b6556ac8-ecb3-4151-825a-486cd1f15cab"],
Cell[929515, 18087, 378, 8, 34, "Output",ExpressionUUID->"0c5b04f9-1104-4e3d-82a9-787a1ad16741"]
}, Open  ]],
Cell[929908, 18098, 251, 6, 35, "Text",ExpressionUUID->"c1843b7e-da22-4305-b0d9-50f9042468f7"],
Cell[CellGroupData[{
Cell[930184, 18108, 695, 17, 30, "Input",ExpressionUUID->"e527a159-0ae9-46e8-a0ed-195df370dc9a"],
Cell[930882, 18127, 309, 9, 34, "Output",ExpressionUUID->"879e3960-26a3-4b61-bbcd-ccd12e289b2d"]
}, Open  ]],
Cell[931206, 18139, 382, 8, 35, "Text",ExpressionUUID->"413ee70e-ba3b-4b17-afd8-cc7cd2cdabec"],
Cell[931591, 18149, 419, 9, 30, "Input",ExpressionUUID->"686074fc-3dfc-4292-a711-2bb991918a9c"],
Cell[CellGroupData[{
Cell[932035, 18162, 490, 11, 30, "Input",ExpressionUUID->"a5816e01-1698-4dba-b99d-bb9944b45536",
 CellID->1905138556],
Cell[932528, 18175, 11723, 239, 82, "Output",ExpressionUUID->"5d3d939c-6bc1-4bd6-b847-b40b40a0be88"]
}, Open  ]],
Cell[CellGroupData[{
Cell[944288, 18419, 220, 4, 30, "Input",ExpressionUUID->"e549e4b2-f75f-42d6-af30-3a77c970fcb5"],
Cell[944511, 18425, 87424, 1759, 554, "Output",ExpressionUUID->"9f649be4-ab6b-495a-bb78-44d4ea95dab5"]
}, Open  ]],
Cell[1031950, 20187, 251, 6, 35, "Text",ExpressionUUID->"9e2b11b4-e5ab-44c7-bc3a-805813741f8d"],
Cell[CellGroupData[{
Cell[1032226, 20197, 748, 18, 30, "Input",ExpressionUUID->"e8c37099-d32c-4d05-a1d4-55938e87535d"],
Cell[1032977, 20217, 307, 9, 34, "Output",ExpressionUUID->"a4533498-9475-4ba3-bd5f-3a99473ac7c9"]
}, Open  ]],
Cell[1033299, 20229, 177, 3, 35, "Text",ExpressionUUID->"54ec42a6-53b3-4bb2-b07b-d6b50541c19f"],
Cell[CellGroupData[{
Cell[1033501, 20236, 622, 14, 30, "Input",ExpressionUUID->"ffb1ea3a-9149-4f71-93f3-7a3951907207"],
Cell[1034126, 20252, 776, 25, 34, "Output",ExpressionUUID->"924a8719-3730-4341-88f9-c6551894801c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

